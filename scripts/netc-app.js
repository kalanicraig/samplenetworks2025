(function() {
  'use strict';

  var globals = typeof global === 'undefined' ? self : global;
  if (typeof globals.require === 'function') return;

  var modules = {};
  var cache = {};
  var aliases = {};
  var has = {}.hasOwnProperty;

  var expRe = /^\.\.?(\/|$)/;
  var expand = function(root, name) {
    var results = [], part;
    var parts = (expRe.test(name) ? root + '/' + name : name).split('/');
    for (var i = 0, length = parts.length; i < length; i++) {
      part = parts[i];
      if (part === '..') {
        results.pop();
      } else if (part !== '.' && part !== '') {
        results.push(part);
      }
    }
    return results.join('/');
  };

  var dirname = function(path) {
    return path.split('/').slice(0, -1).join('/');
  };

  var localRequire = function(path) {
    return function expanded(name) {
      var absolute = expand(dirname(path), name);
      return globals.require(absolute, path);
    };
  };

  var initModule = function(name, definition) {
    var hot = hmr && hmr.createHot(name);
    var module = {id: name, exports: {}, hot: hot};
    cache[name] = module;
    definition(module.exports, localRequire(name), module);
    return module.exports;
  };

  var expandAlias = function(name) {
    var val = aliases[name];
    return (val && name !== val) ? expandAlias(val) : name;
  };

  var _resolve = function(name, dep) {
    return expandAlias(expand(dirname(name), dep));
  };

  var require = function(name, loaderPath) {
    if (loaderPath == null) loaderPath = '/';
    var path = expandAlias(name);

    if (has.call(cache, path)) return cache[path].exports;
    if (has.call(modules, path)) return initModule(path, modules[path]);

    throw new Error("Cannot find module '" + name + "' from '" + loaderPath + "'");
  };

  require.alias = function(from, to) {
    aliases[to] = from;
  };

  var extRe = /\.[^.\/]+$/;
  var indexRe = /\/index(\.[^\/]+)?$/;
  var addExtensions = function(bundle) {
    if (extRe.test(bundle)) {
      var alias = bundle.replace(extRe, '');
      if (!has.call(aliases, alias) || aliases[alias].replace(extRe, '') === alias + '/index') {
        aliases[alias] = bundle;
      }
    }

    if (indexRe.test(bundle)) {
      var iAlias = bundle.replace(indexRe, '');
      if (!has.call(aliases, iAlias)) {
        aliases[iAlias] = bundle;
      }
    }
  };

  require.register = require.define = function(bundle, fn) {
    if (bundle && typeof bundle === 'object') {
      for (var key in bundle) {
        if (has.call(bundle, key)) {
          require.register(key, bundle[key]);
        }
      }
    } else {
      modules[bundle] = fn;
      delete cache[bundle];
      addExtensions(bundle);
    }
  };

  require.list = function() {
    var list = [];
    for (var item in modules) {
      if (has.call(modules, item)) {
        list.push(item);
      }
    }
    return list;
  };

  var hmr = globals._hmr && new globals._hmr(_resolve, require, modules, cache);
  require._cache = cache;
  require.hmr = hmr && hmr.wrap;
  require.brunch = true;
  globals.require = require;
})();

(function() {
var global = typeof window === 'undefined' ? this : window;require.register("fs", function(exports, require, module) {
  module.exports = {};
});
require.register("tls", function(exports, require, module) {
  module.exports = {};
});
require.register("child_process", function(exports, require, module) {
  module.exports = {};
});
var process;
var __makeRelativeRequire = function(require, mappings, pref) {
  var none = {};
  var tryReq = function(name, pref) {
    var val;
    try {
      val = require(pref + '/node_modules/' + name);
      return val;
    } catch (e) {
      if (e.toString().indexOf('Cannot find module') === -1) {
        throw e;
      }

      if (pref.indexOf('node_modules') !== -1) {
        var s = pref.split('/');
        var i = s.lastIndexOf('node_modules');
        var newPref = s.slice(0, i).join('/');
        return tryReq(name, newPref);
      }
    }
    return none;
  };
  return function(name) {
    if (name in mappings) name = mappings[name];
    if (!name) return;
    if (name[0] !== '.' && pref) {
      var val = tryReq(name, pref);
      if (val !== none) return val;
    }
    return require(name);
  }
};
require.register("app-config/netcreate-config.js", function(exports, require, module) {
"use strict";

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

// this file generated by NC command
var NC_CONFIG = {
  dataset: "HIST_GreekVoting_S2024_P5",
  port: "3000",
  googlea: "0"
};
if ((typeof process === "undefined" ? "undefined" : _typeof(process)) === "object") module.exports = NC_CONFIG;
if ((typeof window === "undefined" ? "undefined" : _typeof(window)) === "object") window.NC_CONFIG = NC_CONFIG;
});

require.register("init-appshell.jsx", function(exports, require, module) {
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/*//////////////////////////////// ABOUT \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\*\

    init-appshell.jsx
    application shell loaded and rendered in init.jsx

    These are the top-level React components ("view").

\*\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ * //////////////////////////////////////*/

/// REACT LIBRARIES ///////////////////////////////////////////////////////////
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
var React = require('react');
var UNISYS = require('unisys/client');

/// 1. MAIN VIEWS /////////////////////////////////////////////////////////////
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
var SETTINGS = require('settings');
var NetCreate = require('view/netcreate/NetCreate');
// const AppDefault = require('view/default/AppDefault');
// const HTMLFrame = require('view/html-frame/HTMLFrame');

/// APPLICATION NAVBAR + ROUTER VIEW //////////////////////////////////////////
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/** The application shell consists of a navbar implemented with Reactstrap
 *  components.
 */

var AppShell = function (_UNISYS$Component) {
  _inherits(AppShell, _UNISYS$Component);

  /// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  function AppShell(props) {
    _classCallCheck(this, AppShell);

    var _this = _possibleConstructorReturn(this, (AppShell.__proto__ || Object.getPrototypeOf(AppShell)).call(this, props));

    _this.toggle = _this.toggle.bind(_this);
    _this.state = {
      isOpen: false
    };
    // bind handler
    _this.redirect = _this.redirect.bind(_this);
    // add UNISYS message for redirects
    _this.HandleMessage('SHELL_REDIRECT', _this.redirect);
    return _this;
  }
  /** Handle changes in state of his toggle switch */


  _createClass(AppShell, [{
    key: 'toggle',
    value: function toggle() {
      this.setState({
        isOpen: !this.state.isOpen
      });
    }
    /** Called by SHELL_REDIRECT unisys message */

  }, {
    key: 'redirect',
    value: function redirect(data) {
      var redirect = data.redirect;

      this.props.history.push(redirect);
    }
    /// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    /** Draw top navbar w/ menus and the <NetCreate> view
     */

  }, {
    key: 'render',
    value: function render(props) {
      var _SETTINGS$GetRouteInf = SETTINGS.GetRouteInfoFromURL(window.location.href),
          route = _SETTINGS$GetRouteInf.route,
          routeProps = _SETTINGS$GetRouteInf.routeProps;

      var isLocalHost = SETTINGS.IsLocalHost();
      return React.createElement(
        'div',
        {
          className: '--AppShell',
          style: {
            display: 'flex',
            flexFlow: 'column nowrap',
            width: '100%',
            height: '100vh'
          }
        },
        React.createElement(NetCreate, null)
      );
    } // render()

  }]);

  return AppShell;
}(UNISYS.Component); // AppShell()

/// EXPORT REACT CLASS ////////////////////////////////////////////////////////
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -


module.exports = AppShell;
});

require.register("init.jsx", function(exports, require, module) {
'use strict';

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

/* eslint-disable no-debugger */
if (window.NC_DBG) console.log('inc ' + module.id);
/*//////////////////////////////// ABOUT \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\*\

    init.jsx
    system startup, loaded by app/assets/index.html at end of body.

\*\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ * //////////////////////////////////////*/

var DBG = false;

/// SYSTEM-WIDE LANGUAGE EXTENSIONS ///////////////////////////////////////////
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/// These are loaded in init to make sure they are available globally!
/// You do not need to copy these extensions to your own module files
require('babel-polyfill'); // enables regenerators for async/await

/// LIBRARIES /////////////////////////////////////////////////////////////////
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
var React = require('react');
var ReactDOM = require('react-dom');

/// SYSTEM MODULES ////////////////////////////////////////////////////////////
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/// demo: require system modules; this will likely be removed
var SETTINGS = require('settings');
var UNISYS = require('unisys/client');
var AppShell = require('init-appshell');
var MUR = require('ursys-min');

/// UNISYS LIFECYCLE LOADER ///////////////////////////////////////////////////
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/// When the DOM is loaded, initialize UNISYS
document.addEventListener('DOMContentLoaded', function () {
  console.groupCollapsed('init.jsx bootstrap');
  console.log('%cINIT %cDOMContentLoaded. Starting UNISYS Lifecycle!', 'color:blue', 'color:auto');
  m_SetLifecycleScope();
  _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
    return regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            MUR.NCI.InteropConnect(UNISYS); // MUR INTEROP
            _context.next = 3;
            return UNISYS.JoinNet();

          case 3:
            _context.next = 5;
            return UNISYS.EnterApp();

          case 5:
            _context.next = 7;
            return m_RenderApp();

          case 7:
            _context.next = 9;
            return UNISYS.SetupDOM();

          case 9:
            _context.next = 11;
            return UNISYS.SetupRun();

          case 11:
            // RESET, START, APP_READY, RUN
            console.log('%cINIT %cUNISYS Lifecycle Initialization Complete', 'color:blue', 'color:auto');
            console.groupEnd();

          case 13:
          case 'end':
            return _context.stop();
        }
      }
    }, _callee, undefined);
  }))();
});

/// UNISYS LIFECYCLE CLOSE EVENT //////////////////////////////////////////////
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/** this custom event accesses post-run lifecycles defined for 'DOMContentLoaded'
 *  `event` is originated by `comment-netmessage-class.GlobalOfflineMode
 *  with a custom event message coming from client-network.m_ResetHearbeatTimer
 *  This is so we can display an error to the user explaining the disconnect
 */
document.addEventListener('UNISYSDisconnect', function (event) {
  console.log('%cDISCONNECT %cUNISYSDisconnect. Closing UNISYS Lifecycle!', 'color:blue', 'color:auto');
  // This call will fail if the server is disconnected.
  UNISYS.Log('Server disconnected with error', event);
  // hack a local module for now
  var UDATA = UNISYS.NewDataLink({});
  UDATA.LocalCall('DISCONNECT', event);
  _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {
    return regeneratorRuntime.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            _context2.next = 2;
            return UNISYS.ServerDisconnect();

          case 2:
            // UNISYS has dropped server
            console.log('%cDISCONNECT %cUNISYSDisconnect Complete', 'color:blue', 'color:auto');

          case 3:
          case 'end':
            return _context2.stop();
        }
      }
    }, _callee2, undefined);
  }))();
});

/// LIFECYCLE HELPERS /////////////////////////////////////////////////////////
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/** DEPRECATED? This may no longer actually be needed as it
 *  helper to infer view module scope before module is routed lated (!)
 *  scope is really the 'path' of the current route (e.g. #)
 */
function m_SetLifecycleScope() {
  // set scope for UNISYS execution
  var url = window.location.href;

  var _SETTINGS$GetRouteInf = SETTINGS.GetRouteInfoFromURL(url),
      scope = _SETTINGS$GetRouteInf.scope;

  if (scope) {
    if (DBG) console.log('Lifecycle Module Scope is ' + scope);
    UNISYS.SetScope(scope);
  } else {
    console.warn('m_SetLifecycleScope() could not match scope ' + url);
  }
}
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/** Wraps ReactDOM.render() in a Promise. Execution continues in <AppShell>
 */
function m_RenderApp() {
  if (DBG) console.log('%cINIT %cReactDOM.render() begin', 'color:blue', 'color:auto');

  // declare web components for MUR
  MUR.ViewLib.DeclareComponents();
  //

  return new Promise(function (resolve, reject) {
    try {
      ReactDOM.render(React.createElement(AppShell, null), document.querySelector('#app-container'), function () {
        console.log('%cINIT %cReactDOM.render() complete', 'color:blue', 'color:auto');
        resolve();
      });
    } catch (e) {
      // eslint-disable-next-line no-alert
      alert('m_RenderApp() Lifecycle Error.\nOpen Javascript Console, then press "OK" for for debugging details.');
      // debugger;
    }
  }); // promise
}
});

;require.register("settings.js", function(exports, require, module) {
'use strict';

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

function _toArray(arr) { return Array.isArray(arr) ? arr : Array.from(arr); }

if (window.NC_DBG) console.log('inc ' + module.id);
/*//////////////////////////////// ABOUT \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\*\

  LOCAL SETTINGS
  utility function for managing local

\*\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ * //////////////////////////////////////*/

/// GLOBAL NETWORK INFO (INJECTED ON INDEX) ///////////////////////////////////
///	- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/// NOTE: server-embedded properties are not defined for simple html apps
var EJSPROPS = window.NC_UNISYS || {};

/// STORAGE ///////////////////////////////////////////////////////////////////
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
var S = {};
var DATE = new Date();
var RELOAD_CHECK = 0;
var RELOAD_TIMER = null;

/// MAIN GETTER SETTER FUNCTION  //////////////////////////////////////////////
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/** settings.js returns a function as its module.exports value so
    syntax like let a = SETTINGS['key'] can be used.
 */
var MOD = function MOD(a, b) {
  if (a === undefined) throw 'SETTINGS requires key or key,value parms';
  if (typeof a !== 'string') throw 'SETTINGS parm1 must be key string';

  if (b === undefined) {
    return S[a];
  } else {
    S[a] = b;
    return b;
  }
};

/// ROUTE UTILITIES ///////////////////////////////////////////////////////////
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
var ROUTES_PARAMS = {
  '/': { scope: 'NetCreate' },
  '/edit': { scope: 'NetCreate', plist: ['token'] },
  '/simple': { scope: 'HTMLFrame' }
};
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/** Return matching routed information. Looks part after /#/ as route
 *  information and returns the routing information for UNISYS routing
 *  of components and setting UNISYS module scope (used for client exec)
 */
MOD.GetRouteInfoFromURL = function () {
  var url = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : window.location.href;

  var fn = 'GetRouteInfoFromURL:';
  // routestring is everything after the leading /#/ (not same as URL.hash)
  var hrefParts = url.split('/#/');
  var hrefString = hrefParts.length === 1 ? '' : hrefParts[1];
  // pluck querystring (e.g. ?admin=true) off the end
  var stringParts = hrefString.split('?');
  var routeString = '';
  var queryString = '';
  if (stringParts.length === 1) {
    routeString = stringParts[0];
  } else if (stringParts.length === 2) {
    routeString = stringParts[0];
    queryString = stringParts[1];
  } else throw Error(fn + ' unexpected url format ' + url);

  // handle route
  var routeParameters = routeString.split('/');

  var _routeParameters = _toArray(routeParameters),
      route = _routeParameters[0],
      params = _routeParameters.slice(1);

  var key = '/' + route;
  var routeInfo = ROUTES_PARAMS[key];

  var _ref = routeInfo || {},
      scope = _ref.scope,
      _ref$plist = _ref.plist,
      plist = _ref$plist === undefined ? [] : _ref$plist;

  // build the queryVars dictionary


  var settings = queryString.split('&');
  var vars = {};
  for (var i = 0; i < settings.length; i++) {
    var setting = settings[i];

    var _setting$split = setting.split('='),
        _setting$split2 = _slicedToArray(_setting$split, 2),
        _key = _setting$split2[0],
        value = _setting$split2[1];

    vars[_key] = value;
  }
  // build the routeProps dictionary
  var dict = {};
  for (var _i = 0; _i < plist.length; _i++) {
    var pkey = plist[_i];
    dict[pkey] = params[_i];
  }
  // return RouteInfo
  var result = {
    route: key,
    scope: scope,
    routeProps: dict,
    queryVars: vars
  };
  return result;
};

/// API ///////////////////////////////////////////////////////////////////////
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/** alternate call to set a key value pair
 */
MOD.Set = function (key, val) {
  MOD(key, val);
};
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/** alternate call to retrieve a key
 */
MOD.Get = function (key) {
  return MOD(key);
};
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/** Force Reload if another module was navigated to and we want to ensure the
    entire browser was refreshed so only one set of app modules is loaded
 */
MOD.IsReloadRequired = function () {
  RELOAD_CHECK++;
  if (RELOAD_CHECK > 1) {
    console.warn('IsReloadRequired ' + RELOAD_CHECK + ' - refreshing settings');
    if (RELOAD_TIMER) clearTimeout(RELOAD_TIMER);
    RELOAD_TIMER = setTimeout(function () {
      location.reload();
    }, 500);
  } else {
    console.log('IsReloadRequired ' + RELOAD_CHECK + ' - no refresh needed');
  }
};
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/** test time function
 */
MOD.CurrentTime = function () {
  return DATE.toDateString();
};

/// SERVER-PROVIDED PROPERTIES ////////////////////////////////////////////////
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/** searches through the window.NC_UNISYS object that is injected by web page
    app/static/index.ejs, which contains interesting values from server
 */
MOD.EJSProp = function (propName) {
  if (propName === undefined) return EJSPROPS;
  return EJSPROPS[propName];
};
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
MOD.ServerHostName = function () {
  return EJSPROPS.server.hostname || 'ERROR';
};
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
MOD.ServerHostIP = function () {
  return EJSPROPS.server.ip || 'ERROR';
};
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
MOD.ServerAppURL = function (suburl) {
  var ubits = new URL(window.location);
  var hash = ubits.hash.split('/')[0];
  // let serverip = MOD.ServerHostIP();
  var url = ubits.protocol + '//' + ubits.host + '/' + hash;
  if (typeof suburl === 'string') url += suburl;
  return url;
};

/// UTILITIES /////////////////////////////////////////////////////////////////
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/** Joshua added to disable Extras in init-appshell.jsx */
MOD.IsLocalHost = function () {
  var ip = MOD.EJSProp('client').ip;
  return ip.endsWith('127.0.0.1');
};
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/** Returns true is the NetCreate app should assume that an administrator is
 *  logged in. Administrators can edit templates. The check is very weak,
 *  relying on browsers running on localhost with the URL parameter.
 *  TODO: will be replacing with "real" login system for NetCreate 2.0.
 */
MOD.IsAdmin = function () {
  var isLocalHost = MOD.IsLocalHost();
  var rinfo = MOD.GetRouteInfoFromURL().queryVars || {};
  var urlHasAdmin = rinfo.admin === 'true';
  //
  return isLocalHost && urlHasAdmin;
};

/// EXPORT MODULE DEFINITION //////////////////////////////////////////////////
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
module.exports = MOD;
});

require.register("system/datastore.js", function(exports, require, module) {
'use strict';

/*//////////////////////////////// ABOUT \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\*\

  DATASTORE
  stub for testing module loading
  eventually will load data from database
  data.json is { nodes: [ {} ... {} ] }

\*\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ * //////////////////////////////////////*/

var TOML = require('@iarna/toml');
var UNISYS = require('unisys/client');
var PROMPTS = require('system/util/prompts');
var PR = PROMPTS.Pad('Datastore');
var NetMessage = require('unisys/common-netmessage-class');

/// CONSTANTS /////////////////////////////////////////////////////////////////
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
var DBG = { load: true };

/// INITIALIZE MODULE /////////////////////////////////////////////////////////
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
var DSTOR = UNISYS.NewModule(module.id);
var UDATA = UNISYS.NewDataLink(DSTOR);
var NCDATA = {};

/// LIFECYCLE /////////////////////////////////////////////////////////////////
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/** establish message handlers during INITIALIZE phase
 */
DSTOR.Hook('INITIALIZE', function () {
  // DBUPDATE_ALL is a local call originating from within the app
  // Used to update the full NCDATA object during template updates
  UDATA.HandleMessage('DBUPDATE_ALL', function (data) {
    DSTOR.UpdateDataPromise(data);
  });

  // DB_UPDATE is a local call originating from within the app
  // Generally used to update individual nodes and edges
  UDATA.HandleMessage('DB_UPDATE', function (data) {
    DSTOR.UpdateServerDB(data);
  });

  // DB_BATCHUPDATE is a local call originating from within the app
  // Generally used to update mutliple comments
  UDATA.HandleMessage('DB_BATCHUPDATE', function (data) {
    DSTOR.BatchUpdateServerDB(data);
  });

  // DB_INSERT is a local call originating from within the app
  // Generally used to add new nodes and edges after an import
  UDATA.HandleMessage('DB_INSERT', function (data) {
    DSTOR.InsertServerDB(data);
  });

  // DB_MERGE is a local call originating from within the app
  // Generally used to update or add new nodes and edges after an import
  // Unlike DB_INSERT, it'll update existing nodes/edges
  UDATA.HandleMessage('DB_MERGE', DSTOR.MergeServerDB);

  UDATA.OnAppStateChange('SESSION', function (decodedData) {
    var isValid = decodedData.isValid;
    // console.log(PR, 'Handling SESSION', isValid || '[NO LOGIN TOKEN]');

    if (isValid) DSTOR.SetSessionGroupID(decodedData);
  });
});

/// SESSION ///////////////////////////////////////////////////////////////////
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/** datastore needs to set NetMessage GroupID property on behalf of SESSIONS
    because SESSION can't include NetMessage (or vice versa)
 */
DSTOR.SetSessionGroupID = function (decodedData) {
  var token = decodedData.token,
      isValid = decodedData.isValid;

  if (isValid) {
    NetMessage.GlobalSetGroupID(token);
    console.log(PR + ' valid token %c' + token, 'color:red');
  } else {
    console.warn(PR + ' bad token %c' + token + ' ignored', 'color:red');
  }
};

/// DB INTERFACE //////////////////////////////////////////////////////////////
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/** API: Placeholder DATA access function
 */
DSTOR.Data = function () {
  return NCDATA;
};
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/** API: Write update to database
 */
DSTOR.UpdateServerDB = function (data) {
  // check that network is online
  if (UNISYS.IsStandaloneMode()) {
    console.warn(PR, 'STANDALONE MODE: UpdateServerDB() suppressed!');
    return;
  }
  // it is!
  UDATA.Call('SRV_DBUPDATE', data).then(function (res) {
    if (res.OK) {
      console.log(PR, 'server db transaction', data, 'success');
    } else {
      console.log(PR, 'error updating server db', res);
    }
  });
};
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/** API: Write batch updates to database
 */
DSTOR.BatchUpdateServerDB = function (data) {
  // check that network is online
  if (UNISYS.IsStandaloneMode()) {
    console.warn(PR, 'STANDALONE MODE: UpdateServerDB() suppressed!');
    return;
  }
  // it is!
  UDATA.Call('SRV_DBBATCHUPDATE', data).then(function (res) {
    if (res.OK) {
      console.log(PR, 'server db transaction', data, 'success');
    } else {
      console.log(PR, 'error updating server db', res);
    }
  });
};
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/** update max node id count for generating new ids
 */
DSTOR.PromiseCalculateMaxNodeId = function () {
  return new Promise(function (resolve, reject) {
    UDATA.NetCall('SRV_CALCULATE_MAXNODEID').then(function (data) {
      if (data.maxNodeID !== undefined) {
        if (DBG) console.log(PR, 'server calculated max_node_id', data.maxNodeID);
        resolve(data.maxNodeID);
      } else {
        reject(new Error('unknown error' + JSON.stringify(data)));
      }
    });
  });
};
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/** get a unique NodeID
 */
DSTOR.PromiseNewNodeID = function () {
  return new Promise(function (resolve, reject) {
    UDATA.NetCall('SRV_DBGETNODEID').then(function (data) {
      if (data.nodeID) {
        if (DBG) console.log(PR, 'server allocated node_id', data.nodeID);
        resolve(data.nodeID);
      } else {
        if (UNISYS.IsStandaloneMode()) {
          reject(new Error('STANDALONE MODE: UI should prevent PromiseNewNodeID() from running!'));
        } else {
          reject(new Error('unknown error' + JSON.stringify(data)));
        }
      }
    });
  });
};
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/** get multiple unique NodeIDs
 */
DSTOR.PromiseNewNodeIDs = function (count) {
  return new Promise(function (resolve, reject) {
    UDATA.NetCall('SRV_DBGETNODEIDS', { count: count }).then(function (data) {
      if (data.nodeIDs) {
        if (DBG) console.log(PR, 'server allocated node_id', data.nodeIDs);
        resolve(data.nodeIDs);
      } else {
        reject(new Error('unknown error' + JSON.stringify(data)));
      }
    });
  });
};
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/** update max edge id count for generating new ids
 */
DSTOR.PromiseCalculateMaxEdgeId = function () {
  return new Promise(function (resolve, reject) {
    UDATA.NetCall('SRV_CALCULATE_MAXEDGEID').then(function (data) {
      if (data.maxEdgeID !== undefined) {
        if (DBG) console.log(PR, 'server calculated max_edge_id', data.maxEdgeID);
        resolve(data.maxEdgeID);
      } else {
        reject(new Error('unknown error' + JSON.stringify(data)));
      }
    });
  });
};
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/** get a unique Edge
 */
DSTOR.PromiseNewEdgeID = function () {
  return new Promise(function (resolve, reject) {
    UDATA.NetCall('SRV_DBGETEDGEID').then(function (data) {
      if (data.edgeID) {
        if (DBG) console.log(PR, 'server allocated edge_id:', data.edgeID);
        resolve(data.edgeID);
      } else {
        if (UNISYS.IsStandaloneMode()) {
          reject(new Error('STANDALONE MODE: UI should prevent PromiseNewEdgeID() from running!'));
        } else {
          reject(new Error('unknown error' + JSON.stringify(data)));
        }
      }
    });
  });
};
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/** get multiple unique EdgeIDs
 */
DSTOR.PromiseNewEdgeIDs = function (count) {
  return new Promise(function (resolve, reject) {
    UDATA.NetCall('SRV_DBGETEDGEIDS', { count: count }).then(function (data) {
      if (data.edgeIDs) {
        if (DBG) console.log(PR, 'server allocated edge_id:', data.edgeIDs);
        resolve(data.edgeIDs);
      } else {
        reject(new Error('unknown error' + JSON.stringify(data)));
      }
    });
  });
};
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/** get a unique CommentID
 */
DSTOR.PromiseNewCommentID = function () {
  return new Promise(function (resolve, reject) {
    UDATA.NetCall('SRV_DBGETCOMMENTID').then(function (data) {
      if (data.comment_id) {
        if (DBG) console.log(PR, 'server allocated comment_id', data.comment_id);
        resolve(data.comment_id);
      } else {
        if (UNISYS.IsStandaloneMode()) {
          reject(new Error('STANDALONE MODE: UI should prevent PromiseNewCommentID() from running!'));
        } else {
          reject(new Error('unknown error' + JSON.stringify(data)));
        }
      }
    });
  });
};

/// DATABASE LOADER ///////////////////////////////////////////////////////////
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/** API: Load default data set from a JSON file in /assets/data
 */
DSTOR.PromiseJSONFile = function (jsonFile) {
  if (typeof jsonFile !== 'string') {
    throw new Error('pass arg <filename_in_assets/data>');
  }
  var promise = new Promise(function (resolve, reject) {
    var xobj = new XMLHttpRequest();
    xobj.addEventListener('load', function (event) {
      if (event.target.status === 404) {
        reject(new Error('file not found'));
        return;
      }
      var data = event.target.responseText;
      NCDATA = Object.assign(NCDATA, JSON.parse(data));
      resolve(NCDATA);
    });
    xobj.open('GET', '' + jsonFile, true);
    xobj.send();
  });
  return promise;
};
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/** API: Load default data set from a TOML file in /assets/data
 */
DSTOR.PromiseTOMLFile = function (tomlFile) {
  if (typeof tomlFile !== 'string') {
    throw new Error('pass arg <filename_in_assets/data>');
  }
  var promise = new Promise(function (resolve, reject) {
    var xobj = new XMLHttpRequest();
    xobj.addEventListener('load', function (event) {
      if (event.target.status === 404) {
        reject(new Error('file not found'));
        return;
      }
      var data = event.target.responseText;
      var tomlData = Object.assign(NCDATA, TOML.parse(data));
      resolve(tomlData);
    });
    xobj.open('GET', '' + tomlFile, true);
    xobj.send();
  });
  return promise;
};
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/** API: Load D3 Database
 */
DSTOR.PromiseD3Data = function () {
  // UDATA.Call() returns a promise
  return UDATA.Call('SRV_DBGET', {}); // server.js
};
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/** API: Write Template file to Server
 */
DSTOR.SaveTemplateFile = function (template) {
  // UDATA.Call() returns a promise
  return UDATA.Call('SRV_TEMPLATESAVE', { template: template }); // server.js
};
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/** API: Get Template File Path.
    Called by template-editor-mgr when downloading template file.
 */
DSTOR.GetTemplateTOMLFileName = function () {
  return UDATA.Call('SRV_GET_TEMPLATETOML_FILENAME');
};
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/** API: Update database from d3data-formatted object
 */
DSTOR.UpdateDataPromise = function (d3data) {
  return new Promise(function (resolve, reject) {
    UDATA.Call('SRV_DBUPDATE_ALL', d3data).then(function (res) {
      if (res.OK) {
        console.log(PR, 'database update OK');
        resolve(res);
      } else {
        reject(new Error(JSON.stringify(res)));
      }
    });
  });
};
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/** API: Insert new records into database from d3data-formatted object
 */
DSTOR.InsertServerDB = function (d3data) {
  return new Promise(function (resolve, reject) {
    UDATA.Call('SRV_DBINSERT', d3data).then(function (res) {
      if (res.OK) {
        console.log(PR, 'database update OK');
        resolve(res);
      } else {
        reject(new Error(JSON.stringify(res)));
      }
    });
  });
};
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/**
 * API: Add or Insert records into database from d3data-formatted object
 * @param {object} mergeData
 * @param {array} mergeData.nodes
 * @param {array} mergeData.edges
 * @returns
 */
DSTOR.MergeServerDB = function (mergeData) {
  return new Promise(function (resolve, reject) {
    UDATA.Call('SRV_DBMERGE', mergeData).then(function (res) {
      if (res.OK) {
        console.log(PR, 'database update OK');
        resolve(res);
      } else {
        reject(new Error(JSON.stringify(res)));
      }
    });
  });
};
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/** API: (WIP) write database from d3data-formatted object
 */
DSTOR.OverwriteDataPromise = function (d3data) {
  return new Promise(function (resolve, reject) {
    UDATA.Call('SRV_DBSET', d3data).then(function (res) {
      if (res.OK) {
        console.log(PR, 'database set OK');
        resolve(res);
      } else {
        reject(new Error(JSON.stringify(res)));
      }
    });
  });
};

/// EXPORT MODULE /////////////////////////////////////////////////////////////
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
module.exports = DSTOR;
});

require.register("system/util/constant.js", function(exports, require, module) {
'use strict';

/*//////////////////////////////// ABOUT \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\*\

  Constants

\*\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ * //////////////////////////////////////*/

var React = require('react');

/// CONSTANTS & DECLARATIONS //////////////////////////////////////////////////
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
var CONSTANT = {};

CONSTANT.SEARCH_PLACEHOLDER = 'Type a node name...';
CONSTANT.EDGE_NOT_SET_LABEL = '...';
CONSTANT.ARROW_DOWN = '\u2193';
CONSTANT.ARROW_UPDOWN = '\u21F5';
CONSTANT.ARROW_RIGHT = '\u2794';

// From Glyphicons
// Update NetCreate.css to set size
CONSTANT.ICON_PENCIL = React.createElement(
  'svg',
  { id: 'icon-pencil', xmlns: 'http://www.w3.org/2000/svg', viewBox: '0 0 32 32' },
  React.createElement('path', {
    id: 'pencil',
    d: 'M27.414,8.82812l-2.08588,2.08594L21.08588,6.67188l2.08587-2.08594a.99985.99985,0,0,1,1.41425,0l2.828,2.82812A.99986.99986,0,0,1,27.414,8.82812ZM8.08594,19.67188l4.24218,4.24218L23.91406,12.32812,19.67181,8.08594ZM4.27667,27.09863a.50005.50005,0,0,0,.62476.62476l5.92773-2.48023L6.75677,21.1709Z'
  })
);
CONSTANT.ICON_VIEW = React.createElement(
  'svg',
  { id: 'icon-view', xmlns: 'http://www.w3.org/2000/svg', viewBox: '0 0 32 32' },
  React.createElement('path', {
    id: 'eye',
    d: 'M30.30762,14.36768C28.25488,12.002,22.751,6.5,16,6.5S3.74512,12.002,1.69336,14.36572a2.49922,2.49922,0,0,0-.001,3.2666C3.74512,19.99805,9.249,25.5,16,25.5s12.25488-5.502,14.30762-7.86768A2.49888,2.49888,0,0,0,30.30762,14.36768ZM9.24042,20.25977A25.33965,25.33965,0,0,1,4.25391,16a25.33613,25.33613,0,0,1,4.98657-4.25977,7.93436,7.93436,0,0,0-.00006,8.51954ZM16,22a6,6,0,1,1,6-6A6.00657,6.00657,0,0,1,16,22Zm6.75952-1.74023a7.93436,7.93436,0,0,0,.00006-8.51954A25.33965,25.33965,0,0,1,27.74609,16,25.33613,25.33613,0,0,1,22.75952,20.25977ZM19,16a3.00014,3.00014,0,1,1-5.80646-1.03174,1.49952,1.49952,0,0,0,1.77472-1.77466A2.97577,2.97577,0,0,1,19,16Z'
  })
);

/// MODULE EXPORTS ////////////////////////////////////////////////////////////
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
module.exports = CONSTANT;
});

require.register("system/util/enum.js", function(exports, require, module) {
'use strict';

/*//////////////////////////////// ABOUT \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\*\

  Enumerators

\*\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ * //////////////////////////////////////*/

/// CONSTANTS & DECLARATIONS //////////////////////////////////////////////////
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
var ENUM = {};
// EDITORTYPE handles network edit locking messages
ENUM.EDITORTYPE = {
  TEMPLATE: 'template',
  IMPORTER: 'importer',
  NODE: 'node', // parameter sent with packet, listed here for coverage
  EDGE: 'edge', // parameter sent with packet, listed here for coverage
  COMMENT: 'comment'
};
// BUILT-IN FIELDS
ENUM.BUILTIN_FIELDS_NODE = ['id', 'label', 'type', 'degrees', 'created', 'createdBy', 'updated', 'updatedBy', 'revision'];
ENUM.BUILTIN_FIELDS_EDGE = ['id', 'source', 'type', 'target', 'weight', // displayed in attributew tab
'degrees', 'created', 'createdBy', 'updated', 'updatedBy', 'revision', 'sourceLabel', // used internally for filters
'targetLabel' // used internally for filters
];

/// MODULE EXPORTS ////////////////////////////////////////////////////////////
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
module.exports = ENUM;
});

require.register("system/util/hdate.js", function(exports, require, module) {
'use strict';

var _chronoNode = require('chrono-node');

var chrono = _interopRequireWildcard(_chronoNode);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } } /*//////////////////////////////// ABOUT \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\*\
                                                                                                                                                                                                    
                                                                                                                                                                                                      Historical Date Utilities
                                                                                                                                                                                                    
                                                                                                                                                                                                      Used by the URDateField component to parse and format historical dates.
                                                                                                                                                                                                      Also used in NodeTablea and EdgeTable for sorting and filtering.
                                                                                                                                                                                                    
                                                                                                                                                                                                    \*\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ * //////////////////////////////////////*/


var HDATE = {};

/// HISTORICAL CHRONO /////////////////////////////////////////////////////////
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/// Create a custom parser for BCE/CE dates
///   ex: erasChrono.parseDate("I'll arUrive at 2.30AM tomorrow");
HDATE.erasChrono = chrono.casual.clone();
HDATE.erasChrono.parsers.push({
  pattern: function pattern() {
    // match year if "BC/AD/BCE/CE" (case insensitive)
    //   "10bc"  -- without space
    //   "10 bc" -- with space
    return (/(\d+)\s*(BCE|CE|BC|AD)?/i
    );
  },
  extract: function extract(context, match) {
    var year = parseInt(match[1], 10);
    var era = match[2] ? match[2].toUpperCase() : 'CE'; // default to CE
    // Adjust the year based on the era
    var adjustedYear = era === 'BCE' || era === 'BC' ? -year : year;
    return { year: adjustedYear };
  }

  // ALTERNATIVE APPROACH: Any 3 digits is a year
  //
  // NOTE: This only works with an UnlikelyFormatFilter override.
  //       UnlikelyFormatFilter will remove raw numbers
  //       so if we want to allow 3 digits, then
  ///      UnlikelyFormatFilter needs to be overriden, otherwise
  //       the ParsingResults are filtered out.
  //       Remove lines 10-15 `if (result.text.replace(" ", "").match(/^\d*(\.\d*)?$/)) {`
  // {
  //   pattern: () => {
  //     // match year if more than 3 digits assume CE
  //     // NOTE: This assumes the string starts with the digits
  //     return /(\d{3,})/i;
  //   },
  //   extract: (context, match) => {
  //     const year = parseInt(match[0], 10);
  //     return { year: year };
  //   }
  // },
});
HDATE.erasChrono.refiners.push({
  refine: function refine(context, results) {
    // placeholder if we decide we want to add a refiner
    return results;
  }
});

/// CONSTANTS & DECLARATIONS //////////////////////////////////////////////////
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
// Use template to define other values, e.g. BC/AD
// Other ERAS are not currently defined
HDATE.ERAS = {
  pre: 'BCE',
  post: 'CE'
};
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
// `CALENDAR` is not currently used.
HDATE.CALENDAR = {
  ISO: 'iso8601',
  GREGORIAN: 'gregory',
  JULIAN: 'julian',
  ISLAMIC: 'islamic',
  HEBREW: 'hebrew',
  CHINESE: 'chinese'
};
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
HDATE.DATEFORMAT = {
  AS_ENTERED: 'As Entered',

  // MONTH
  MONTH_ABBR: 'MMM',
  MONTH_FULL: 'Month',
  MONTH_NUM: 'M',
  MONTH_PAD: 'MM',

  // MONTHDAY
  MONTHDAY_ABBR: 'MMM D',
  MONTHDAY_FULL: 'Month D',
  MONTHDAY_NUM: 'M/D',
  MONTHDAY_PAD: 'MM/DD',

  // YEARMONTHDAY
  MONTHDAYYEAR_ABBR: 'MMM D, YYYY',
  MONTHDAYYEAR_FULL: 'Month D, YYYY',
  MONTHDAYYEAR_NUM: 'M/D/YYYY',
  MONTHDAYYEAR_PAD: 'MM/DD/YYYY',
  YEARMONTHDAY_ABBR: 'YYYY MMM D',
  YEARMONTHDAY_FULL: 'YYYY Month D',
  YEARMONTHDAY_NUM: 'YYYY/M/D',
  YEARMONTHDAY_PAD: 'YYYY/MM/DD',
  HISTORICAL_MONTHDAYYEAR_ABBR: 'MMM D, YYYY CE',
  HISTORICAL_MONTHDAYYEAR_FULL: 'Month D, YYYY CE',
  HISTORICAL_MONTHDAYYEAR_NUM: 'M/D/YYYY CE',
  HISTORICAL_MONTHDAYYEAR_PAD: 'MM/DD/YYYY CE',
  HISTORICAL_YEARMONTHDAY_ABBR: 'YYYY MMM D CE',
  HISTORICAL_YEARMONTHDAY_FULL: 'YYYY Month D CE',
  HISTORICAL_YEARMONTHDAY_NUM: 'YYYY/M/D CE',
  HISTORICAL_YEARMONTHDAY_PAD: 'YYYY/MM/DD CE',

  // YEARMONTH
  MONTHYEAR_ABBR: 'MMM YYYY',
  MONTHYEAR_FULL: 'Month YYYY',
  MONTHYEAR_NUM: 'M/YYYY',
  MONTHYEAR_PAD: 'MM/YYYY',
  YEARMONTH_ABBR: 'YYYY MMM',
  YEARMONTH_FULL: 'YYYY Month',
  YEARMONTH_NUM: 'YYYY/M',
  YEARMONTH_PAD: 'YYYY/MM',
  HISTORICAL_MONTHYEAR_ABBR: 'MMM YYYY CE',
  HISTORICAL_MONTHYEAR_FULL: 'Month YYYY CE',
  HISTORICAL_MONTHYEAR_NUM: 'M/YYYY CE',
  HISTORICAL_MONTHYEAR_PAD: 'MM/YYYY CE',
  HISTORICAL_YEARMONTH_ABBR: 'YYYY MMM CE',
  HISTORICAL_YEARMONTH_FULL: 'YYYY Month CE',
  HISTORICAL_YEARMONTH_NUM: 'YYYY/M CE',
  HISTORICAL_YEARMONTH_PAD: 'YYYY/MM CE',

  // YEAR
  YEAR: 'YYYY',
  HISTORICALYEAR: 'YYYY CE'
};

/// UTILITIES //////////////////////////////////////////////////////////////////
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
HDATE.u_pad = function (num) {
  if (!num) return '';
  return num.toString().padStart(2, '0');
};
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
HDATE.u_monthAbbr = function (num) {
  var date = new Date(2000, num - 1, 1);
  return date.toLocaleDateString('default', { month: 'short' });
};
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
HDATE.u_monthName = function (num) {
  var date = new Date(2000, num - 1, 1);
  return date.toLocaleDateString('default', { month: 'long' });
};

/// HDATE METHODS //////////////////////////////////////////////////////////////
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
HDATE.Parse = function (dateInputStr) {
  return HDATE.erasChrono.parse(dateInputStr);
};
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/** Show how the raw input string is parsed into date information by breaking
 *  down the known values (e.g. `day`, and `month`) into a human-readable string.
 *  @param {Array} ParsedResult - a chrono array of parsed date objects
 */
HDATE.ShowValidationResults = function (ParsedResult) {
  // Show interpreted values
  if (ParsedResult.length > 0) {
    var knownValues = ParsedResult[0].start.knownValues;
    var dateValidationStr = knownValues ? Object.keys(knownValues).map(function (k) {
      return k + ':' + knownValues[k];
    }) : ["result: 'cannot interpret'"];
    // TODO show HDATE.ERAS TOO?
    return dateValidationStr;
  }
  return undefined;
};
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/** Show the list of available format types with previews based on the values
 *  parsed from the input string. e.g. `April 1, 2024` will show formats
 *  that include a month, day, and year.
 *  @param {Array} ParsedResult - a chrono array of parsed date objects
 *  @return {Array} formatMenuOptions - an array of format objects with `value` and `preview` keys
 */
HDATE.ShowMatchingFormats = function (ParsedResult, dateFormat, allowFormatSelection) {
  var options = [{ value: 'AS_ENTERED', preview: 'as entered' }];
  if (ParsedResult.length < 1) {
    if (allowFormatSelection) return options;else return [{ value: dateFormat, preview: HDATE.DATEFORMAT[dateFormat] }];
  }

  var matchingTypes = [];
  var additionalOptions = [];
  var knownValues = ParsedResult[0].start.knownValues;
  var knownTypes = Object.keys(ParsedResult[0].start.knownValues);
  var dateInputStr = ParsedResult[0].text;

  if (!allowFormatSelection) {
    // force the format to use the defined format
    var _options = [{
      value: dateFormat,
      preview: HDATE.GetPreviewStr(dateInputStr, knownValues, dateFormat)
    }];
    return _options;
  }

  // Figure out which formats are eligible based on the known values
  if (knownTypes.includes('year')) {
    if (knownTypes.includes('month')) {
      if (knownTypes.includes('day')) {
        // year month day
        matchingTypes = ['MONTHDAYYEAR_ABBR', 'MONTHDAYYEAR_FULL', 'MONTHDAYYEAR_NUM', 'MONTHDAYYEAR_PAD', 'YEARMONTHDAY_ABBR', 'YEARMONTHDAY_FULL', 'YEARMONTHDAY_NUM', 'YEARMONTHDAY_PAD', 'HISTORICAL_MONTHDAYYEAR_ABBR', 'HISTORICAL_MONTHDAYYEAR_FULL', 'HISTORICAL_MONTHDAYYEAR_NUM', 'HISTORICAL_MONTHDAYYEAR_PAD', 'HISTORICAL_YEARMONTHDAY_ABBR', 'HISTORICAL_YEARMONTHDAY_FULL', 'HISTORICAL_YEARMONTHDAY_NUM', 'HISTORICAL_YEARMONTHDAY_PAD'];
      } else {
        // year month only
        matchingTypes = ['MONTHYEAR_ABBR', 'MONTHYEAR_FULL', 'MONTHYEAR_NUM', 'MONTHYEAR_PAD', 'YEARMONTH_ABBR', 'YEARMONTH_FULL', 'YEARMONTH_NUM', 'YEARMONTH_PAD', 'HISTORICAL_MONTHYEAR_ABBR', 'HISTORICAL_MONTHYEAR_FULL', 'HISTORICAL_MONTHYEAR_NUM', 'HISTORICAL_MONTHYEAR_PAD', 'HISTORICAL_YEARMONTH_ABBR', 'HISTORICAL_YEARMONTH_FULL', 'HISTORICAL_YEARMONTH_NUM', 'HISTORICAL_YEARMONTH_PAD'];
      }
    } else {
      // year only
      matchingTypes = ['YEAR', 'HISTORICALYEAR'];
    }
  } else if (knownTypes.includes('month')) {
    if (knownTypes.includes('day')) {
      matchingTypes = ['MONTHDAY_ABBR', 'MONTHDAY_FULL', 'MONTHDAY_NUM', 'MONTHDAY_PAD'];
    } else {
      matchingTypes = ['MONTH_ABBR', 'MONTH_FULL', 'MONTH_NUM', 'MONTH_PAD'];
    }
  }

  additionalOptions = matchingTypes.map(function (type) {
    return {
      value: type,
      preview: HDATE.GetPreviewStr(dateInputStr, knownValues, type)
    };
  });
  options = [].concat(_toConsumableArray(additionalOptions), _toConsumableArray(options));
  return options;
};
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/** Show the formatted date string using the parsed result information
 *  @param {String} dateInputStr - the raw input string
 *  @param {Object} knownValues - the parsed date values
 *  @param {String} format - the selected format
 *  @returns {String} - the formatted date string
 */
HDATE.GetPreviewStr = function (dateInputStr, knownValues, format) {
  var month = knownValues.month || 'M?';
  var day = knownValues.day || 'D?';
  var year = knownValues.year || 'Y?';
  switch (format) {
    case 'MONTH_ABBR':
      return '' + HDATE.u_monthAbbr(month);
    case 'MONTH_FULL':
      return '' + HDATE.u_monthName(month);
    case 'MONTH_NUM':
      return '' + month;
    case 'MONTH_PAD':
      return '' + HDATE.u_pad(month);
    case 'MONTHDAY_ABBR':
      return HDATE.u_monthAbbr(month) + ' ' + day;
    case 'MONTHDAY_FULL':
      return HDATE.u_monthName(month) + ' ' + day;
    case 'MONTHDAY_NUM':
      return month + '/' + day;
    case 'MONTHDAY_PAD':
      return HDATE.u_pad(month) + '/' + HDATE.u_pad(day);
    case 'MONTHDAYYEAR_ABBR':
      return HDATE.u_monthAbbr(month) + ' ' + day + ', ' + year;
    case 'MONTHDAYYEAR_FULL':
      return HDATE.u_monthName(month) + ' ' + day + ', ' + year;
    case 'MONTHDAYYEAR_NUM':
      return month + '/' + day + '/' + year;
    case 'MONTHDAYYEAR_PAD':
      return HDATE.u_pad(month) + '/' + HDATE.u_pad(day) + '/' + year;
    case 'YEARMONTHDAY_ABBR':
      return year + ' ' + HDATE.u_monthAbbr(month) + ' ' + day;
    case 'YEARMONTHDAY_FULL':
      return year + ' ' + HDATE.u_monthName(month) + ' ' + day;
    case 'YEARMONTHDAY_NUM':
      return year + '/' + month + '/' + day;
    case 'YEARMONTHDAY_PAD':
      return year + '/' + HDATE.u_pad(month) + '/' + HDATE.u_pad(day);
    case 'HISTORICAL_MONTHDAYYEAR_ABBR':
      return year < 1 ? HDATE.u_monthAbbr(month) + ' ' + day + ', ' + Math.abs(year) + ' ' + HDATE.ERAS.pre : HDATE.u_monthAbbr(month) + ' ' + day + ', ' + year + ' ' + HDATE.ERAS.post;
    case 'HISTORICAL_MONTHDAYYEAR_FULL':
      return year < 1 ? HDATE.u_monthName(month) + ' ' + day + ', ' + Math.abs(year) + ' ' + HDATE.ERAS.pre : HDATE.u_monthName(month) + ' ' + day + ', ' + year + ' ' + HDATE.ERAS.post;
    case 'HISTORICAL_MONTHDAYYEAR_NUM':
      return year < 1 ? month + '/' + day + '/' + Math.abs(year) + ' ' + HDATE.ERAS.pre : month + '/' + day + '/' + year + ' ' + HDATE.ERAS.post;
    case 'HISTORICAL_MONTHDAYYEAR_PAD':
      return year < 1 ? HDATE.u_pad(month) + '/' + HDATE.u_pad(day) + '/' + Math.abs(year) + ' ' + HDATE.ERAS.pre : HDATE.u_pad(month) + '/' + HDATE.u_pad(day) + '/' + year + ' ' + HDATE.ERAS.post;
    case 'HISTORICAL_YEARMONTHDAY_ABBR':
      return year < 1 ? Math.abs(year) + ' ' + HDATE.u_monthAbbr(month) + ' ' + day + ' ' + HDATE.ERAS.pre : year + ' ' + HDATE.u_monthAbbr(month) + ' ' + day + ' ' + HDATE.ERAS.post + ' ';
    case 'HISTORICAL_YEARMONTHDAY_FULL':
      return year < 1 ? Math.abs(year) + ' ' + HDATE.u_monthName(month) + ' ' + day + ' ' + HDATE.ERAS.pre : year + ' ' + HDATE.u_monthName(month) + ' ' + day + ' ' + HDATE.ERAS.post;
    case 'HISTORICAL_YEARMONTHDAY_NUM':
      return year < 1 ? Math.abs(year) + '/' + month + '/' + day + ' ' + HDATE.ERAS.pre : year + '/' + month + '/' + day + ' ' + HDATE.ERAS.post;
    case 'HISTORICAL_YEARMONTHDAY_PAD':
      return year < 1 ? Math.abs(year) + '/' + HDATE.u_pad(month) + '/' + HDATE.u_pad(day) + ' ' + HDATE.ERAS.pre : year + '/' + HDATE.u_pad(month) + '/' + HDATE.u_pad(day) + ' ' + HDATE.ERAS.post;
    case 'MONTHYEAR_ABBR':
      return HDATE.u_monthAbbr(month) + ' ' + year;
    case 'MONTHYEAR_FULL':
      return HDATE.u_monthName(month) + ' ' + year;
    case 'MONTHYEAR_NUM':
      return month + '/' + year;
    case 'MONTHYEAR_PAD':
      return HDATE.u_pad(month) + '/' + year;
    case 'YEARMONTH_ABBR':
      return year + ' ' + HDATE.u_monthAbbr(month);
    case 'YEARMONTH_FULL':
      return year + ' ' + HDATE.u_monthName(month);
    case 'YEARMONTH_NUM':
      return year + '/' + month;
    case 'YEARMONTH_PAD':
      return year + '/' + HDATE.u_pad(month);
    case 'HISTORICAL_MONTHYEAR_ABBR':
      return year < 1 ? HDATE.u_monthAbbr(month) + ' ' + Math.abs(year) + ' ' + HDATE.ERAS.pre : HDATE.u_monthAbbr(month) + ' ' + year + ' ' + HDATE.ERAS.post;
    case 'HISTORICAL_MONTHYEAR_FULL':
      return year < 1 ? HDATE.u_monthName(month) + ' ' + Math.abs(year) + ' ' + HDATE.ERAS.pre : HDATE.u_monthName(month) + ' ' + year + ' ' + HDATE.ERAS.post;
    case 'HISTORICAL_MONTHYEAR_NUM':
      return year < 1 ? month + '/' + Math.abs(year) + ' ' + HDATE.ERAS.pre : month + '/' + year + ' ' + HDATE.ERAS.post;
    case 'HISTORICAL_MONTHYEAR_PAD':
      return year < 1 ? HDATE.u_pad(month) + '/' + Math.abs(year) + ' ' + HDATE.ERAS.pre : HDATE.u_pad(month) + '/' + year + ' ' + HDATE.ERAS.post;
    case 'HISTORICAL_YEARMONTH_ABBR':
      return year < 1 ? Math.abs(year) + ' ' + HDATE.u_monthAbbr(month) + ' ' + HDATE.ERAS.pre : year + ' ' + HDATE.u_monthAbbr(month) + ' ' + HDATE.ERAS.post;
    case 'HISTORICAL_YEARMONTH_FULL':
      return year < 1 ? Math.abs(year) + ' ' + HDATE.u_monthName(month) + ' ' + HDATE.ERAS.pre : year + ' ' + HDATE.u_monthName(month) + ' ' + HDATE.ERAS.post;
    case 'HISTORICAL_YEARMONTH_NUM':
      return year < 1 ? Math.abs(year) + '/' + month + ' ' + HDATE.ERAS.pre : year + '/' + month + ' ' + HDATE.ERAS.post;
    case 'HISTORICAL_YEARMONTH_PAD':
      return year < 1 ? Math.abs(year) + '/' + HDATE.u_pad(month) + ' ' + HDATE.ERAS.pre : year + '/' + HDATE.u_pad(month) + ' ' + HDATE.ERAS.post;
    case 'YEAR':
      return '' + year;
    case 'HISTORICALYEAR':
      return year < 1 ? Math.abs(year) + ' ' + HDATE.ERAS.pre : year + ' ' + HDATE.ERAS.post;
    case 'AS_ENTERED':
    default:
      // console.log('showprevieow...showing as entered', dateInputStr);
      return '' + dateInputStr || '...';
  }
};

/// MODULE EXPORTS ////////////////////////////////////////////////////////////
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
module.exports = HDATE;
});

require.register("system/util/jscli.js", function(exports, require, module) {
'use strict';

if (window.NC_DBG) console.log('inc ' + module.id);
/*//////////////////////////////// ABOUT \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\*\

  JS CLI

\*\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ * //////////////////////////////////////*/

var UNISYS = require('unisys/client');
// const PROMPTS = require('system/util/prompts');

/// CONSTANTS & DECLARATIONS ////////////////////////////////////////////////////
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
var SHOW_DOM = true;

/// INITIALIZE MODULE /////////////////////////////////////////////////////////
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
var JSCLI = UNISYS.NewModule(module.id);
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
var CMD = [];

/// DEFINE CLI FUNCTIONS //////////////////////////////////////////////////////
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
JSCLI.AddFunction = function (f) {
  if (typeof f !== 'function') throw Error('AddFunction() arg is Function object');
  CMD.push(f);
};
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
JSCLI.HelpString = function () {
  var out = 'The following CLI commands are available\n\n';
  CMD.forEach(function (f) {
    out += '  ' + f.name + '()\n';
  });
  out += '\n';
  out += 'Mac shortcuts to open console\n';
  out += '  Chrome  : cmd-option-j\n';
  out += '  Firefox : cmd-option-k\n';
  out += 'PC use ctrl-shift instead\n';
  return out;
};
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/** initialize registered functions
 */
JSCLI.Hook('RESET', function () {
  JSCLI.AddFunction(function ncHelp() {
    return JSCLI.HelpString();
  });
  CMD.forEach(function (f) {
    window[f.name] = f;
  });
  if (SHOW_DOM) JSCLI.DOM_ShowInstructions();
});
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
JSCLI.DOM_ShowInstructions = function () {
  var E_SHELL = document.getElementById('fdshell');
  if (!E_SHELL) {
    // console.warn(PR,"DOM_ShowInstructions() found no id 'fdshell' to append instructions. Type 'ncHelp()' to list available JSCLI functions.");
    return;
  }
  var E_OUT = document.createElement('pre');
  var E_HEADER = document.createElement('h4');
  E_SHELL.appendChild(E_HEADER);
  E_SHELL.appendChild(E_OUT);
  E_HEADER.innerHTML = 'Command Information';
  E_OUT.innerHTML = JSCLI.HelpString();
};

/// EXPORT MODULE /////////////////////////////////////////////////////////////
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
module.exports = JSCLI;
});

require.register("system/util/path.js", function(exports, require, module) {
'use strict';

/*//////////////////////////////// ABOUT \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\*\

  Path Strings
  REGEX approach from https://stackoverflow.com/a/47212224

\*\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ * //////////////////////////////////////*/

/// CONSTANTS & DECLARATIONS ///////////////////////////////////////////////////
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
var PATH = {};
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
var rx_dir = /(.*)\/+([^/]*)$/;
var rx_file = /()(.*)$/;

/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/** Return the directory portion of a path
 */
PATH.Parse = function (str) {
  // [0] original string
  // [1] dirname
  // [2] filename
  return rx_dir.exec(str) || rx_file.exec(str);
};
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/** Return the directory portion of a path
 */
PATH.Dirname = function (str) {
  // return str.substring(0,str.lastIndexOf("/"));
  return (rx_dir.exec(str) || rx_file.exec(str))[1];
};
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/** Return the file portion of a path
 */
PATH.Basename = function (str) {
  // return str.substring(str.lastIndexOf("/")+1);
  return (rx_dir.exec(str) || rx_file.exec(str))[2];
};
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/** Return the string stripped of extension
 */
PATH.StripExt = function (str) {
  return str.substr(0, str.lastIndexOf('.'));
};

/// EXPORT MODULE DEFINITION //////////////////////////////////////////////////
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
module.exports = PATH;
});

require.register("system/util/prompts.js", function(exports, require, module) {
'use strict';

/*//////////////////////////////// ABOUT \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\*\

  String Prompts for server

\*\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ * //////////////////////////////////////*/

var REFLECT = require('./reflection');

/// CONSTANTS /////////////////////////////////////////////////////////////////
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/// detect node environment and set padsize accordingly
var IS_NODE = typeof process !== 'undefined' && process.release && process.release.name === 'node';
var PAD_SIZE = IS_NODE ? 9 // nodejs
: 0; // not nodejs
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/// module declaration
var PROMPTS = {};

/// PROMPT STRING HELPERS /////////////////////////////////////////////////////
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/** return a string padded to work as a prompt for either browser or node
 *  console output
 */
PROMPTS.Pad = function () {
  var prompt = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';
  var psize = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : PAD_SIZE;

  var len = prompt.length;
  if (IS_NODE) return prompt.padEnd(psize, ' ') + '-';
  // must be non-node environment, so do dynamic string adjust
  if (!psize) return prompt + ':';
  // if this far, then we're truncating
  if (len >= psize) prompt = prompt.substr(0, psize - 1);else prompt.padEnd(psize, ' ');
  return prompt + ':';
};
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/** returns PAD_SIZE stars
 */
PROMPTS.Stars = function (count) {
  if (count !== undefined) return ''.padEnd(count, '*');
  return ''.padEnd(PAD_SIZE, '*');
};
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/** return string of calling object's name
 */
PROMPTS.FunctionName = function () {
  return REFLECT.FunctionName(2);
};

/// EXPORT MODULE DEFINITION //////////////////////////////////////////////////
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
module.exports = PROMPTS;
});

require.register("system/util/reflection.js", function(exports, require, module) {
'use strict';

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

/*//////////////////////////////// ABOUT \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\*\

  Reflection and other Object Inspection Utilities

\*\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ * //////////////////////////////////////*/

var STACKTRACE = require('stacktrace-js');
var PATH = require('./path');

/// MODULE DECLARATION ////////////////////////////////////////////////////////
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
var REFLECT = {};
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/** Returns the name of the constructor for the current class
 *  https://stackoverflow.com/questions/22777181/typescript-get-to-get-class-name-at-runtime
 */
REFLECT.ExtractClassName = function (obj) {
  var funcNameRegex = /function (.{1,})\(/;
  var results = funcNameRegex.exec(obj.constructor.toString());
  return results && results.length > 1 ? results[1] : '';
};
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/** Returns the name of the calling function
 */
REFLECT.FunctionName = function () {
  var depth = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;

  var stack = STACKTRACE.getSync();
  var frame = stack[depth];
  var fn = frame.functionName;
  if (!fn) {
    fn = PATH.Basename(frame.fileName);
    fn += ':' + frame.lineNumber + ':' + frame.columnNumber;
    return fn;
  } else {
    var bits = fn.split('.');
    return 'method ' + bits[1] + '() called by module ' + bits[0];
  }
};
///	- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/** InspectModule() prints a list of public properties and methods for each
 *  require module that contains the passed string. It returns a string,
 *  so you will have to console.log() to see the output.
 */
REFLECT.InspectModule = function (str) {
  throw Error('REFLECT.InspectModule() needs to be rewritten for brunch-style modules. ' + str);
};
///	- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/** InspectObject() accepts an object and a label, and prints a list of
 *  all the methods and properties in it. It returns a string, so you will
 *  have to console.log() to see the output.
 */
REFLECT.InspectObject = function (obj, depth) {
  if (!obj) return 'Must pass an object or 1401 watched object key string';
  var out = '';
  // handle command line calls
  switch (typeof obj === 'undefined' ? 'undefined' : _typeof(obj)) {
    case 'object':
    case 'function':
      break;
    default:
      return 'must pass object or function, not ' + (typeof obj === 'undefined' ? 'undefined' : _typeof(obj));
  }
  // handle recursive scan
  depth = depth || 0;
  var label = obj.constructor.name || '(anonymous object)';
  var indent = '';
  for (var i = 0; i <= depth; i++) {
    indent += '\t';
  }out += label + '\n';
  out += '\n';
  out += m_DumpObj(obj, depth + 1);
  var proto = Reflect.getPrototypeOf(obj);
  if (proto) {
    out += '\n' + indent + 'IN PROTO: ';
    out += this.InspectObject(proto, depth + 1);
    out += '\n';
  }
  if (depth === 0) out = '\n' + out;
  console.log(out);
  return obj;
};

/// SUPPORTING FUNCTIONS //////////////////////////////////////////////////////
///	- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/** Support function for InspectModule() and InspectObject()
 *  Also checks m_watching array
 */
function m_DumpObj(obj, depth) {
  var indent = '';
  for (var i = 0; i < depth; i++) {
    indent += '\t';
  }var str = '';
  Object.keys(obj).forEach(function (key) {
    var prop = obj[key];
    var type = typeof prop === 'undefined' ? 'undefined' : _typeof(prop);
    str += indent;
    str += type + '\t' + key;
    switch (type) {
      case 'function':
        var regexp = /function.*\(([^)]*)\)/;
        var args = regexp.exec(prop.toString());
        str += ' (' + args[1] + ')';
        break;
      default:
        break;
    }
    str += '\n';
  });
  return str;
}

/// GLOBAL HOOKS //////////////////////////////////////////////////////////////
///	- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
if ((typeof window === 'undefined' ? 'undefined' : _typeof(window)) === 'object') {
  window.InspectModule = REFLECT.InspectModule;
  window.InspectObject = REFLECT.InspectObject;
  window.DBG_Out = function (msg, selector) {
    REFLECT.Out(msg, false, selector);
  };
  window.DBG_OutClean = function (msg, selector) {
    REFLECT.Out(msg, true, selector);
  };
}

/// EXPORT MODULE DEFINITION //////////////////////////////////////////////////
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
module.exports = REFLECT;
});

require.register("test.js", function(exports, require, module) {
'use strict';

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

if (window.NC_DBG) console.log('inc ' + module.id);
/*//////////////////////////////// ABOUT \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\*\

  TEST

\*\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ * //////////////////////////////////////*/

var DBG = false;

/// DECLARATIONS //////////////////////////////////////////////////////////////
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/** list of tests that are allowed to run
 */
var TESTS = {
  call: false, // unisys calls
  state: false, // unisys state manager
  hook: false, // unisys lifecycle hooks
  remote: false, // unisys 'remote' calls to other module
  net: false, // network connection to socket server
  server: false // unisys 'server implemented' calls
};
/** groups of tests to run
 */
var PASSED = {};
var TEST_GO = false;
/** pairs of arrays to match (array of arrays)
 */
var ARR_MATCH = [];
var PR = 'TEST:';
var m_meta_info = {};

var E_SHELL = void 0,
    E_OUT = void 0,
    E_HEADER = void 0;
var m_failed = [];
var m_skipped = [];
var m_passed = [];

/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/** Main TEST ENABLE
    pass the testname (as listed in TESTS) and either true or false)
 */
var TM = function TM(testname, flag) {
  if (testname === undefined) {
    console.warn(PR + ' %cConfigured and Active', 'color:red;background-color:yellow');
    TEST_GO = true;
    return true;
  }
  if (typeof testname !== 'string') throw 'arg1 must be a testname';
  if (!TESTS[testname]) throw '"' + testname + '" is not a valid testname';
  if (DBG) console.log(PR, 'TM', testname, flag || '');
  if (flag === undefined) {
    if (!TEST_GO) console.error(PR + ' Test Switch read before testing started');
    var setting = TESTS[testname];
    return setting;
  } else {
    TESTS[testname] = flag;
    m_ConfigureTestFlags(testname, flag);
    return flag;
  }
};
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
TM.SetTitle = function (text) {
  E_HEADER.innerText = text;
};
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
TM.SetMeta = function (meta, value) {
  if (typeof meta === 'string') {
    var obj = {};
    obj[meta] = value;
    meta = obj;
  }
  if ((typeof meta === 'undefined' ? 'undefined' : _typeof(meta)) === 'object') {
    Object.assign(m_meta_info, meta);
  } else {
    throw Error('SetMeta() expected either object or string,value');
  }
};
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
TM.MetaString = function () {
  var o = '';
  Object.entries(m_meta_info).forEach(function (_ref) {
    var _ref2 = _slicedToArray(_ref, 2),
        k = _ref2[0],
        v = _ref2[1];

    o += k + ':' + v + ' ';
  });
  return o;
};
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/** API: pass the particular subtest
 */
TM.Pass = function (subtest) {
  m_InitShell();
  // initialize tests
  if (DBG) console.log(PR + ' %cPass %c' + subtest, 'color:green', 'color:black');
  if (PASSED[subtest]) {
    if (PASSED[subtest]) ++PASSED[subtest];else PASSED[subtest] = 1;
  } else {
    throw Error('Unknown subtest: ' + subtest);
  }
};
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/** API: fail the particular subtest
 */
TM.Fail = function (subtest) {
  m_InitShell();
  if (DBG) console.error(PR + ' %cFail ' + subtest, 'color:red;font-weight:bold');
  if (PASSED[subtest]) {
    // 'null' for 'condition succeed' tests
    // '0' for 'no error detected' tests
    var flag = PASSED[subtest];
    if (typeof flag === 'string') {
      // this has already failed with error
      PASSED[subtest] = flag + '+';
      return;
    }
    if (flag === null) return; // null flag are skipped
    if (flag === 0) {
      PASSED[subtest] = -1; // failed once
      return;
    }
    if (flag <= 0) {
      --PASSED[subtest]; // multiple failures
      return;
    }
    // bizarre 'succeeded but now failed'
    if (flag > 0) {
      PASSED[subtest] = 'succeeded ' + flag + ' times, then failed';
      return;
    }
  }
  throw Error('Unknown subtest: ' + subtest);
};
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/** API: check if the particular subtests passed have indeed passed
 */
TM.Passed = function () {
  if (DBG) console.log(PR, 'Passed');
  var passed = true;

  for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
    args[_key] = arguments[_key];
  }

  args.forEach(function (subtest) {
    if (!PASSED[subtest]) throw '"' + subtest + '" is not valid subtest';
    passed = passed && PASSED[subtest];
  });
  return passed;
};
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/** API: output test results
 */
TM.Assess = function () {
  if (DBG) console.log(PR, 'Assess');
  m_failed = [];
  m_skipped = [];
  m_passed = [];
  m_PreTest();
  m_TestResults();
};
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/** API: assess whether passed arrays match during Assess function()
 */
TM.AssessArrayMatch = function (subtest, arr1, arr2) {
  if (DBG) console.log(PR, 'AssessArrayMatch');
  ARR_MATCH.push([subtest, arr1, arr2]);
};
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/** API: return TRUE if there were no failing tests in the last test.
    Call TM.Assess() again to retest
 */
TM.AllPassed = function () {
  return m_failed.length !== 0;
};

/// TEST FUNCTIONS ////////////////////////////////////////////////////////////
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/** sets the PASSED object keys to enable/disable tests prior to running
 */
function m_ConfigureTestFlags(testname, flag) {
  if (flag === undefined) throw 'arg2 flag must be true to enable, false to disable';
  // the subtest value must be set to false first
  // to skip tests, the subtest value is set to null
  if (flag === false) flag = null;
  if (flag === true) flag = false;
  // set subtest flags
  var subtests = void 0;
  switch (testname) {
    case 'state':
      subtests = {
        stateChange: flag,
        stateMerge: flag,
        stateConcat: flag
      };
      break;
    case 'hook':
      subtests = {
        hookInit1: flag,
        hookInit2: flag,
        hookInitDeferred: flag,
        hookStart: flag
      };
      break;
    case 'call':
      subtests = {
        callHndlrReg: flag,
        callHndlrData: flag,
        callHndlrDataProp: flag,
        callDataReturn: flag,
        callDataAdd: flag,
        callDataMulti: flag
      };
      break;
    case 'remote':
      subtests = {
        remoteCall: flag,
        remoteData: flag,
        remoteData2: flag,
        remoteDataReturn: flag,
        remoteDataAdd: flag,
        remoteDataMulti: flag
      };
      break;
    case 'server':
      subtests = {
        serverCall: flag,
        serverCallOrder: flag,
        serverReturn: flag,
        serverData: flag,
        serverDataAdd: flag
      };
      break;
    case 'net':
      subtests = {
        netMessageReg: flag,
        netCallHndlr: flag,
        netSendHndlr: flag,
        netSendNoEcho: 0, // if this stays 0, then NOERR has passed
        netSignal: flag,
        netSignalEcho: flag,
        netData: flag,
        netDataReturn: flag,
        netDataAdd: flag,
        //          netDataGather     : flag,
        netDataMulti: flag
      };
      break;
    default:
      throw 'Unknown test "' + testname + '"';
  } // end switch
  Object.assign(PASSED, subtests);
}
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
function m_PreTest() {
  // test arrays
  ARR_MATCH.forEach(function (pair) {
    var pass = true;
    var subtest = pair[0];
    var arr1 = pair[1];
    var arr2 = pair[2];
    pass = pass && arr1.length === arr2.length;
    for (var i = 0; i < arr1.length; i++) {
      pass = pass && arr1[i] === arr2[i];
    }
    if (pass) TM.Pass(subtest);
  });
}
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/** prints the test output to console
 */
function m_TestResults() {
  m_ShowShell();
  // check all test results
  var pEntries = Object.entries(PASSED);
  var padding = 0;
  // find longest string
  pEntries.forEach(function (_ref3) {
    var _ref4 = _slicedToArray(_ref3, 1),
        key = _ref4[0];

    if (key.length > padding) padding = key.length;
  });
  // scan test results
  pEntries.forEach(function (_ref5) {
    var _ref6 = _slicedToArray(_ref5, 2),
        key = _ref6[0],
        value = _ref6[1];

    var res = '';
    if (value === null) {
      // res = `${(key).padEnd(padding)} [ ]\n`;
      m_skipped.push(res);
    } else switch (typeof value === 'undefined' ? 'undefined' : _typeof(value)) {
      case 'number':
        if (value >= 1) {
          if (value === 1) res = key.padEnd(padding) + ' [OK]\n';
          if (value > 1) res = key.padEnd(padding) + ' [OK] x ' + value + '\n';
          m_passed.push(res);
        } else {
          if (value === 0) {
            res = key.padEnd(padding) + ' [NP]\n';
            m_passed.push(res);
          }
          if (value === -1) {
            res = key.padEnd(padding) + ' [!!] FAIL\n';
            m_failed.push(res);
          }
          if (value < -1) {
            res = key.padEnd(padding) + ' [!!] FAIL x ' + -value + '\n';
            m_failed.push(res);
          }
        }
        break;
      case 'boolean':
        if (value) {
          res = key.padEnd(padding) + ' [OK]\n';
          m_passed.push(res);
        } else {
          res = key.padEnd(padding) + ' [!!] FAIL\n';
          m_failed.push(res);
        }
        break;
      default:
        m_passed.push(key.padEnd(padding) + ' [OK] \'' + value + '\'\n');
        break;
    } // switch typeof value
  }); // pEntries.forEach

  var testTitle = 'UNISYS LOGIC TEST RESULTS';
  console.group(testTitle);
  var out = m_passed.concat(m_failed, m_skipped).join('');

  // additional help
  var tnotes = '';
  if (!TM.Passed('netCallHndlr')) tnotes += 'NOTE: \'netCallHndlr\' requires a synched remote app to call-in\n';
  if (!TM.Passed('netSendHndlr')) tnotes += 'NOTE: \'netSendHndlr\' requires a synched remote app to call-in\n';
  if (!TM.Passed('netData')) tnotes += 'NOTE: \'netData*\' requires a synched remote app to respond to call-out\n';
  if (tnotes) out += '\n' + tnotes;

  // summary
  var summary = m_passed.length + '=passed';
  if (m_failed.length) summary += ' ' + m_failed.length + '=failed';
  if (m_skipped.length) summary += ' ' + m_skipped.length + '=skipped';
  console.log(out + '\n' + summary);
  TM.SetTitle(testTitle + ' ' + TM.MetaString());
  E_OUT.innerText = summary + '\n\n';
  E_OUT.innerText += 'OPEN JAVASCRIPT CONSOLE TO SEE DETAILS\n';
  E_OUT.innerText += 'Mac shortcuts to open console\n';
  E_OUT.innerText += '  Chrome  : cmd-option-j\n';
  E_OUT.innerText += '  Firefox : cmd-option-k\n';
  E_OUT.innerText += 'PC use ctrl-shift instead\n';
  console.groupEnd();
}
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/** initialize the shell user interface for test results as elements, but
    don't yet link them because component may not have rendered yet
 */
function m_InitShell() {
  if (!E_OUT) {
    E_OUT = document.createElement('pre');
    E_HEADER = document.createElement('h4');
    E_HEADER.innerText = 'RUNNING TESTS ';
    E_OUT.innerText = '.';
  } else {
    E_OUT.innerText += '.';
  }
}
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/*/ show the shell elements by finding root div and appending them
/*/function m_ShowShell() {
  E_SHELL = document.getElementById('fdshell');
  E_SHELL.appendChild(E_HEADER);
  E_SHELL.appendChild(E_OUT);
}

/// EXPORT MODULE DEFINITION //////////////////////////////////////////////////
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
module.exports = TM;
});

require.register("unisys/client-datalink-class.js", function(exports, require, module) {
'use strict';

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

if (window.NC_DBG) console.log('inc ' + module.id);
/*//////////////////////////////// ABOUT \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\*\

  UNISYS DATALINK CLASS

  The UNISYS DATALINK (UDATA) class represents a connection to the UNISYS
  event messaging system. Instances are created with UNISYS.NewDataLink().

  Each UNODE has a unique UNISYS_ID (the UID) which represents its
  local address. Combined with the device UADDR, this makes every UNODE
  on the network addressable.

  * UNODES can get and set global state objects
  * UNODES can subscribe to state change events
  * UNODES can register listeners for a named message
  * UNODES can send broadcast to all listeners
  * UNODES can call listeners and receive data

\*\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ * //////////////////////////////////////*/

/* added for pull request #81 so 'npm run lint' test appears clean */
/* eslint-disable no-unused-vars */

var SETTINGS = require('settings');
var STATE = require('unisys/client-state');
var Messager = require('unisys/client-messager-class');

/// CONSTANTS & DECLARATIONS //////////////////////////////////////////////////
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
var DBG = { send: false, return: false, register: false };
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
var BAD_OWNER = "must pass owner object of type React.Component or UniModule with optional 'name' parameter";
var BAD_NAME = 'name parameter must be a string';
var BAD_UID = 'unexpected non-unique UID';
var NO_DATAOBJ = 'syntax error: missing data object';
var BAD_EJSPROPS = 'EJS props (window.NC_UNISYS) is undefined, so can not set datalink IP address';
var PR = 'UDATA:';

/// NODE MANAGEMENT ///////////////////////////////////////////////////////////
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
var UNODE = new Map(); // unisys connector node map (local)
var UNODE_COUNTER = 100; // unisys connector node id counter

/// GLOBAL MESSAGES ///////////////////////////////////////////////////////////
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
var MESSAGER = new Messager();

/// UNISYS NODE CLASS /////////////////////////////////////////////////////////
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/** Instances of this class can register/unregister message handlers and also
    send messages. Constructor receives an owner, which is inspected for
    properties to determine how to classify the created messager for debugging
    purposes
 */

var UnisysDataLink = function () {
  /** CONSTRUCTOR
      A messager creates a unique ID within the webapp instance. Since
      messagers are "owned" by an object, we want the ID to reflect
      the owner's identity too while also allowing multiple instances per
      owner.
   */
  function UnisysDataLink(owner, optName) {
    _classCallCheck(this, UnisysDataLink);

    var msgr_type = '?TYPE';
    var msgr_name = '?NAME';

    if (optName !== undefined && typeof optName !== 'string') {
      throw Error(BAD_NAME);
    }

    // require an owner that is an object of some kind
    if ((typeof owner === 'undefined' ? 'undefined' : _typeof(owner)) !== 'object') throw Error(BAD_OWNER);

    // react components or regular objects
    if (owner.name) {
      msgr_type = 'MOD';
      msgr_name = owner.name || optName;
    } else if (owner.constructor.name) {
      msgr_type = 'RCT';
      msgr_name = owner.constructor.name;
    } else {
      throw Error(BAD_OWNER);
    }

    // generate and save unique id
    this.uid = msgr_type + '_' + UNODE_COUNTER++;
    this.name = msgr_name;
    if (UNODE.has(this.uid)) throw Error(BAD_UID + this.uid);

    // save module in the global module list
    UNODE.set(this.uid, this);
  }

  /// UNIQUE UNISYS ID for local application
  /// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  /// this is used to differentiate sources of events so they don't echo


  _createClass(UnisysDataLink, [{
    key: 'UID',
    value: function UID() {
      return this.uid;
    }
  }, {
    key: 'Name',
    value: function Name() {
      return this.name;
    }

    /// GLOBAL STATE ACCESS
    /// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    /// global STATE module calls are wrapped by unisys node so the unique
    /// UnisysID address can be appended

  }, {
    key: 'AppState',
    value: function AppState(namespace) {
      return STATE.State(namespace);
    }
  }, {
    key: 'SetAppState',
    value: function SetAppState(namespace, newState) {
      // uid is "source uid" designating who is making the change
      STATE.SetState(namespace, newState, this.UID());
    }
  }, {
    key: 'MergeAppState',
    value: function MergeAppState(namespace, newState) {
      // uid is "source uid" designating who is making the change
      STATE.MergeState(namespace, newState, this.UID());
    }
  }, {
    key: 'ConcatAppState',
    value: function ConcatAppState(namespace, newState) {
      // uid is "source uid" designating who is making the change
      STATE.ConcatState(namespace, newState, this.UID());
    }
    // uid is "source uid" of subscribing object, to avoid reflection
    // if the subscribing object is also the originating state changer

  }, {
    key: 'OnAppStateChange',
    value: function OnAppStateChange(namespace, listener) {
      STATE.OnStateChange(namespace, listener, this.UID());
    }
  }, {
    key: 'AppStateChangeOff',
    value: function AppStateChangeOff(namespace, listener) {
      STATE.OffStateChange(namespace, listener);
    }

    /// MESSAGES ////////////////////////////////////////////////////////////////
    /// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    /// mesgName is a string, and is an official event that's defined by the
    /// subclasser of UnisysNode

  }, {
    key: 'HandleMessage',
    value: function HandleMessage(mesgName, listener) {
      // uid is "source uid" of subscribing object, to avoid reflection
      // if the subscribing object is also the originating state changer
      if (DBG.register) console.log(this.uid + '_' + PR, this.name + ' handler added [' + mesgName + ']');
      MESSAGER.HandleMessage(mesgName, listener, { receiverUID: this.UID() });
    }
    /// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  }, {
    key: 'UnhandleMessage',
    value: function UnhandleMessage(mesgName, listener) {
      if (DBG.register) console.log(this.uid + '_' + PR, this.name + ' handler removed [' + mesgName + ']');
      MESSAGER.UnhandleMessage(mesgName, listener);
    }
    /// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    /** UDATA wraps Messager.Call(), which returns an array of promises.
        The UDATA version of Call() manages the promises, and returns a
     */

  }, {
    key: 'Call',
    value: function () {
      var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(mesgName) {
        var inData = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
        var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
        var status, promises, resArray, resObj;
        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                options = Object.assign(options, { type: 'mcall' });
                if (DBG.send) {
                  status = '';

                  if (!options.toNet) status += 'NO_NET ';
                  if (!options.toLocal) status += 'NO_LOCAL';
                  if (!(options.toLocal || options.toNet)) status = 'ERR NO LOCAL OR NET';
                  console.log(this.uid + '_' + PR, '** DATALINK CALL ASYNC', mesgName, status);
                }
                // uid is "source uid" of subscribing object, to avoid reflection
                // if the subscribing object is also the originating state changer
                options.srcUID = this.UID();
                promises = MESSAGER.Call(mesgName, inData, options);
                /// MAGICAL ASYNC/AWAIT BLOCK ///////

                if (DBG.send) console.log(this.uid + '_' + PR, '** awaiting...', promises);
                _context.next = 7;
                return Promise.all(promises);

              case 7:
                resArray = _context.sent;

                if (DBG.send) console.log(this.uid + '_' + PR, '** promise fulfilled!', mesgName);
                /// END MAGICAL ASYNC/AWAIT BLOCK ///
                resObj = Object.assign.apply(Object, [{}].concat(_toConsumableArray(resArray)));

                if (DBG.return) console.log(this.uid + '_' + PR, '[' + mesgName + '] returned', JSON.stringify(resObj));
                return _context.abrupt('return', resObj);

              case 12:
              case 'end':
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function Call(_x3) {
        return _ref.apply(this, arguments);
      }

      return Call;
    }()
    /// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    /** Sends the data to all message implementors UNLESS it is originating from
        the same UDATA instance (avoid echoing back to self)
     */

  }, {
    key: 'Send',
    value: function Send(mesgName) {
      var inData = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

      if (DBG.send) console.log(this.uid + '_' + PR, '** DATALINK SEND', mesgName);
      options = Object.assign(options, { type: 'msend' });
      // uid is "source uid" of subscribing object, to avoid reflection
      // if the subscribing object is also the originating state changer
      options.srcUID = this.UID();
      // uid is "source uid" of subscribing object, to avoid reflection
      // if the subscribing object is also the originating state changer
      MESSAGER.Send(mesgName, inData, options);
    }
    /// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    /** Sends the data to all message implementors, irregardless of origin.
     */

  }, {
    key: 'Signal',
    value: function Signal(mesgName) {
      var inData = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

      options = Object.assign(options, { type: 'msig' });
      MESSAGER.Signal(mesgName, inData, options);
    }
    /// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    /** version of Call that forces local-only calls
     */

  }, {
    key: 'LocalCall',
    value: function LocalCall(mesgName, inData) {
      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

      options = Object.assign(options, { type: 'mcall' });
      options.toLocal = true;
      options.toNet = false;
      return this.Call(mesgName, inData, options);
    }
    /// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    /** version of Send that force local-only calls
     */

  }, {
    key: 'LocalSend',
    value: function LocalSend(mesgName, inData) {
      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

      options = Object.assign(options, { type: 'msend' });
      options.toLocal = true;
      options.toNet = false;
      this.Send(mesgName, inData, options);
    }
    /// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    /** version of Send that force local-only calls
     */

  }, {
    key: 'LocalSignal',
    value: function LocalSignal(mesgName, inData) {
      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

      options = Object.assign(options, { type: 'msig' });
      options.toLocal = true;
      options.toNet = false;
      this.Signal(mesgName, inData, options);
    }
    /// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    /** version of Call that forces network-only calls
     */

  }, {
    key: 'NetCall',
    value: function NetCall(mesgName, inData) {
      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

      options = Object.assign(options, { type: 'mcall' });
      options.toLocal = false;
      options.toNet = true;
      return this.Call(mesgName, inData, options);
    }
    /// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    /** version of Send that force network-only calls
     */

  }, {
    key: 'NetSend',
    value: function NetSend(mesgName, inData) {
      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

      options = Object.assign(options, { type: 'msend' });
      options.toLocal = false;
      options.toNet = true;
      this.Send(mesgName, inData, options);
    }
    /// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    /** version of Signal that forces network-only signal
     */

  }, {
    key: 'NetSignal',
    value: function NetSignal(mesgName, inData) {
      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

      options.toLocal = false;
      options.toNet = true;
      this.Signal(mesgName, inData, options);
    }
    /// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  }, {
    key: 'NullCallback',
    value: function NullCallback() {
      if (DBG.send) console.log(this.uid + '_' + PR, 'null_callback', this.UID());
    }
  }]);

  return UnisysDataLink;
}(); // class UnisysNode

/// STATIC CLASS METHODS //////////////////////////////////////////////////////
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/** There's a single MESSAGER object that handles all registered messages for
    UNISYS.
 */


UnisysDataLink.MessageNames = function () {
  return MESSAGER.MessageNames();
};
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/** Filter any bad messages from the passed array of strings
 */
UnisysDataLink.ValidateMessageNames = function () {
  var msgs = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];

  var valid = [];
  msgs.forEach(function (name) {
    if (MESSAGER.HasMessageName(name)) valid.push(name);else throw new Error('ValidateMessageNames() found invalid message \'' + name + '\'');
  });
  return valid;
};

/// EXPORT CLASS DEFINITION ///////////////////////////////////////////////////
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
module.exports = UnisysDataLink;
});

require.register("unisys/client-lifecycle.js", function(exports, require, module) {
'use strict';

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

if (window.NC_DBG) console.log('inc ' + module.id);
/*//////////////////////////////// ABOUT \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\*\

  LifeCycle - A system manager for application lifecycle events.

\*\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ * //////////////////////////////////////*/

/* added for pull request #81 so 'npm run lint' test appears clean */
/* eslint-disable no-unused-vars */

var PATH = require('system/util/path');

/// CONSTANTS & DECLARATIONS //////////////////////////////////////////////////
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
var DBG = window.NC_DBG && window.NC_DBG.lifecycle;
var BAD_PATH = "module_path must be a string derived from the module's module.id";
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
var PHASE_HOOKS = new Map(); // functions that might right a Promise
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
var PHASES = ['TEST_CONF', // setup tests
'INITIALIZE', // module data structure init
'LOADASSETS', // load any external data, make connections
'CONFIGURE', // configure runtime data structures
'DOM_READY', // when viewsystem has completely composed
'RESET', // reset runtime data structures
'START', // start normal execution run
'APP_READY', // synchronize to UNISYS network server
'RUN', // system starts running
'UPDATE', // system is running (periodic call w/ time)
'PREPAUSE', // system wants to pause run
'PAUSE', // system has paused (periodic call w/ time)
'POSTPAUSE', // system wants to resume running
'STOP', // system wants to stop current run
'DISCONNECT', // unisys server has gone offline
'RECONNECT', // unisys server has reconnected
'UNLOADASSETS', // system releases any connections
'SHUTDOWN' // system wants to shut down
];
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
var PHASE = PHASES[0] + '_PENDING'; // current phase

/// MODULE DEFINITION /////////////////////////////////////////////////////////
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
var MOD = {
  name: 'LifeCycle',
  scope: 'system/booting' // overwritten by UNISYS.SystemInitialize()
};
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/** UTILITY: compare the destination scope with the acceptable scope (the
    module.id of the root JSX component in a view). Any module not in the
    system directory will not get called
 */
function m_ExecuteScopedPhase(phase, o) {
  // check for special unisys or system directory
  if (o.scope.indexOf('system') === 0) return o.f();
  if (o.scope.indexOf('unisys') === 0) return o.f();
  // check for subdirectory
  if (o.scope.includes(MOD.scope, 0)) return o.f();
  // else do nothing
  if (DBG) console.info('LIFECYCLE: skipping [' + phase + '] for ' + o.scope + ' because scope is ' + MOD.scope);
  return undefined;
}

/// STATUS REPORTING //////////////////////////////////////////////////////////
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
MOD.CurrentPhase = function () {
  return PHASE;
};

/// LIFECYCLE METHODS /////////////////////////////////////////////////////////
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/** API: register a Phase Handler which is invoked by MOD.Execute()
    phase is a string constant from PHASES array above
    f is a function that does work immediately, or returns a Promise
 */
MOD.Hook = function (phase, f, scope) {
  // make sure scope is included
  if (typeof scope !== 'string') throw Error('<arg3> scope is required (set to module.id)');
  // does this phase exist?
  if (typeof phase !== 'string') throw Error("<arg1> must be PHASENAME (e.g. 'LOADASSETS')");
  if (!PHASES.includes(phase)) throw Error(phase, 'is not a recognized lifecycle phase');
  // did we also get a promise?
  if (!(f instanceof Function)) throw Error('<arg2> must be a function optionally returning Promise');

  // get the list of promises associated with this phase
  // and add the new promise
  if (!PHASE_HOOKS.has(phase)) PHASE_HOOKS.set(phase, []);
  PHASE_HOOKS.get(phase).push({ f: f, scope: scope });
  if (DBG) console.log('[' + phase + '] added handler');
};

/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/** API: Execute all Promises associated with a phase, completing when
    all the callback functions complete. If the callback function returns
    a Promise, this is added to a list of Promises to wait for before the
    function returns control to the calling code.
 */
MOD.Execute = function () {
  var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(phase) {
    var hooks, icount, promises;
    return regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            if (!(MOD.scope === false)) {
              _context.next = 2;
              break;
            }

            throw Error('UNISYS.SetScope() must be set to RootJSX View\'s module.id. Aborting.');

          case 2:
            if (PHASES.includes(phase)) {
              _context.next = 4;
              break;
            }

            throw Error(phase + ' is not a recognized lifecycle phase');

          case 4:
            hooks = PHASE_HOOKS.get(phase);

            if (!(hooks === undefined)) {
              _context.next = 8;
              break;
            }

            if (DBG) console.log('[' + phase + '] no subscribers');
            return _context.abrupt('return');

          case 8:

            // phase housekeeping
            PHASE = phase + '_PENDING';

            // now execute handlers and promises
            icount = 0;

            if (DBG) console.group(phase);
            // get an array of promises
            // o contains f, scope pushed in Hook() above
            promises = hooks.map(function (o) {
              var retval = m_ExecuteScopedPhase(phase, o);
              if (retval instanceof Promise) {
                icount++;
                return retval;
              }
              // return undefined to signal no special handling
              return undefined;
            });

            promises = promises.filter(function (e) {
              return e !== undefined;
            });
            if (DBG && hooks.length) console.log('[' + phase + '] HANDLERS PROCESSED : ' + hooks.length);
            if (DBG && icount) console.log('[' + phase + '] PROMISES QUEUED    : ' + icount);

            // wait for all promises to execute
            _context.next = 17;
            return Promise.all(promises).then(function (values) {
              if (DBG && values.length) console.log('[' + phase + '] PROMISES RETURNED  : ' + values.length, values);
              if (DBG) console.groupEnd();
              return values;
            }).catch(function (err) {
              if (DBG) console.log('[' + phase + ' EXECUTE ERROR ' + err);
              throw Error('[' + phase + ' EXECUTE ERROR ' + err);
            });

          case 17:

            // phase housekeeping
            PHASE = phase;

          case 18:
          case 'end':
            return _context.stop();
        }
      }
    }, _callee, undefined);
  }));

  return function (_x) {
    return _ref.apply(this, arguments);
  };
}();

/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/** API: The scope is used to filter lifecycle events within a particular
    application path, which are defined under the view directory.
 */
MOD.SetScope = function (module_path) {
  if (typeof module_path !== 'string') throw Error(BAD_PATH);
  if (DBG) console.log('setting lifecycle scope to ' + module_path);
  // strip out filename, if one exists
  MOD.scope = PATH.Dirname(module_path);
};
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/** API: The scope
 */
MOD.Scope = function () {
  return MOD.scope;
};

/// STATIC METHODS ////////////////////////////////////////////////////////////
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/// ...

/// EXPORT MODULE DEFINITION //////////////////////////////////////////////////
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
module.exports = MOD;
});

require.register("unisys/client-messager-class.js", function(exports, require, module) {
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

if (window.NC_DBG) console.log('inc ' + module.id);
/*//////////////////////////////// ABOUT \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\*\

  Messager - Handle a collection of named events and their handlers
  https://en.wikipedia.org/wiki/Event-driven_architecture#JavaScript

  NOTE: This class is often WRAPPED by other UNISYS modules that manage
  a unique ID (such as the unique unisys datalink id) that hide that
  implementation detail from local users (e.g. unisys-data-class)

  HandleMessasge('MESG_NAME',handlerFunc,options)
    Add a handlerFunc. Specify options.handlerUID to enable echo rejection
    (same udata module will not invoke own handler when sending same message)
  UnhandleMessage('MESG_NAME',handlerFunc)
    Remove a handlerFunc associated with the handlerFuncFunction
  Send('MESG_NAME',data,options)
    Trigger an message+data to all handlers from a particular UDATA id
    If options.srcUID is specified, echo suppression is enabled
  Signal('MESG_NAME',data)
    Similar to Send(), but will ALWAYS broadcast to all implementors
  Call('MESG_NAME',data,options)
    Similar to Send(), but can return a value to a callback function
    options.srcUID is the UDATA id; set for echo supression to that uid
    options.dataReturnFunc is the callback function.

  NOTE: CallerReturnFunctions receive data object AND control object.
  The control object has the "return" function that closes a transaction;
  this is useful for async operations without Promises.

  NOTE: HandlerFunctions and CallerReturnFunctions are anotated with the
  udata_id property, which can be set to avoid echoing a message back to
  the same originating udata source.

  NOTE: When providing a handlerFunc, you might want to bind it to a
  specific object context (i.e. 'this') value using bind().
  e.g. handlerFunction = handlerFunction.bind(this);

\*\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ * //////////////////////////////////////*/

/* added for pull request #81 so 'npm run lint' test appears clean */
/* eslint-disable no-unused-vars */

var TEST = require('test');
var NetMessage = require('unisys/common-netmessage-class');

/// MODULE VARS ///////////////////////////////////////////////////////////////
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
var MSGR_IDCOUNT = 0;
var DBG = false;

/// UNISYS MESSAGER CLASS /////////////////////////////////////////////////////
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

var Messager = function () {
  /** Instances of this class can be used to implement a UNISYS-style message
    passing scheme with shared semantics. It maintains a Map keyed by mesgName
    strings, containing a Set object filled with handlers for that mesgName.
  */
  function Messager() {
    _classCallCheck(this, Messager);

    this.handlerMap = new Map(); // message map storing sets of functions
    this.messager_id = ++MSGR_IDCOUNT;
  }

  /// FIRE ONCE EVENTS //////////////////////////////////////////////////////////
  /// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  /** API: subscribe a handlerFunc function with a particular unisys id
    to receive a particular message. The handlerFunc receives a data obj
    and should return one as well. If there is an error, return a string.
  */


  _createClass(Messager, [{
    key: 'HandleMessage',
    value: function HandleMessage(mesgName, handlerFunc) {
      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
      var handlerUID = options.handlerUID;
      var syntax = options.syntax;

      if (typeof handlerFunc !== 'function') {
        throw 'arg2 must be a function';
      }
      if (typeof handlerUID === 'string') {
        // bind the udata uid to the handlerFunc function for convenient access
        // by the message dispatcher
        handlerFunc.udata_id = handlerUID;
      }
      var handlers = this.handlerMap.get(mesgName);
      if (!handlers) {
        handlers = new Set();
        this.handlerMap.set(mesgName, handlers);
      }
      // syntax annotation
      if (syntax) handlerFunc.umesg = { syntax: syntax };
      // saved function to handler
      handlers.add(handlerFunc);
      return this;
    }
    /// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    /** API: unsubscribe a handlerFunc function from a particular event
     */

  }, {
    key: 'UnhandleMessage',
    value: function UnhandleMessage(mesgName, handlerFunc) {
      if (!arguments.length) {
        this.handlerMap.clear();
      } else if (arguments.length === 1) {
        this.handlerMap.delete(mesgName);
      } else {
        var handlers = this.handlerMap.get(mesgName);
        if (handlers) {
          handlers.delete(handlerFunc);
        }
      }
      return this;
    }
    /// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    /** API: trigger a message with the data object payload, sending to all handlers
      that implement that event. Includer sender's unisys id to prevent the sender
      to receiving its own message back if it happens to implement the message as
      well. dstScope is 'net' or 'local' to limit where to send, or 'all'
      for everyone on net or local
    */

  }, {
    key: 'Send',
    value: function Send(mesgName, inData) {
      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
      var srcUID = options.srcUID,
          type = options.type;
      var _options$toLocal = options.toLocal,
          toLocal = _options$toLocal === undefined ? true : _options$toLocal,
          _options$toNet = options.toNet,
          toNet = _options$toNet === undefined ? true : _options$toNet;

      var handlers = this.handlerMap.get(mesgName);
      /// toLocal
      if (handlers && toLocal) {
        var _iteratorNormalCompletion = true;
        var _didIteratorError = false;
        var _iteratorError = undefined;

        try {
          for (var _iterator = handlers[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
            var handlerFunc = _step.value;

            // handlerFunc signature: (data,dataReturn) => {}
            // handlerFunc has udata_id property to note originating UDATA object
            // skip "same origin" calls
            if (srcUID && handlerFunc.udata_id === srcUID) {
              if (DBG) console.warn('MessagerSend: [' + mesgName + '] skip call since origin = destination; use Broadcast() if intended');
              continue;
            }
            // trigger the handler (no return expected)
            handlerFunc(inData, {
              /*control functions go here*/
            });
          }
        } catch (err) {
          _didIteratorError = true;
          _iteratorError = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion && _iterator.return) {
              _iterator.return();
            }
          } finally {
            if (_didIteratorError) {
              throw _iteratorError;
            }
          }
        }
      } // end toLocal
      /// toNetwork
      if (toNet) {
        var pkt = new NetMessage(mesgName, inData, type);
        pkt.SocketSend();
      } // end toNetwork
    }
    /// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    /** API: wrapper for Send() used when you want every handlerFunc, including
      the sender, to receive the event even if it is the one who sent it.
    */

  }, {
    key: 'Signal',
    value: function Signal(mesgName, data) {
      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

      if (options.srcUID) {
        console.warn('overriding srcUID ' + options.srcUID + ' with NULL because Signal() doesn\'t use it');
        options.srcUID = null;
      }
      this.Send(mesgName, data, options);
    }
    /// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    /** API: Return an array of Promises. Called by UDATA.Call().
     */

  }, {
    key: 'Call',
    value: function Call(mesgName, inData) {
      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
      var srcUID = options.srcUID,
          type = options.type;
      var _options$toLocal2 = options.toLocal,
          toLocal = _options$toLocal2 === undefined ? true : _options$toLocal2,
          _options$toNet2 = options.toNet,
          toNet = _options$toNet2 === undefined ? true : _options$toNet2;

      var handlers = this.handlerMap.get(mesgName);
      var promises = [];
      /// toLocal
      if (handlers && toLocal) {
        var _iteratorNormalCompletion2 = true;
        var _didIteratorError2 = false;
        var _iteratorError2 = undefined;

        try {
          for (var _iterator2 = handlers[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
            var handlerFunc = _step2.value;

            // handlerFunc signature: (data,dataReturn) => {}
            // handlerFunc has udata_id property to note originating UDATA object
            // skip "same origin" calls
            if (srcUID && handlerFunc.udata_id === srcUID) {
              if (DBG) console.warn('MessagerCall: [' + mesgName + '] skip call since origin = destination; use Broadcast() if intended');
              continue;
            }
            // Create a promise. if handlerFunc returns a promise, it follows
            var p = f_MakeResolverFunction(handlerFunc, inData);
            promises.push(p);
          } // end toLocal
        } catch (err) {
          _didIteratorError2 = true;
          _iteratorError2 = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion2 && _iterator2.return) {
              _iterator2.return();
            }
          } finally {
            if (_didIteratorError2) {
              throw _iteratorError2;
            }
          }
        }
      }
      /// resolver function
      /// remember MESSAGER class is used for more than just Network Calls
      /// the state manager also uses it, so the resolved value may be of any type
      function f_MakeResolverFunction(handlerFunc) {
        return new Promise(function (resolve, reject) {
          var retval = handlerFunc(inData, {
            /*control functions go here*/
          });
          resolve(retval);
        });
      }
      /// toNetwork
      if (toNet) {
        type = type || 'mcall';
        var pkt = new NetMessage(mesgName, inData, type);
        var _p = pkt.QueueTransaction();
        promises.push(_p);
      } // end toNetwork

      /// return all queued promises
      return promises;
    }

    /// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    /** API: Return a list of messages handled by this Messager instance
     */

  }, {
    key: 'MessageNames',
    value: function MessageNames() {
      var handlers = [];
      this.handlerMap.forEach(function (value, key) {
        handlers.push(key);
        if (DBG) console.log('handler: ' + key);
      });
      return handlers;
    }
    /// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    /** API: Verify that message exists
     */

  }, {
    key: 'HasMessageName',
    value: function HasMessageName() {
      var msg = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';

      return this.handlerMap.has(msg);
    }
  }]);

  return Messager;
}(); // class Messager

/// EXPORT CLASS DEFINITION ///////////////////////////////////////////////////
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -


module.exports = Messager;
});

require.register("unisys/client-module-class.js", function(exports, require, module) {
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

if (window.NC_DBG) console.log('inc ' + module.id);
/*//////////////////////////////// ABOUT \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\*\

    UNISYS MODULE SHELL

    A simple shell with a unique id and unique name. Currently this is just
    a utility class for maintaining naming convention for modules, and
    serves as the interface for module management within the UNISYS universe

\*\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ * //////////////////////////////////////*/

var LIFECYCLE = require('unisys/client-lifecycle');
var PATH = require('system/util/path');

/// CONSTANTS & DECLARATIONS //////////////////////////////////////////////////
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
var BAD_NAME = 'name parameter must be a string or unisys module';
var NOT_UNIQUE = 'name must be unique';

/// MODULE DECLARATIONS ///////////////////////////////////////////////////////
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
var MODULES = new Map(); // unisys modules map
var MODULES_COUNTER = 1; // unisys modules counter

/// UNISYS MODULE CLASS ///////////////////////////////////////////////////////
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/** Instances of this class are used to participate in the UNISYS lifecycle.
    Constructor receives the value of module.id, which is used to help scope
    what lifecycle hooks are distributed to which module
 */

var UnisysModule = function () {
  /// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  /** initializer is the value module.id or another instance of UnisysModule,
      which is used to create a derivative name of form 'initializer name:0'
   */
  function UnisysModule(module) {
    _classCallCheck(this, UnisysModule);

    if (module === undefined) throw Error(BAD_NAME);
    // can pass another unisys modules to create derived name
    if (module instanceof UnisysModule) {
      this.module_id = module.AutoName();
    } else if (typeof module === 'string') {
      // otherwise, copy the initializer
      this.module_id = module;
    }
    if (MODULES.has(this.name)) throw Error(NOT_UNIQUE);

    // save unique information
    this.uid = 'UMOD_' + MODULES_COUNTER++;

    // save derivative subname counter
    this.subnameCounter = 0;

    // save module in the global module list
    MODULES.set(this.module_id, this);
  }

  /// PROPERTIES //////////////////////////////////////////////////////////////
  /// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  /** this is used for identifying the module. It must be unique across all
   */


  _createClass(UnisysModule, [{
    key: 'ModuleID',
    value: function ModuleID() {
      return this.module_id;
    }
    /** utility method to return a short name
     */

  }, {
    key: 'ModuleName',
    value: function ModuleName() {
      return PATH.Basename(this.module_id);
    }

    /// UTILITIES ///////////////////////////////////////////////////////////////
    /// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    /** used to create a derivative name
     */

  }, {
    key: 'AutoName',
    value: function AutoName() {
      return this.module_id + ':' + this.subnameCounter++;
    }
    /** check if the name already exists in the MODULES collection
     */

  }, {
    key: 'HasModule',
    value: function HasModule(name) {
      return MODULES.has(name);
    }

    /// LIFECYCLE /////////////////////////////////////////////////////////////////
    /// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    /** wrap Hook function to include the ModuleID
     */

  }, {
    key: 'Hook',
    value: function Hook(phase, f) {
      LIFECYCLE.Hook(phase, f, this.ModuleID());
    }
  }]);

  return UnisysModule;
}(); // end UnisysModule

/// EXPORT CLASS DEFINITION ///////////////////////////////////////////////////
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -


module.exports = UnisysModule;
});

require.register("unisys/client-network.js", function(exports, require, module) {
'use strict';

if (window.NC_DBG) console.log('inc ' + module.id);
/*//////////////////////////////// ABOUT \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\*\

  UNISYS NETWORK implements network controls and synchronization.
  It initializes a network connection on the CONNECT lifecycle.

\*\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ * //////////////////////////////////////*/

/* added for pull request #81 so 'npm run lint' test appears clean */
/* eslint-disable no-unused-vars */

var SETTINGS = require('settings');
var NetMessage = require('unisys/common-netmessage-class');
var DEFS = require('./common-defs');
var PROMPTS = require('system/util/prompts');

/// CONSTANTS & DECLARATIONS //////////////////////////////////////////////////
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
var DBG = { connect: true, handle: false };
var PR = PROMPTS.Pad('NETWORK');
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
var WARN = PROMPTS.Pad('!!!');
var ERR_NM_REQ = 'arg1 must be NetMessage instance';
var ERR_NO_SOCKET = 'Network socket has not been established yet';
var ERR_BAD_UDATA = "An instance of 'client-datalink-class' is required";

/// GLOBAL NETWORK INFO (INJECTED ON INDEX) ///////////////////////////////////
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
var NETSOCK = SETTINGS.EJSProp('socket');
var NETCLIENT = SETTINGS.EJSProp('client');
var NETSERVER = SETTINGS.EJSProp('server');

/// NETWORK ID VALUES /////////////////////////////////////////////////////////
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
var M0_INIT = 0;
var M1_CONNECTING = 1;
var M2_CONNECTED = 2;
var M3_REGISTERED = 3;
var M4_READY = 4;
var M_STANDALONE = 5;
var M_NOCONNECT = 6;
var m_status = M0_INIT;
var m_options = {};

// heartbeat
var m_hearbeat_timer;

/// API METHODS ///////////////////////////////////////////////////////////////
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
var NETWORK = {};
var UDATA = null; // assigned during NETWORK.Connect()

/// CONNECT ///////////////////////////////////////////////////////////////////
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/** Establish connection to UNISYS server. This is called by client.js during
    NetworkInitialize(), which itself fires after the application has rendered
    completely.
 */
NETWORK.Connect = function (datalink, opt) {
  // special case: STANDALONE mode is set by a different set of magical
  // window.NC_UNISYS properties
  if (window.NC_UNISYS.server.ip === 'standalone') {
    m_status = M_STANDALONE;
    console.warn(PR, 'STANDALONE MODE: NETWORK.Connect() suppressed!');
    NetMessage.GlobalOfflineMode();
    if (typeof opt.success === 'function') opt.success();
    return;
  }
  // if multiple network connections occur, emit warning
  // warning: don't modify this unless you have a deep knowledge of how
  // the webapp system works or you might break something
  if (m_status > 0) {
    var err = 'called twice...other views may be calling UNISYS outside of lifecycle';
    console.error(WARN, err);
    return;
  }
  m_status = M1_CONNECTING;

  // check and save parms
  if (datalink.constructor.name !== 'UnisysDataLink') {
    throw Error(ERR_BAD_UDATA);
  }
  if (!UDATA) UDATA = datalink;
  m_options = opt || {};

  // create websocket
  // uses values that were embedded in index.ejs on load
  var wsURI = 'ws://' + NETSOCK.uaddr + ':' + NETSOCK.uport;
  NETSOCK.ws = new WebSocket(wsURI);

  // create listeners
  NETWORK.AddListener('open', function (event) {
    if (DBG.connect) console.log(PR, 'connecting to', event.target.url);
    m_status = M2_CONNECTED;
    // message handling continues in 'message' handler
    // the first message is assumed to be registration data
  });
  NETWORK.AddListener('close', function (event) {
    if (DBG.connect) console.log(PR, 'closed', event.target.url);
    NetMessage.GlobalOfflineMode();
    m_status = M_STANDALONE;
  });
  // handle socket errors
  NETWORK.AddListener('error', function (event) {
    /** DSHACK: For Spring 2019, adding manifest support to try to
        avoid rewriting the app with service workers
     */
    var appCache = window.applicationCache;
    switch (appCache.status) {
      case appCache.UNCACHED:
        // this occurs if there is not a cached page
        console.warn(WARN, 'ERROR opening command socket', event);
        throw Error('error with command socket');
      case appCache.IDLE: /* falls-through */
      case appCache.CHECKING: /* falls-through */
      case appCache.DOWNLOADING: /* falls-through */
      case appCache.UPDATEREADY: /* falls-through */
      case appCache.OBSOLETE:
        // this occurs
        console.info(WARN, 'STANDALONE MODE. USING CACHED DATA');
        m_status = M_STANDALONE;
        NetMessage.GlobalOfflineMode(); // deregister socket
        // force promise to succeed
        if (typeof m_options.success === 'function') m_options.success();
        break;
      default:
        m_status = M_NOCONNECT;
        throw Error('unknown appcache status. dumping', appCache);
    }
  });
  // handle incoming messages
  NETWORK.AddListener('message', m_HandleRegistrationMessage);
}; // Connect()
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/** After 'open' event, we expect the first message on the socket to contain
    network session-related messages
 */
function m_HandleRegistrationMessage(msgEvent) {
  var regData = JSON.parse(msgEvent.data);
  var HELLO = regData.HELLO,
      UADDR = regData.UADDR;
  // (1) after receiving the initial message, switch over to regular
  // message handler

  NETWORK.RemoveListener('message', m_HandleRegistrationMessage);
  m_status = M3_REGISTERED;
  // (2) initialize global settings for netmessage
  if (DBG.connect) console.log(PR + ' connected as %c' + UADDR, 'color:red');
  NETSOCK.ws.UADDR = NetMessage.DefaultServerUADDR();
  NetMessage.GlobalSetup({ uaddr: UADDR, netsocket: NETSOCK.ws });
  // (3) connect regular message handler
  NETWORK.AddListener('message', m_HandleMessage);
  m_status = M4_READY;
  // (4) network is initialized
  if (typeof m_options.success === 'function') m_options.success();
  // (5) initialize heartbeat timer
  m_ResetHearbeatTimer();
}
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/** When a heartbeat ping is received, respond with a pong to let the server
    know that we're still alive.
 */
function m_RespondToHeartbeat() {
  if (NETSOCK.ws.readyState === NETSOCK.ws.OPEN) {
    NETSOCK.ws.send('pong', function (err) {
      if (err) console.log(PR, 'error "', err, '" while sending response pong');
    });
  }
}
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/** If a 'hearbeat' message is not received from the server every 5 seconds
    we assume the network connection has gone down.  The timeout should be
    greater than the server heartbeat interval set in
    server-network.js:m_StartHeartbeat()

    The UNISYSDisconnect handler only goes down when the server closes the
    connection.  In order to detect the internet connection going down
    (e.g. wifi) we need to check to see if we are peridically receiving
    a heartbeat message from the server.
 */
function m_ResetHearbeatTimer() {
  clearTimeout(m_hearbeat_timer);
  m_hearbeat_timer = setTimeout(function heartbeatStopped() {
    if (DBG.handle) console.log(PR, 'ping heartbeat not received from server before time ran out -- YOURE DEAD!');
    NetMessage.GlobalOfflineMode({ message: 'Client Disconnected' });
  }, DEFS.SERVER_HEARTBEAT_INTERVAL * 2);
}
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
function m_HandleMessage(msgEvent) {
  // Check Hearbeat
  if (msgEvent.data === 'ping') {
    if (DBG.handle) console.log(PR, '...got hearbeat!  Reset timer');
    m_RespondToHeartbeat();
    m_ResetHearbeatTimer();
    return;
  }

  // Handle Regular Message
  var pkt = new NetMessage(msgEvent.data);
  var msg = pkt.Message();
  if (pkt.IsOwnResponse()) {
    if (DBG.handle) console.log(PR, 'completing transaction', msg);
    pkt.CompleteTransaction();
    return;
  }
  var data = pkt.Data();
  var type = pkt.Type();
  var dbgout = DBG.handle && !msg.startsWith('SRV_');
  /// otherwise, incoming invocation from network
  switch (type) {
    case 'state':
      if (dbgout) console.log(PR, 'received state change', msg);
      break;
    case 'msig':
      if (dbgout) {
        console.warn(PR, 'ME_' + NetMessage.SocketUADDR() + ' received msig \'' + msg + '\' from ' + pkt.SourceAddress(), data);
      }
      UDATA.LocalSignal(msg, data);
      pkt.ReturnTransaction();
      break;
    case 'msend':
      if (dbgout) {
        console.warn(PR, 'ME_' + NetMessage.SocketUADDR() + ' received msend \'' + msg + '\' from ' + pkt.SourceAddress(), data);
      }
      UDATA.LocalSend(msg, data);
      pkt.ReturnTransaction();
      break;
    case 'mcall':
      if (dbgout) {
        console.warn(PR, 'ME_' + NetMessage.SocketUADDR() + ' received mcall \'' + msg + '\' from ' + pkt.SourceAddress());
      }
      UDATA.LocalCall(msg, data).then(function (result) {
        if (dbgout) {
          console.log('ME_' + NetMessage.SocketUADDR() + ' forwarded \'' + msg + '\', returning ' + JSON.stringify(result));
        }
        // now return the packet
        pkt.SetData(result);
        pkt.ReturnTransaction();
      });
      break;
    default:
      throw Error('unknown packet type', type);
  }
}

/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/** Send a packet on socket connection, assuming it is valid
 */
NETWORK.Send = function (pkt) {
  if (!(pkt instanceof NetMessage)) throw Error(ERR_NM_REQ);
  if (NETSOCK.ws.readyState === 1) {
    var json = pkt.JSON();
    if (DBG) console.log('SENDING', pkt.Message(), pkt.Data(), pkt.SeqNum());
    NETSOCK.ws.send(json);
  } else {
    console.log('Socket not ReadyState 1, is', NETSOCK.ws.readyState);
  }
};
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/** Send a packet on socket connection, return Promise
 */
NETWORK.Call = function (pkt) {
  if (!(pkt instanceof NetMessage)) throw Error(ERR_NM_REQ);
  if (NETSOCK.ws.readyState === 1) {
    var json = pkt.JSON();
    if (DBG) console.log('CALLING', pkt.Message(), json);
    NETSOCK.ws.send(json);
  } else {
    console.log('Socket not ReadyState 1, is', NETSOCK.ws.readyState);
  }
};
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/** Force close of connection, for example if UNISYS.AppReady() fails
 */
NETWORK.Close = function (code, reason) {
  code = code || 1000;
  reason = reason || 'unisys forced close';
  NETSOCK.ws.close(code, reason);
};
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
NETWORK.AddListener = function (event, handlerFunction) {
  if (NETSOCK.ws instanceof WebSocket) {
    NETSOCK.ws.addEventListener(event, handlerFunction);
  } else {
    throw Error(ERR_NO_SOCKET);
  }
};
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
NETWORK.RemoveListener = function (event, handlerFunction) {
  if (NETSOCK.ws instanceof WebSocket) {
    NETSOCK.ws.removeEventListener(event, handlerFunction);
  } else {
    throw Error(ERR_NO_SOCKET);
  }
};
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
NETWORK.LocalInfo = function () {
  return NETCLIENT;
};
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
NETWORK.ServerInfo = function () {
  return NETSERVER;
};
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
NETWORK.ServerSocketInfo = function () {
  return NETSOCK;
};
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
NETWORK.SocketUADDR = function () {
  return NetMessage.SocketUADDR();
};
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
NETWORK.IsStandaloneMode = function () {
  return m_status === M_STANDALONE;
};

/// EXPORT MODULE DEFINITION //////////////////////////////////////////////////
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
module.exports = NETWORK;
});

require.register("unisys/client-react-component.jsx", function(exports, require, module) {
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/* eslint-disable no-debugger */
/* eslint-disable no-alert */
if (window.NC_DBG) console.log('inc ' + module.id);
/*//////////////////////////////// ABOUT \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\*\

  Add UNISYS functions to REACT component to hide UDATA and UMODULE details
  To use, extend components from UNISYS.Component instead of REACT.Component

\*\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ * //////////////////////////////////////*/

var React = require('react');
var UDATA = require('unisys/client-datalink-class');
var UMODULE = require('unisys/client-module-class');
var REFLECT = require('system/util/reflection');

/// CLASS DECLARATION /////////////////////////////////////////////////////////
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

var UnisysComponent = function (_React$Component) {
  _inherits(UnisysComponent, _React$Component);

  function UnisysComponent() {
    _classCallCheck(this, UnisysComponent);

    var _this = _possibleConstructorReturn(this, (UnisysComponent.__proto__ || Object.getPrototypeOf(UnisysComponent)).call(this));

    _this.UMODULE = new UMODULE(module.id);
    _this.UDATA = new UDATA(_this.UMODULE);
    return _this;
  }

  /// MESSAGE HANDLING API METHODS


  _createClass(UnisysComponent, [{
    key: 'HandleMessage',
    value: function HandleMessage(m, lis) {
      this.UDATA.HandleMessage(m, lis);
    }
  }, {
    key: 'UnhandleMessage',
    value: function UnhandleMessage(m, lis) {
      f_deprecated('DropMessage');
      this.UDATA.UnhandleMessage(m, lis);
    }
  }, {
    key: 'DropMessage',
    value: function DropMessage(m, lis) {
      this.UDATA.UnhandleMessage(m, lis);
    }

    /// SPECIAL EVENTS

  }, {
    key: 'OnDOMReady',
    value: function OnDOMReady(lis) {
      this.UMODULE.Hook('DOM_READY', lis);
    }
  }, {
    key: 'OnReset',
    value: function OnReset(lis) {
      this.UMODULE.Hook('RESET', lis);
    }
  }, {
    key: 'OnStart',
    value: function OnStart(lis) {
      this.UMODULE.Hook('START', lis);
    }
  }, {
    key: 'OnAppReady',
    value: function OnAppReady(lis) {
      this.UMODULE.Hook('APP_READY', lis);
    }
  }, {
    key: 'OnRun',
    value: function OnRun(lis) {
      this.UMODULE.Hook('RUN', lis);
    }
  }, {
    key: 'OnDisconnect',
    value: function OnDisconnect(lis) {
      this.UMODULE.Hook('DISCONNECT', lis);
    }

    /// MESSAGE INVOCATION API METHODS

  }, {
    key: 'Call',
    value: function Call(m, d, o) {
      return this.UDATA.Call(m, d, o);
    }
  }, {
    key: 'Send',
    value: function Send(m, d, o) {
      this.UDATA.Send(m, d, o);
    }
  }, {
    key: 'Signal',
    value: function Signal(m, d, o) {
      this.UDATA.Signal(m, d, o);
    }
  }, {
    key: 'AppCall',
    value: function AppCall(m, d, o) {
      return this.UDATA.LocalCall(m, d, o);
    }
  }, {
    key: 'AppSend',
    value: function AppSend(m, d, o) {
      this.UDATA.LocalSend(m, d, o);
    }
  }, {
    key: 'AppSignal',
    value: function AppSignal(m, d, o) {
      this.UDATA.LocalSignal(m, d, o);
    }
  }, {
    key: 'NetSend',
    value: function NetSend(m, d, o) {
      this.UDATA.NetSend(m, d, o);
    }
  }, {
    key: 'NetCall',
    value: function NetCall(m, d, o) {
      return this.UDATA.NetCall(m, d, o);
    }
  }, {
    key: 'NetSignal',
    value: function NetSignal(m, d, o) {
      this.UDATA.NetSignal(m, d, o);
    }
  }, {
    key: 'LocalCall',
    value: function LocalCall(m, d, o) {
      f_deprecated('AppCall');
      return this.UDATA.LocalCall(m, d, o);
    }
  }, {
    key: 'LocalSend',
    value: function LocalSend(m, d, o) {
      f_deprecated('AppSend');
      this.UDATA.LocalSend(m, d, o);
    }
  }, {
    key: 'LocalSignal',
    value: function LocalSignal(m, d, o) {
      f_deprecated('AppSignal');
      this.UDATA.LocalSignal(m, d, o);
    }
    /// STATE API METHODS

  }, {
    key: 'State',
    value: function State(ns) {
      f_deprecated('AppState');
      return this.AppState(ns);
    }
  }, {
    key: 'SetState',
    value: function SetState(ns, so) {
      f_deprecated('SetAppState');
      this.SetAppState(ns, so);
    }
  }, {
    key: 'OnStateChange',
    value: function OnStateChange(ns, lis) {
      f_deprecated('OnAppStateChange');
      this.OnAppStateChange(ns, lis);
    }
  }, {
    key: 'OffStateChange',
    value: function OffStateChange(ns, lis) {
      f_deprecated('AppStateChangeOff');
      this.AppStateChangeOff(ns, lis);
    }
    /// NEW STATE API METHODS

  }, {
    key: 'AppState',
    value: function AppState(ns) {
      return this.UDATA.AppState(ns);
    }
  }, {
    key: 'SetAppState',
    value: function SetAppState(ns, so) {
      this.UDATA.SetAppState(ns, so);
    }
  }, {
    key: 'OnAppStateChange',
    value: function OnAppStateChange(ns, lis) {
      this.UDATA.OnAppStateChange(ns, lis);
    }
  }, {
    key: 'AppStateChangeOff',
    value: function AppStateChangeOff(ns, lis) {
      this.UDATA.AppStateChangeOff(ns, lis);
    }
  }, {
    key: 'NetState',
    value: function NetState(ns) {
      f_unimplemented();
    }
  }, {
    key: 'SetNetState',
    value: function SetNetState(ns, so) {
      f_unimplemented();
    }
  }, {
    key: 'OnNetStateChange',
    value: function OnNetStateChange(ns, lis) {
      f_unimplemented();
    }
  }, {
    key: 'NetStateChangeOff',
    value: function NetStateChangeOff(ns, lis) {
      f_unimplemented();
    }
    /// LIFECYCLE API

  }, {
    key: 'Hook',
    value: function Hook(p, f) {
      f_unsupported('is not available for UNISYS.Component');
    }
  }]);

  return UnisysComponent;
}(React.Component); // UnisysComponent

function f_deprecated(repl) {
  var out = REFLECT.FunctionName(2) + ' is deprecated.';
  if (typeof repl === 'string') out += ' Use ' + repl + '() instead.';
  console.warn(out);
}

function f_unimplemented() {
  var out = REFLECT.FunctionName(2) + ' is not yet implemented.';
  alert(out + '\n\nCrashing now! Use javascript console to debug');
  console.error(out);
  debugger;
}

function f_unsupported(reason) {
  var out = REFLECT.FunctionName(2) + ' ' + reason;
  alert(out + '\n\nCrashing now! Use javascript console to debug');
  console.error(out);
  debugger;
}

/// EXPORT REACT COMPONENT ////////////////////////////////////////////////////
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
module.exports = UnisysComponent;
});

require.register("unisys/client-state.js", function(exports, require, module) {
'use strict';

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

if (window.NC_DBG) console.log('inc ' + module.id);
/*//////////////////////////////// ABOUT \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\*\

  UNISYS STATE CLASS

\*\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ * //////////////////////////////////////*/

/* added for pull request #81 so 'npm run lint' test appears clean */
/* eslint-disable no-unused-vars */

var REACT = require('react');
var TYPEOF = require('type-detect');
var Messager = require('unisys/client-messager-class');

/// CONSTANTS & DECLARATIONS //////////////////////////////////////////////////
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
var DBG = false;
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
var BAD_NSPACE = 'namespace must be string without _ chars';
var BAD_LISTENR = 'listener must be function';
var NO_UID_FLTR = 'UNISYS.OnStateChange: pass DST_UID parameter to enable echo cancellation';
var WARN_PROP_MISMATCH = 'MergeState is changing a property type';

/// MODULE DECLARATIONS ///////////////////////////////////////////////////////
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
var USTATE = {};
var STATES = new Map(); // namespace str => shallow state object
var STATES_LISTEN = new Map(); // namespace str => emitter

/// STATE /////////////////////////////////////////////////////////////////////
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/** UNISYS namespaces are transformed to uppercase.
    A namespace must be a string that does not contain reserved char '_'
 */
function m_ConformNamespace(namespace) {
  // must be a string
  if (typeof namespace !== 'string') return undefined;
  // disallow empty string
  if (!namespace) return undefined;
  // always uppercase
  namespace = namespace.toUpperCase();
  // expand * shortcut to _ROOT
  if (namespace === '*') return '_ROOT';
  // disallow _ reserved names
  if (namespace.indexOf('_') > -1) return undefined;
  // ok we're good
  return namespace;
}
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/** Used for merging and concatenating state, when a simple copy-overwrite
    simply will not do.
 */
function m_ConformState(namespace, newState, opt) {
  opt = opt || { merge: true };
  // make a copy of the old state
  var state = Object.assign({}, STATES.get(namespace));
  if (DBG) console.log('merging state namespace \'' + namespace + '\' with', newState);

  // iterate over all properties in newState and merge them
  // accordingly. This is *NOT* a deep merge.
  Object.entries(newState).forEach(function (entry) {
    var k = entry[0]; // current prop name in newstate
    var v = entry[1]; // current prop value in newstate
    var prop = state[k],
        // old prop value
    nprop = v,
        // new prop value
    t_old = void 0,
        // type to be filled-in
    t_new = void 0;

    // use type-detect library to get type
    t_old = TYPEOF(prop);
    t_new = TYPEOF(nprop);

    // A BUNCH OF SPECIAL CASE CHECKS //
    if (t_old === 'undefined' || t_old === 'null') {
      // if the value doesn't exist in current state
      // just update with new prop
      prop = nprop;
    } else if (t_old === t_new) {
      // if there is a type match, then figure
      // out how to merge based on type
      switch (t_old) {
        case 'Object':
          if (DBG) console.log('merge objects');
          // merge object props
          prop = Object.assign(prop, nprop);
          break;
        case 'Array':
          // note uppercase (type-detect)
          if (DBG) console.log('merge arrays');
          // merge arrays no dupes (https://stackoverflow.com/a/36469404)
          // ES6 fanciness using destructuring (...) and Sets
          if (opt.merge) prop = [].concat(_toConsumableArray(new Set([].concat(_toConsumableArray(prop), _toConsumableArray(nprop)))));else if (opt.concat) prop = prop.concat(nprop);
          break;
        default:
          if (DBG) console.log('copy values');
          // just overwrite otherwise
          prop = nprop;
      } // end switch t_old
    } else {
      // if there is a type mismatch, write
      console.warn(WARN_PROP_MISMATCH + ' key:' + k + '\n type \'' + t_new + '\' overwriting \'' + t_old + '\'');
      prop = nprop;
    }
    // update state place
    state[k] = prop;
  }); // end Object.entries

  return state;
}
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/** Retrieve the emitter associated with a namespace, which contains handles
    all the listeners associated with a namespace. Always returns a valid
    emitter, creating it if the passed namespace is valid.
 */
function m_GetStateMessager(nspace) {
  nspace = m_ConformNamespace(nspace);
  if (!nspace) throw Error(BAD_NSPACE);
  var msgr = STATES_LISTEN.get(nspace);
  if (!msgr) {
    msgr = new Messager();
    STATES_LISTEN.set(nspace, msgr);
  }
  return msgr;
}
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/** API: update the selected namespace state with new state
 */
USTATE.SetState = function (namespace, newState, src_uid) {
  namespace = m_ConformNamespace(namespace);
  if (!namespace) throw Error(BAD_NSPACE);
  // update old state by partially overwrite of state
  if (!STATES.has(namespace)) STATES.set(namespace, {});
  // NOTE Because we're using Object.assign:
  // * Objects already in the state will remain in the state
  //   if not overwritten by newState.  This can result in
  //   the mysterious re-appearance of old paramters.
  // * No deep clones
  Object.assign(STATES.get(namespace), newState);
  // forward new state to namespace listeners
  var msgr = m_GetStateMessager(namespace);
  // don't pass with source_id because state should go everywhere
  // a register exists, even if it's the originating module
  msgr.Send(namespace, newState, { type: 'state', toLocal: true, toNet: false });
  // future: forward also to network
};
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/** API: merge objects and arrays in state
 */
USTATE.MergeState = function (namespace, newState, src_uid) {
  namespace = m_ConformNamespace(namespace);
  if (!namespace) throw Error(BAD_NSPACE);
  // update old state by partially overwrite of state
  if (!STATES.has(namespace)) STATES.set(namespace, {});

  // merge the states with no duplicates in arrays
  var state = m_ConformState(namespace, newState, { merge: true });

  // update the namespace
  STATES.set(namespace, state);

  // forward new state to namespace listeners
  var msgr = m_GetStateMessager(namespace);
  // don't pass with source_id because state should go everywhere
  // a register exists, even if it's the originating module
  msgr.Send(namespace, newState, { type: 'state', toLocal: true, toNet: false });
  // future: forward also to network
};
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/** API: merge objects and concat arrays in state
 */
USTATE.ConcatState = function (namespace, newState, src_uid) {
  namespace = m_ConformNamespace(namespace);
  if (!namespace) throw Error(BAD_NSPACE);
  // update old state by partially overwrite of state
  if (!STATES.has(namespace)) STATES.set(namespace, {});

  // merge the states with no duplicates in arrays
  var state = m_ConformState(namespace, newState, { concat: true });

  // update the namespace
  STATES.set(namespace, state);

  // forward new state to namespace listeners
  var msgr = m_GetStateMessager(namespace);
  // don't pass with source_id because state should go everywhere
  // a register exists, even if it's the originating module
  msgr.Send(namespace, newState, { type: 'state', toLocal: true, toNet: false });
  // future: forward also to network
};
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/** API: retrieve a COPY of state object of namespace
 */
USTATE.State = function (namespace) {
  namespace = m_ConformNamespace(namespace);
  if (!namespace) throw Error(BAD_NSPACE);
  return Object.assign({}, STATES.get(namespace));
};
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/** API: subscribe to namestate updates
 */
USTATE.OnStateChange = function (namespace, listener, src_uid) {
  namespace = m_ConformNamespace(namespace);
  if (!namespace) throw Error(BAD_NSPACE);
  if (typeof listener !== 'function') throw Error(BAD_LISTENR);
  if (src_uid === undefined) console.warn(NO_UID_FLTR);
  var namespaceMessager = m_GetStateMessager(namespace);
  namespaceMessager.HandleMessage(namespace, listener, { handlerUID: src_uid });
};
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/** API: unsubscribe to namestate updates
 */
USTATE.OffStateChange = function (namespace, listener) {
  namespace = m_ConformNamespace(namespace);
  if (!namespace) throw Error(BAD_NSPACE);
  if (typeof listener !== 'function') throw Error(BAD_LISTENR);
  var namespaceMessager = m_GetStateMessager(namespace);
  namespaceMessager.UnhandleMessage(namespace, listener);
};

/// EXPORT CLASS DEFINITION ///////////////////////////////////////////////////
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
module.exports = USTATE;
});

require.register("unisys/client.js", function(exports, require, module) {
'use strict';

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

/* eslint-disable no-debugger */
if (window.NC_DBG) console.log('inc ' + module.id);
/*//////////////////////////////// ABOUT \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\*\

  This is the main browser client UNISYS module, which implements:

    LIFECYCLE - a promise-based hooked run order system
    MESSAGING - a networked remote procedure call/event system
    STATE     - a networked global application state system

  UNISYS is designed to work with React or our own module system:
  for modules:
    UMOD = UNISYS.NewModule()
    UDATA = UNISYS.NewDataLink(UMOD)
  for React:
    COMPONENT = class MyComponent extends UNISYS.Component

\*\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ * //////////////////////////////////////*/

/* added for pull request #81 so 'npm run lint' test appears clean */
/* eslint-disable no-unused-vars */

/// CLASSES ///////////////////////////////////////////////////////////////////
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
var UniData = require('unisys/client-datalink-class');
var UniModule = require('unisys/client-module-class');
var UniComponent = require('unisys/client-react-component');

/// LIBRARIES /////////////////////////////////////////////////////////////////
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
var SETTINGS = require('settings');
var LIFECYCLE = require('unisys/client-lifecycle');
var STATE = require('unisys/client-state');
var NETWORK = require('unisys/client-network');
var PROMPTS = require('system/util/prompts');
var PR = PROMPTS.Pad('UNISYS');

/// INITIALIZE MAIN MODULE ////////////////////////////////////////////////////
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
var UNISYS = new UniModule(module.id);
var UDATA = new UniData(UNISYS);

/// UNISYS MODULE MAKING //////////////////////////////////////////////////////
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/** API: Make new module with UNISYS convenience methods */
UNISYS.NewModule = function (uniqueName) {
  return new UniModule(uniqueName);
};

/// UNISYS CONNECTOR //////////////////////////////////////////////////////////
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/** API: Make new module with UNISYS convenience methods */
UNISYS.NewDataLink = function (module, optName) {
  return new UniData(module, optName);
};

/// UNISYS MESSAGE REGISTRATION ///////////////////////////////////////////////
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
UNISYS.RegisterMessagesPromise = function () {
  var messages = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];

  if (NETWORK.IsStandaloneMode()) {
    console.warn(PR, 'STANDALONE MODE: RegisterMessagesPromise() suppressed!');
    return Promise.resolve();
  }
  if (messages.length) {
    try {
      messages = UniData.ValidateMessageNames(messages);
    } catch (e) {
      console.error(e);
    }
  } else {
    messages = UniData.MessageNames();
  }
  return new Promise(function (resolve, reject) {
    UDATA.Call('SRV_REG_HANDLERS', { messages: messages }).then(function (data) {
      resolve(data);
    });
  });
};

/// LIFECYCLE METHODS /////////////////////////////////////////////////////////
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/** API: LIFECYCLE Hook() functions */
UNISYS.Hook = function (phase, f) {
  if (typeof phase !== 'string') throw Error('arg1 is phase as string');
  if (typeof f !== 'function') throw Error('arg2 is function callback');
  LIFECYCLE.Hook(phase, f, UNISYS.ModuleID()); // pass phase and hook function
};
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/** API: return the current phase (useful for debugging internals) */
UNISYS.CurrentPhase = function () {
  return LIFECYCLE.CurrentPhase();
};
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/** API: System Initialize */
UNISYS.SystemInitialize = function (module_id) {
  UNISYS.SetScope(module_id);
  SETTINGS.ForceReloadSingleApp();
};
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/** API HELPER: LIFECYCLE Scope() functions
    The 'scope' is used by LIFECYCLE to determine what modules implementing
    various HOOKS will be called. The root_module_id is a path that will
    be considered the umbrella of "allowed to hook" modules. For REACT apps,
    this is the root directory of the root view component. Additionally,
    the unisys and system directories are allowed to run their hooks
 */
UNISYS.SetScope = function (root_module_id) {
  LIFECYCLE.SetScope(root_module_id); // pass phase and hook function
};
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/** API HELPER: SETTINGS ForceReloadSingleApp
    checks to see if settings flag is "dirty"; if it is, then reload the
    location to ensure no lingering apps are running in the background. Yes
    this is a bit of a hack.
 */
UNISYS.IsReloadRequired = function () {
  SETTINGS.IsReloadRequired();
};
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/** API HELPER: return TRUE if passed module.id is within the current set
    scope
 */
UNISYS.InScope = function (module_id) {
  var currentScope = LIFECYCLE.Scope();
  return module_id.includes(currentScope);
};
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/** API: application startup
 */
UNISYS.EnterApp = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
  return regeneratorRuntime.wrap(function _callee$(_context) {
    while (1) {
      switch (_context.prev = _context.next) {
        case 0:
          _context.prev = 0;
          _context.next = 3;
          return LIFECYCLE.Execute('TEST_CONF');

        case 3:
          _context.next = 5;
          return LIFECYCLE.Execute('INITIALIZE');

        case 5:
          _context.next = 7;
          return LIFECYCLE.Execute('LOADASSETS');

        case 7:
          _context.next = 9;
          return LIFECYCLE.Execute('CONFIGURE');

        case 9:
          _context.next = 15;
          break;

        case 11:
          _context.prev = 11;
          _context.t0 = _context['catch'](0);

          console.error('EnterApp() Lifecycle Error. Check phase execution order effect on data validity.\n', _context.t0);
          debugger;

        case 15:
        case 'end':
          return _context.stop();
      }
    }
  }, _callee, undefined, [[0, 11]]);
}));
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/** API: call this when the view system's DOM has stabilized and is ready
    for manipulation by other code
 */
UNISYS.SetupDOM = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {
  return regeneratorRuntime.wrap(function _callee2$(_context2) {
    while (1) {
      switch (_context2.prev = _context2.next) {
        case 0:
          _context2.prev = 0;
          _context2.next = 3;
          return LIFECYCLE.Execute('DOM_READY');

        case 3:
          _context2.next = 9;
          break;

        case 5:
          _context2.prev = 5;
          _context2.t0 = _context2['catch'](0);

          console.error('SetupDOM() Lifecycle Error. Check phase execution order effect on data validity.\n', _context2.t0);
          debugger;

        case 9:
        case 'end':
          return _context2.stop();
      }
    }
  }, _callee2, undefined, [[0, 5]]);
}));
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/** API: network startup
 */
UNISYS.JoinNet = function () {
  return new Promise(function (resolve, reject) {
    try {
      NETWORK.Connect(UDATA, { success: resolve, failure: reject });
    } catch (e) {
      console.error('EnterNet() Lifecycle Error. Check phase execution order effect on data validity.\n', e);
      debugger;
    }
  });
};
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/** API: configure system before run
 */
UNISYS.SetupRun = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3() {
  return regeneratorRuntime.wrap(function _callee3$(_context3) {
    while (1) {
      switch (_context3.prev = _context3.next) {
        case 0:
          _context3.prev = 0;
          _context3.next = 3;
          return LIFECYCLE.Execute('RESET');

        case 3:
          _context3.next = 5;
          return LIFECYCLE.Execute('START');

        case 5:
          _context3.next = 7;
          return LIFECYCLE.Execute('APP_READY');

        case 7:
          _context3.next = 9;
          return LIFECYCLE.Execute('RUN');

        case 9:
          _context3.next = 14;
          break;

        case 11:
          _context3.prev = 11;
          _context3.t0 = _context3['catch'](0);

          console.error('SetupRun() Lifecycle Error. Check phase execution order effect on data validity.\n', _context3.t0);
          // debugger;

        case 14:
        case 'end':
          return _context3.stop();
      }
    }
  }, _callee3, undefined, [[0, 11]]);
}));
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/** API: handle periodic updates for a simulation-driven timestep
 */
UNISYS.Run = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4() {
  return regeneratorRuntime.wrap(function _callee4$(_context4) {
    while (1) {
      switch (_context4.prev = _context4.next) {
        case 0:
          _context4.prev = 0;
          _context4.next = 3;
          return LIFECYCLE.Execute('UPDATE');

        case 3:
          _context4.next = 8;
          break;

        case 5:
          _context4.prev = 5;
          _context4.t0 = _context4['catch'](0);

          console.error(_context4.t0);

        case 8:
        case 'end':
          return _context4.stop();
      }
    }
  }, _callee4, undefined, [[0, 5]]);
}));
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/** API: do the Shutdown lifecycle
    NOTE ASYNC ARROW FUNCTION (necessary?)
 */
UNISYS.BeforePause = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5() {
  return regeneratorRuntime.wrap(function _callee5$(_context5) {
    while (1) {
      switch (_context5.prev = _context5.next) {
        case 0:
          _context5.next = 2;
          return LIFECYCLE.Execute('PREPAUSE');

        case 2:
        case 'end':
          return _context5.stop();
      }
    }
  }, _callee5, undefined);
}));
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/** API: do the Shutdown lifecycle
    NOTE ASYNC ARROW FUNCTION (necessary?)
 */
UNISYS.Paused = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee6() {
  return regeneratorRuntime.wrap(function _callee6$(_context6) {
    while (1) {
      switch (_context6.prev = _context6.next) {
        case 0:
          _context6.next = 2;
          return LIFECYCLE.Execute('PAUSE');

        case 2:
        case 'end':
          return _context6.stop();
      }
    }
  }, _callee6, undefined);
}));
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/** API: do the Shutdown lifecycle
    NOTE ASYNC ARROW FUNCTION (necessary?)
 */

UNISYS.PostPause = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee7() {
  return regeneratorRuntime.wrap(function _callee7$(_context7) {
    while (1) {
      switch (_context7.prev = _context7.next) {
        case 0:
          _context7.next = 2;
          return LIFECYCLE.Execute('POSTPAUSE');

        case 2:
        case 'end':
          return _context7.stop();
      }
    }
  }, _callee7, undefined);
}));
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/** API: do the Shutdown lifecycle
    NOTE ASYNC ARROW FUNCTION (necessary?)
 */
UNISYS.CleanupRun = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee8() {
  return regeneratorRuntime.wrap(function _callee8$(_context8) {
    while (1) {
      switch (_context8.prev = _context8.next) {
        case 0:
          _context8.next = 2;
          return LIFECYCLE.Execute('STOP');

        case 2:
        case 'end':
          return _context8.stop();
      }
    }
  }, _callee8, undefined);
}));
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/** API: application offline
    NOTE ASYNC ARROW FUNCTION (necessary?)
 */
UNISYS.ServerDisconnect = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee9() {
  return regeneratorRuntime.wrap(function _callee9$(_context9) {
    while (1) {
      switch (_context9.prev = _context9.next) {
        case 0:
          _context9.next = 2;
          return LIFECYCLE.Execute('DISCONNECT');

        case 2:
        case 'end':
          return _context9.stop();
      }
    }
  }, _callee9, undefined);
}));
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/** API: application shutdown
    NOTE ASYNC ARROW FUNCTION (necessary?)
 */
UNISYS.ExitApp = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee10() {
  return regeneratorRuntime.wrap(function _callee10$(_context10) {
    while (1) {
      switch (_context10.prev = _context10.next) {
        case 0:
          _context10.next = 2;
          return LIFECYCLE.Execute('UNLOADASSETS');

        case 2:
          _context10.next = 4;
          return LIFECYCLE.Execute('SHUTDOWN');

        case 4:
        case 'end':
          return _context10.stop();
      }
    }
  }, _callee10, undefined);
}));

/// NETWORK INFORMATION ///////////////////////////////////////////////////////
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/** return the current connected Socket Address (e.g. UADDR_12)
 */

UNISYS.SocketUADDR = function () {
  return NETWORK.SocketUADDR();
};
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
UNISYS.IsStandaloneMode = function () {
  return NETWORK.IsStandaloneMode();
};

/// DATA LOGGING //////////////////////////////////////////////////////////////
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/** send a logging message
 */
UNISYS.Log = function (event) {
  for (var _len = arguments.length, items = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
    items[_key - 1] = arguments[_key];
  }

  if (typeof event !== 'string') {
    console.error("UNISYS.Log( 'eventString', value, value, value... )");
  }
  UDATA.NetSignal('SRV_LOG_EVENT', { event: event, items: items });
};

/// REACT INTEGRATION /////////////////////////////////////////////////////////
/** return the referene to the UNISYS extension of React.Component
 */
UNISYS.Component = UniComponent;

/// EXPORT MODULE DEFINITION //////////////////////////////////////////////////
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
module.exports = UNISYS;
});

require.register("unisys/common-defs.js", function(exports, require, module) {
"use strict";

/*//////////////////////////////// ABOUT \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\*\

  Store common system definitions here between client and server modules.

\*\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ * //////////////////////////////////////*/

/// CONSTANTS & DECLARATIONS //////////////////////////////////////////////////
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
var DEFS = {};
DEFS.SERVER_HEARTBEAT_INTERVAL = 5000; // ms

/// EXPORT MODULE DEFINITION //////////////////////////////////////////////////
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
module.exports = DEFS;
});

require.register("unisys/common-netmessage-class.js", function(exports, require, module) {
'use strict';

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/*//////////////////////////////// ABOUT \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\*\

  NetMessage objects are sent between the browser and server as part of the
  UNISYS messaging system. Unlike NetMessages of the previous version of STEP,
  a NetMessage does not require addressing since the SERVER distributes
  messages to UNISYS addresses that have registered for them.

  The NetMessage declaration is SHARED in both node and browser javascript
  codebases.

  NetMessages also provide the data context for "transactions" of calls.
  The netmessage_id and data packet are used by the originating webapp
  to remember a sequence of callback functions. When a NetMessage is
  received with a seq_num > 0, it's assumed to be a return transaction,
  and its callback chain can be invoked. The data is forwarded to the
  callback. For more details, see the CallSequence class that manages
  the passing of data.

\*\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ * //////////////////////////////////////*/

/// CONSTANTS & DECLARATIONS //////////////////////////////////////////////////
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
var DBG = { send: false, transact: false };
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
var m_id_counter = 0;
var m_id_prefix = 'PKT';
var m_transactions = {};
var m_netsocket = null;
var m_group_id = null;
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
var M_INIT = 'init';
var M_ONLINE = 'online';
var M_STANDALONE = 'offline';
var M_CLOSED = 'closed';
// const M_ERROR = 'error';
var m_mode = M_INIT;
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
var PROMPTS = require('../system/util/prompts');
var PR = PROMPTS.Pad('PKT');
var ERR = ':ERR:';
var ERR_NOT_NETMESG = ERR + PR + 'obj does not seem to be a NetMessage';
var ERR_BAD_PROP = ERR + PR + 'property argument must be a string';
var ERR_ERR_BAD_CSTR = ERR + PR + 'constructor args are string, object';
var ERR_BAD_SOCKET = ERR + PR + 'sender object must implement send()';
var ERR_DUPE_TRANS = ERR + PR + 'this packet transaction is already registered!';
// const ERR_NO_GLOB_UADDR = ERR + PR + 'packet sending attempted before UADDR is set!';
var ERR_UNKNOWN_TYPE = ERR + PR + 'packet type is unknown:';
var ERR_NOT_PACKET = ERR + PR + 'passed object is not a NetMessage';
var ERR_UNKNOWN_RMODE = ERR + PR + 'packet routine mode is unknown:';
var KNOWN_TYPES = ['msend', 'msig', 'mcall', 'state'];
var ROUTING_MODE = ['req', 'res'];

/// UNISYS NETMESSAGE CLASS ///////////////////////////////////////////////////
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/** A UNetMessage encapsulates a specific message and data payload for sending
    across the network.
 */

var NetMessage = function () {
  function NetMessage(msg, data, type) {
    _classCallCheck(this, NetMessage);

    // OPTION 1
    // create NetMessage from (generic object)
    if ((typeof msg === 'undefined' ? 'undefined' : _typeof(msg)) === 'object' && data === undefined) {
      // make sure it has a msg and data obj
      if (typeof msg.msg !== 'string' || _typeof(msg.data) !== 'object') {
        console.log('bad message object', JSON.stringify(msg));
        throw ERR_NOT_NETMESG;
      }
      // merge properties into this new class instance and return it
      Object.assign(this, msg);
      m_SeqIncrement(this);
      return this;
    }
    // OPTION 2
    // create NetMessage from JSON-encoded string
    if (typeof msg === 'string' && data === undefined) {
      var obj = JSON.parse(msg);
      Object.assign(this, obj);
      m_SeqIncrement(this);
      return this;
    }
    // OPTION 3
    // create new NetMessage from scratch (mesg,data)
    // unique id for every NetMessage
    if (typeof type === 'string') m_CheckType(type);
    if (typeof msg !== 'string' || (typeof data === 'undefined' ? 'undefined' : _typeof(data)) !== 'object') {
      throw ERR_ERR_BAD_CSTR;
    }
    // allow calls with null data by setting to empty object
    this.data = data || {};
    this.msg = msg;
    // id and debugging memo support
    this.id = this.MakeNewID();
    this.rmode = ROUTING_MODE[0]; // is default 't_req' (trans request)
    this.type = type || KNOWN_TYPES[0]; // is default 'msend' (no return)
    this.memo = '';
    // transaction support
    this.seqnum = 0; // positive when part of transaction
    this.seqlog = []; // transaction log
    // addressing support
    this.s_uaddr = NetMessage.SocketUADDR() || null; // first originating uaddr set by SocketSend()
    this.s_group = null; // session groupid is set by external module once validated
    this.s_uid = null; // first originating UDATA srcUID
    // filtering support
  } // constructor

  /// ACCESSSOR METHODS ///////////////////////////////////////////////////////
  /// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  /** returns the type
   */


  _createClass(NetMessage, [{
    key: 'Type',
    value: function Type() {
      return this.type;
    }
    /// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    /** returns true if type matches
     */

  }, {
    key: 'IsType',
    value: function IsType(type) {
      return this.type === type;
    }
    /// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    /** returns the type
     */

  }, {
    key: 'SetType',
    value: function SetType(type) {
      this.type = m_CheckType(type);
    }
    /// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    /** returns the message
     */

  }, {
    key: 'Message',
    value: function Message() {
      return this.msg;
    }
    /// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    /** sets the message field
     */

  }, {
    key: 'SetMessage',
    value: function SetMessage(msgstr) {
      this.msg = msgstr;
    }
    /// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    /** returns the entire data payload or the property within the data payload
        (can return undefined if property doesn't exist)
     */

  }, {
    key: 'Data',
    value: function Data(prop) {
      if (!prop) return this.data;
      if (typeof prop === 'string') return this.data[prop];
      throw ERR_BAD_PROP;
    }
    /// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    /** convenience method to set data object entirely
     */

  }, {
    key: 'SetData',
    value: function SetData(propOrVal, val) {
      if ((typeof propOrVal === 'undefined' ? 'undefined' : _typeof(propOrVal)) === 'object') {
        this.data = propOrVal;
        return;
      }
      if (typeof propOrVal === 'string') {
        this.data[propOrVal] = val;
        return;
      }
      throw ERR_BAD_PROP;
    }
    /// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    /** returns truthy value (this.data) if the passed msgstr matches the
        message associated with this NetMessage
     */

  }, {
    key: 'Is',
    value: function Is(msgstr) {
      return msgstr === this.msg ? this.data : undefined;
    }
    /// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    /** convenience function return true if server message
     */

  }, {
    key: 'IsServerMessage',
    value: function IsServerMessage() {
      return this.msg.startsWith('SRV_');
    }
    /// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    /** getter/setter for the memo description field
     */

  }, {
    key: 'Memo',
    value: function Memo() {
      return this.memo;
    }
  }, {
    key: 'SetMemo',
    value: function SetMemo(memo) {
      this.memo = memo;
    }
    /// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    /** convenience function to return JSON version of this object
     */

  }, {
    key: 'JSON',
    value: function (_JSON) {
      function JSON() {
        return _JSON.apply(this, arguments);
      }

      JSON.toString = function () {
        return _JSON.toString();
      };

      return JSON;
    }(function () {
      return JSON.stringify(this);
    })
    /// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    /** return the session groupid (CLASS-PROJ-HASH) that's been set globally
     */

  }, {
    key: 'SourceGroupID',
    value: function SourceGroupID() {
      return this.s_group;
    }

    /// TRANSACTION SUPPORT /////////////////////////////////////////////////////
    /// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    /** The sequence number is positive if this packet is reused
     */

  }, {
    key: 'SeqNum',
    value: function SeqNum() {
      return this.seqnum;
    }
    /// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    /** Return the originating address of this netmessage packet. It is valid
        only after the packet has been sent at least once.
     */

  }, {
    key: 'SourceAddress',
    value: function SourceAddress() {
      // is this packet originating from server to a remote?
      if (this.s_uaddr === NetMessage.DefaultServerUADDR() && !this.msg.startsWith('SVR_')) {
        return this.s_uaddr;
      }
      // this is a regular message forward to remote handlers
      return this.IsTransaction() ? this.seqlog[0] : this.s_uaddr;
    }
    /// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  }, {
    key: 'CopySourceAddress',
    value: function CopySourceAddress(pkt) {
      if (pkt.constructor.name !== 'NetMessage') throw Error(ERR_NOT_PACKET);
      this.s_uaddr = pkt.SourceAddress();
    }
    /// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    /** return an informational string about the packet useful for logging
     */

  }, {
    key: 'Info',
    value: function Info(key) {
      switch (key) {
        case 'src': /* falls-through */
        default:
          return this.SourceGroupID() ? this.SourceAddress() + ' [' + this.SourceGroupID() + ']' : '' + this.SourceAddress();
      }
    }
    /// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    /** return an informational Object about the packet useful for logging
     *  Used to provide a predictable format for Research Logging
     */

  }, {
    key: 'InfoObj',
    value: function InfoObj(key) {
      switch (key) {
        case 'src': /* falls-through */
        default:
          return this.SourceGroupID() ? { uaddr: this.SourceAddress(), group: this.SourceGroupID() } : { uaddr: this.SourceAddress(), group: undefined };
      }
    }
    /// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  }, {
    key: 'MakeNewID',
    value: function MakeNewID() {
      var idStr = (++m_id_counter).toString();
      this.id = m_id_prefix + idStr.padStart(5, '0');
      return this.id;
    }
    /// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    /** Send packet on either provided socket or default socket. Servers provide
        the socket because it's handling multiple sockets from different clients.
     */

  }, {
    key: 'SocketSend',
    value: function SocketSend() {
      var socket = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : m_netsocket;

      if (m_mode === M_ONLINE || m_mode === M_INIT) {
        this.s_group = NetMessage.GlobalGroupID();
        var dst = socket.UADDR || 'unregistered socket';
        if (!socket) throw Error('SocketSend(sock) requires a valid socket');
        if (DBG.send) {
          var status = 'sending \'' + this.Message() + '\' to ' + dst;
          console.log(PR, status);
        }
        // for server-side ws library, send supports a function callback
        // for WebSocket, this is ignored
        socket.send(this.JSON(), function (err) {
          if (err) console.error('\nsocket ' + socket.UADDR + ' reports error ' + err + '\n');
        });
      } else if (m_mode !== M_STANDALONE) {
        console.log(PR, "SocketSend: Can't send because NetMessage mode is", m_mode);
      } else {
        console.warn(PR, 'STANDALONE MODE: SocketSend() suppressed!');
      }
      // FYI: global m_netsocket is not defined on server, since packets arrive on multiple sockets
    }
    /// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    /** Create a promise to resolve when packet returns
     */

  }, {
    key: 'QueueTransaction',
    value: function QueueTransaction() {
      var _this = this;

      var socket = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : m_netsocket;

      if (m_mode === M_STANDALONE) {
        console.warn(PR, 'STANDALONE MODE: QueueTransaction() suppressed!');
        return Promise.resolve();
      }
      // global m_netsocket is not defined on server, since packets arrive on multiple sockets
      if (!socket) throw Error('QueueTransaction(sock) requires a valid socket');
      // save our current UADDR
      this.seqlog.push(NetMessage.UADDR);
      var dbg = DBG.transact && !this.IsServerMessage();
      var p = new Promise(function (resolve, reject) {
        var hash = m_GetHashKey(_this);
        if (m_transactions[hash]) {
          reject(Error(ERR_DUPE_TRANS + ':' + hash));
        } else {
          // save the resolve function in transactions table;
          // promise will resolve on remote invocation with data
          m_transactions[hash] = function (data) {
            if (dbg) {
              console.log(PR, 'resolving promise with', JSON.stringify(data));
            }
            resolve(data);
          };
          _this.SocketSend(socket);
        }
      });
      return p;
    }
    /// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    /** return the 'routing mode':
          req/res is request/reply (message requests and optional response)
          f_req/f_res is forwarded request/reply (forwarded messages and optional return)
          the f_res is converted to res and sent back to original requester
     */

  }, {
    key: 'RoutingMode',
    value: function RoutingMode() {
      return this.rmode;
    }
    /// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  }, {
    key: 'IsRequest',
    value: function IsRequest() {
      return this.rmode === 'req';
    }
  }, {
    key: 'IsOwnResponse',
    value: function IsOwnResponse() {
      return this.rmode === 'res';
    }
    /// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

    /** If this packet is a returned transaction, then return true
     */

  }, {
    key: 'IsTransaction',
    value: function IsTransaction() {
      return this.rmode !== ROUTING_MODE[0] && this.seqnum > 0 && this.seqlog[0] === NetMessage.UADDR;
    }
    ///	- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    /**	update the sequence metadata and return on same socket
     */

  }, {
    key: 'ReturnTransaction',
    value: function ReturnTransaction() {
      var socket = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : m_netsocket;

      // global m_netsocket is not defined on server, since packets arrive on multiple sockets
      if (!socket) throw Error('ReturnTransaction(sock) requires a valid socket');
      // note: seqnum is already incremented by the constructor if this was
      // a received packet
      // add this to the sequence log
      this.seqlog.push(NetMessage.UADDR);
      this.rmode = m_CheckRMode('res');
      this.SocketSend(socket);
    }
    /// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    /** If this is a transaction packet that is returned, then execute the stored
        resolver function from the promise stored in m_transactions, which will
        then trigger .then() following any calls
     */

  }, {
    key: 'CompleteTransaction',
    value: function CompleteTransaction() {
      var dbg = DBG.transact && !this.IsServerMessage();
      var hash = m_GetHashKey(this);
      var resolverFunc = m_transactions[hash];
      if (dbg) console.log(PR, 'CompleteTransaction', hash);
      if (typeof resolverFunc !== 'function') {
        throw Error('transaction [' + hash + '] resolverFunction is type ' + (typeof resolverFunc === 'undefined' ? 'undefined' : _typeof(resolverFunc)));
      } else {
        resolverFunc(this.data);
        Reflect.deleteProperty(m_transactions[hash]);
      }
    }
  }]);

  return NetMessage;
}(); // class NetMessage

/// STATIC CLASS METHODS //////////////////////////////////////////////////////
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/** set the NETWORK interface object that implements Send()
    This class operates both under the server and the client.
    This is a client feature.
 */


NetMessage.GlobalSetup = function (config) {
  var netsocket = config.netsocket,
      uaddr = config.uaddr;

  if (uaddr) NetMessage.UADDR = uaddr;
  // NOTE: m_netsocket is set only on clients since on server, there are multiple sockets
  if (netsocket) {
    if (typeof netsocket.send !== 'function') throw ERR_BAD_SOCKET;
    console.log('NETWORK-PACKET: mode %cONLINE', 'color:red');
    m_netsocket = netsocket;
    m_mode = M_ONLINE;
  }
};
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/** cleanup any allocated storage. This class operates both under the
    server and the client. This is a client feature.
 */
NetMessage.GlobalCleanup = function () {
  if (m_netsocket) {
    console.log(PR, 'GlobalCleanup: deallocating netsocket, mode closed');
    m_netsocket = null;
    m_mode = M_CLOSED;
  }
};
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/** cleanup any allocated storage internally. This class operates both under the
    server and the client. This is a client feature.
 */
NetMessage.GlobalOfflineMode = function (data) {
  m_mode = M_STANDALONE;
  if (m_netsocket) {
    console.warn(PR, 'STANDALONE MODE: NetMessage disabling network');
    m_netsocket = null;
    // The disconnect is detected by client-network.js.
    // If the disconnect is due to a missing ping heartbeat from the server
    // (usually as a result of wifi/internet connection going down)
    // it will include a data.message explaining 'Client Disconnect'.
    // If there's no data.message, then this request came from
    // either a standalone connect, a server "close" event,
    // or a server "error" event.
    var event = new CustomEvent('UNISYSDisconnect', {
      detail: {
        message: data ? data.message : 'Server Disconnected'
      }
    });
    console.log('dispatching event to', document, event);
    document.dispatchEvent(event);
  }
};
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/** return the address (socket_id) assigned to this app instance
 */
NetMessage.SocketUADDR = function () {
  return NetMessage.UADDR;
};
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/** Return a default server UADDR
 */
NetMessage.DefaultServerUADDR = function () {
  return 'SVR_01';
};
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/** Return current SessionID string
 */
NetMessage.GlobalGroupID = function () {
  return m_group_id;
};
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
NetMessage.GlobalSetGroupID = function (token) {
  m_group_id = token;
};

/// PRIVATE CLASS HELPERS /////////////////////////////////////////////////////
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/** when a packet is reconstructed from an existing object or json string,
    its sequence number is incremented, and the old source uaddr is pushed
    onto the seqlog stack.
 */
function m_SeqIncrement(pkt) {
  pkt.seqnum++;
  return pkt;
}
///	- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/**	return the hash used for storing transaction callbacks
 */
function m_GetHashKey(pkt) {
  var hash = pkt.SourceAddress() + ':' + pkt.id;
  return hash;
}
///	- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/** is this an allowed type? throw error if not
 */
function m_CheckType(type) {
  if (type === undefined) {
    throw new Error('must pass a type string, not ' + type);
  }
  if (!KNOWN_TYPES.includes(type)) throw ERR_UNKNOWN_TYPE + ' \'' + type + '\'';
  return type;
}
///	- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/** is this an allowed mode? throw error if not
 */
function m_CheckRMode(mode) {
  if (mode === undefined) {
    throw new Error('must pass a mode string, not ' + mode);
  }
  if (!ROUTING_MODE.includes(mode)) throw ERR_UNKNOWN_RMODE + ' \'' + mode + '\'';
  return mode;
}

/// EXPORT CLASS DEFINITION ///////////////////////////////////////////////////
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
module.exports = NetMessage;
});

require.register("unisys/common-session.js", function(exports, require, module) {
'use strict';

/*//////////////////////////////// ABOUT \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\*\

  Session Utilities
  collection of session-related data structures

\*\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ * //////////////////////////////////////*/

/* added for pull request #81 so 'npm run lint' test appears clean */
/* eslint-disable no-unused-vars */

/// DEBUGGING /////////////////////////////////////////////////////////////////
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
var DBG = false;
//

/// SYSTEM LIBRARIES //////////////////////////////////////////////////////////
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
var HashIds = require('hashids');

/// MODULE DEFS ///////////////////////////////////////////////////////////////
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
var SESUTIL = {};
var HASH_ABET = 'ABCDEFGHIJKLMNPQRSTVWXYZ23456789';
var HASH_MINLEN = 3;
var m_current_groupid = null;

/// SESSION ///////////////////////////////////////////////////////////////////
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/** Given a token of form CLASS-PROJECT-HASHEDID, return an object
    containing as many decoded values as possible. Check isValid for
    complete decode succes. groupId is also set if successful

    `dataset` is not currently being used, but is retained for future use.
 */
SESUTIL.DecodeToken = function (token, templateSalt) {
  var DELIMITER = '-';
  if (token === undefined) return {};
  // 2024/08 Allow optional `dataset` so tokens can be shared across graphs
  // if (dataset === undefined) {
  //   console.error('SESUTIL.DecodeToken called without "dataset" parameter.');
  //   return {};
  // }
  var tokenBits = token.split(DELIMITER);
  var classId = void 0,
      projId = void 0,
      hashedId = void 0,
      groupId = void 0,
      subId = void 0,
      isValid = void 0;
  // optimistically set valid flag to be negated on failure
  isValid = true;
  // check for superficial issues
  if (token.substr(-1) === DELIMITER) {
    isValid = false;
  }
  // token is of form CLS-PRJ-HASHEDID
  // classId, etc will be partially set and returned
  if (tokenBits[0]) classId = tokenBits[0].toUpperCase();
  if (tokenBits[1]) projId = tokenBits[1].toUpperCase();
  if (tokenBits[2]) hashedId = tokenBits[2].toUpperCase();
  if (tokenBits[3]) subId = tokenBits[3].toUpperCase();
  // initialize hashid structure

  // Allow shareable tokens by setting `dataset` to undefined
  var salt = void 0;
  if (templateSalt !== undefined) {
    salt = '' + classId + projId + templateSalt;
  } else {
    salt = '' + classId + projId; // skips `dataset`
    console.warn('"salt" is not defined.  Using only classId and projId.');
  }

  if (DBG) console.warn('commen-session ignoring "dataset" to allow decoding of shared tokens');
  try {
    var hashids = new HashIds(salt, HASH_MINLEN, HASH_ABET);
    // try to decode the groupId
    groupId = hashids.decode(hashedId)[0];
  } catch (err) {
    console.log('SESUTIL.DecodeToken: invalid token');
  }
  // invalidate if groupId isn't an integer
  if (!Number.isInteger(groupId)) {
    if (DBG) console.error('invalid token');
    isValid = false;
    groupId = 0;
  }
  // invalidate if groupId isn't non-negative integer
  if (groupId < 0) {
    if (DBG) console.error('decoded token, but value out of range <0');
    isValid = false;
    groupId = 0;
  }

  // at this point groupId is valid (begins with ID, all numeric)
  // check for valid subgroupId
  if (subId) {
    if (subId.length > 2 && subId.indexOf('ID') === 0 && /^\d+$/.test(subId.substring(2))) {
      if (DBG) console.log('detected subid', subId.substring(2));
      // subId contains a string "ID<N>" where <N> is an integer
    } else {
      // subId exists but didn't match subid format
      if (DBG) console.log('invalid subId string', subId);
      isValid = false; // groupId is still valid,
      subId = 0;
    }
  }

  // reconstruct user id for use with author data for nodes, edges, comments
  var userId = [classId, projId, hashedId].join(DELIMITER);
  // if isValid is false, check groupId is 0 or subId is 0, indicating error
  var decoded = { token: token, isValid: isValid, classId: classId, projId: projId, hashedId: hashedId, groupId: groupId, subId: subId, userId: userId };
  return decoded;
};
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/** Return TRUE if the token decodes into an expected range of values
 */
SESUTIL.IsValidToken = function (token, templateSalt) {
  var decoded = SESUTIL.DecodeToken(token, templateSalt);
  return decoded && Number.isInteger(decoded.groupId);
};
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/** Returns a token string of form CLASS-PROJECT-HASHEDID
    classId and projId should be short and are case-insensitive.
    groupId must be a non-negative integer

    `dataset` is not currently being used, but is retained for future use.
*/
SESUTIL.MakeToken = function (classId, projId, groupId, templateSalt) {
  // type checking
  if (typeof classId !== 'string') throw Error('classId arg1 \'' + classId + '\' must be string');
  if (typeof projId !== 'string') throw Error('projId arg2 \'' + projId + '\' must be string');
  if (classId.length < 1) throw Error('classId arg1 length should be 1 or more');
  if (projId.length < 1) throw Error('projId arg2 length should be 1 or more');
  if (!Number.isInteger(groupId)) throw Error('groupId arg3 \'' + groupId + '\' must be integer');
  if (groupId < 0) throw Error('groupId arg3 must be non-negative integer');
  if (groupId > Number.MAX_SAFE_INTEGER) throw Error('groupId arg3 value exceeds MAX_SAFE_INTEGER');
  // initialize hashid structure
  classId = classId.toUpperCase();
  projId = projId.toUpperCase();

  // Allow shareable tokens by setting `dataset` to undefined
  var salt = void 0;
  if (templateSalt !== undefined) salt = '' + classId + projId + templateSalt;else salt = '' + classId + projId; // skips `dataset`

  if (DBG) console.warn('commen-session ignoring "dataset" to allow creation of shared tokens');
  var hashids = new HashIds(salt, HASH_MINLEN, HASH_ABET);
  var hashedId = hashids.encode(groupId);
  return classId + '-' + projId + '-' + hashedId;
};

/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/** Set the global GROUPID, which is included in all NetMessage
    packets that are sent to server.
 */
// REVIEW/FIXME
// `SetGroupID` isn't being called by anyone?
// If it is, the DecodeToken call needs to add a 'dataset' parameter or it will
// fail.
SESUTIL.SetGroupID = function (token) {
  console.error('SetGroupID calling decodeToken NC_CONFIG IS', window.NC_CONFIG);
  var good = SESUTIL.DecodeToken(token).isValid;
  if (good) m_current_groupid = token;
  return good;
};
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
SESUTIL.GroupID = function () {
  return m_current_groupid;
};

/// EXPORT MODULE /////////////////////////////////////////////////////////////
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
module.exports = SESUTIL;
});

require.register("unisys/component/SessionShell.jsx", function(exports, require, module) {
'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

if (window.NC_DBG) console.log('inc ' + module.id);
/*//////////////////////////////// ABOUT \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\*\

    SessionShell handles route-based parameters, updating the SESSION manager
    with pertinent information

    The component stores the credentials
      classId  : null,
      projId   : null,
      hashedId : null,
      groupId  : null,
      isValid  : false

    render() calls one of the following depending on the state of
    SESSION.DecodeToken( token ). It returns an object is isValid prop set.
    The token is by decoding the URL in location.href.

      renderLoggedIn( decoded ) contains an object with the decoded properties
      from the original string, and displays the login state

      renderLogin() shows the login text field.

    When text is changing in Login Field, this.handleChange() is called.
    It gets the value and runs SESSION.DecodeToken() on it.
    It then uses Unisys.SetAppState to set "SESSION" to the decoded value.
    if a groupId is detected, then it forces a redirect.


    A change in logged in status can come from four places:

    1. User has typed in login field.
       => This is handled by `handleChange()`
    2. User has hit the "Login" submit button.
       => This is handled by `onSubmit()`
    3. User has entered a full URL for the first time
       => This is handled by `componentWillMount()`
    4. User has changed an existing URL
       => This does not trigger `compomentWillMount()`
          so it needs special handling.
       Changing the url does trigger:
       * render()
          render is triggered because the props for the token
          passed by the route change.
          And render does detect the correct login state.
          However, if this represents a change in login state,
          the change in state needs to be broadcast.
       * componentDidUpdate()
          componentDidUpdate checks for the change in loggedinIn
          status and sends an AppStateChanged event as needed.

\*\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ * //////////////////////////////////////*/

var SETTINGS = require('settings');
var React = require('react');
var PROMPTS = require('system/util/prompts');
var SESSION = require('unisys/common-session');
var PR = PROMPTS.Pad('SessionShell');
var UNISYS = require('unisys/client');

/// CONSTANTS & DECLARATIONS //////////////////////////////////////////////////
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
var DBG = false;
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/// these styles are copied from AutoComplete.css
var INPUT_STYLE = {
  border: '1px solid #c35400',
  borderLeft: '0',
  borderRadius: '0 5px 5px 0',
  padding: '4px 8px 3px 8px',
  fontFamily: 'Helvetica, sans-serif',
  fontWeight: 400,
  fontSize: '10px',
  lineHeight: '13px',
  textAlign: 'right',
  textTransform: 'uppercase'
};
var GROUP_STYLE = {
  backgroundColor: '#777',
  color: 'white',
  marginTop: '-10px'
};
var LABEL_STYLE = {
  display: 'inline-block',
  verticalAlign: 'top',
  marginBottom: '0.15rem',
  marginTop: '0.15rem',
  color: '#355869'
};
var LOGIN_BTN_STYLE = {
  padding: '4px 8px 3px 8px',
  fontSize: '10px',
  lineHeight: '13px',
  border: '1px solid #c35400',
  borderRadius: '5px 0 0 5px',
  color: 'white',
  backgroundColor: '#c35400'
};
/// Move login to navbar
var NAV_LOGIN_STYLE = {
  fontSize: '0.8rem',
  zIndex: '2000'
};
var NAV_LOGIN_FEEDBACK_STYLE = {
  paddingRight: '0.5rem'
};
var VALID = {
  color: 'green',
  borderColor: 'green',
  outlineColor: 'green'
};
var VALIDBTN = {
  backgroundColor: 'green',
  borderColor: 'green',
  outlineColor: 'green'
};
var INVALID = {
  color: '#a20000',
  borderColor: '#a20000',
  outlineColor: '#a20000'
};

/// REACT COMPONENT ///////////////////////////////////////////////////////////
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

var SessionShell = function (_UNISYS$Component) {
  _inherits(SessionShell, _UNISYS$Component);

  function SessionShell() {
    _classCallCheck(this, SessionShell);

    var _this = _possibleConstructorReturn(this, (SessionShell.__proto__ || Object.getPrototypeOf(SessionShell)).call(this));

    _this.renderLogin = _this.renderLogin.bind(_this);
    _this.renderLoggedIn = _this.renderLoggedIn.bind(_this);
    _this.handleChange = _this.handleChange.bind(_this);
    _this.onSubmit = _this.onSubmit.bind(_this);
    _this.state = {
      // `state` tracks the login input field
      token: null,
      classId: null,
      projId: null,
      hashedId: null,
      subId: null,
      groupId: null,
      isValid: false,
      templateSalt: undefined // this is set in componentDidMount()
    };
    _this.previousIsValid = false; // to track changes in loggedIn status

    // This will invalidate the token when the server is disconnected
    // but this can be a problem for projects that require login
    // to view the graph.
    // this.OnDisconnect(() => {
    //   const token = this.props.match.params.token;
    //   const decoded = SESSION.DecodeToken(token, window.NC_CONFIG.dataset);
    //   // invalidate the token and announce it
    //   decoded.isValid = false;
    //   this.SetAppState("SESSION", decoded);
    // });
    return _this;
  }

  /// ROUTE RENDER FUNCTIONS ////////////////////////////////////////////////////
  /// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  /** render successful logged-in
   */


  _createClass(SessionShell, [{
    key: 'renderLoggedIn',
    value: function renderLoggedIn(decoded) {
      if (decoded) {
        var classproj = decoded.classId + '-' + decoded.projId;
        // prefix with unicode non-breaking space
        var gid = '\xA0' + decoded.groupId;
        var subid = decoded.subId ? 'USER\xA0' + decoded.subId : '';
        return React.createElement(
          'div',
          { style: NAV_LOGIN_STYLE },
          React.createElement(
            'label',
            { style: LABEL_STYLE, className: 'small' },
            'GROUP',
            gid,
            ':\xA0',
            React.createElement('br', null),
            subid
          ),
          React.createElement(
            'label',
            { style: LABEL_STYLE, className: 'small' },
            classproj,
            '-',
            React.createElement(
              'strong',
              null,
              decoded.hashedId
            )
          )
        );

        // Old Form above NodeSelector
        // return (
        //   <FormGroup row style={GROUP_STYLE} style={{position:'fixed',top:'5px',right:'5px',zIndex:'2000'}}>
        //     <Col sm={3}>
        //       <Label style={LABEL_STYLE} className="small">
        //         GROUP{gid}
        //         <br />
        //         {subid}
        //       </Label>
        //     </Col>
        //     <Col sm={9} className="text-right">
        //       <Label style={LABEL_STYLE} className="small">
        //         {classproj}-<strong>{decoded.hashedId}</strong>
        //       </Label>
        //     </Col>
        //   </FormGroup>
        // );
      } else {
        return React.createElement(
          'p',
          null,
          'ERROR:renderLoggedIn didn\'t get valid decoded object'
        );
      }
    }
    /// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    /** render must login (readonly)
     *  see common-session.DecodeToken() for details on:
     *    classId, projId, and hashedId are provided by the token
     *    groupId is _calculated_ when all three parts are valid
     *    subId is a string ID<NNN> where <NNN> are digits
     */

  }, {
    key: 'renderLogin',
    value: function renderLogin() {
      var _state = this.state,
          token = _state.token,
          classId = _state.classId,
          projId = _state.projId,
          groupId = _state.groupId,
          subId = _state.subId,
          hashedId = _state.hashedId,
          isValid = _state.isValid;

      if (token) token = token.toUpperCase();
      var formFeedback = void 0,
          tip = void 0,
          loginbtn = void 0,
          input = void 0;
      tip = 'type your login token';
      if (classId) tip = 'token part [1/3]...';
      if (projId) tip = 'token part [2/3]...';
      // groupId isn't part of the token
      // if (groupId) tip = 'Waiting for extra ID...';
      if (hashedId) tip = 'token part [3/3]...';
      // if groupId is defined, then the token is valid
      if (groupId) {
        //
        if (subId === 0) {
          tip = '...optional ID number';
          loginbtn = React.createElement(
            'button',
            {
              style: LOGIN_BTN_STYLE,
              disabled: !isValid,
              onSubmit: this.onSubmit,
              type: 'submit'
            },
            'LOGIN'
          );
          input = React.createElement('input', {
            name: 'sessionToken',
            id: 'sessionToken',
            style: _extends({}, INPUT_STYLE, INVALID),
            placeholder: 'CLASSID-PROJID-CODE',
            onChange: this.handleChange
          });
          formFeedback = React.createElement(
            'label',
            {
              htmlFor: 'sessionToken',
              style: _extends({}, NAV_LOGIN_FEEDBACK_STYLE, INVALID)
            },
            React.createElement(
              'small',
              null,
              tip
            )
          );
        } /* if subId!==0 */else {
            tip = 'CLICK LOGIN BUTTON';
            loginbtn = React.createElement(
              'button',
              {
                style: _extends({}, LOGIN_BTN_STYLE, VALIDBTN),
                disabled: !isValid,
                onSubmit: this.onSubmit,
                type: 'submit'
              },
              'LOGIN'
            );
            input = React.createElement('input', {
              name: 'sessionToken',
              id: 'sessionToken',
              style: _extends({}, INPUT_STYLE, VALID),
              placeholder: 'CLASSID-PROJID-CODE',
              onChange: this.handleChange
            });
            formFeedback = React.createElement(
              'label',
              {
                htmlFor: 'sessionToken',
                style: _extends({}, NAV_LOGIN_FEEDBACK_STYLE, VALID)
              },
              React.createElement(
                'small',
                null,
                tip
              )
            );
          }
      } /* if not groupId*/else {
          loginbtn = React.createElement(
            'button',
            {
              style: LOGIN_BTN_STYLE,
              disabled: !isValid,
              onSubmit: this.onSubmit,
              type: 'submit'
            },
            'LOGIN'
          );
          input = React.createElement('input', {
            name: 'sessionToken',
            id: 'sessionToken',
            style: _extends({}, INPUT_STYLE, INVALID),
            placeholder: 'CLASSID-PROJID-CODE',
            onChange: this.handleChange
          });
          formFeedback = React.createElement(
            'label',
            {
              htmlFor: 'sessionToken',
              style: _extends({}, NAV_LOGIN_FEEDBACK_STYLE, INVALID)
            },
            React.createElement(
              'small',
              null,
              tip
            )
          );
        }

      return React.createElement(
        'form',
        {
          className: '--SessionShell_Login',
          onSubmit: this.onSubmit,
          style: NAV_LOGIN_STYLE
        },
        formFeedback,
        loginbtn,
        input
      );

      // Old Form above NodeSelector
      // return (
      //   <Form onSubmit={this.onSubmit} style={{position:'fixed',top:'5px',right:'5px',zIndex:'2000'}}>
      //   <FormGroup row>
      //     <Col>
      //       <InputGroup>
      //         {formFeedback}
      //         <InputGroupAddon addonType="prepend"><Button style={{fontSize:'10px'}} color="secondary" size="sm" disabled={!isValid} onSubmit={this.onSubmit}>LOGIN</Button></InputGroupAddon>
      //         {input}
      //       </InputGroup>
      //     </Col>
      //   </FormGroup>
      //   </Form>
      // );
    }
    /// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  }, {
    key: 'componentDidMount',
    value: function componentDidMount() {
      // the code below reads a pre-existing matching path, which may be set
      // to a valid token string AFTER the changeHandler() detected a valid
      // login after a ForceReload. This is a bit hacky and the app would benefit
      // from not relying on forced reloads. See handleChange().
      //
      // This is only called with the initial page load.
      // Subsequent changes to the URL (e.g. changing token directly in the url)
      // do not result in a second componentWillMount call.  These are handled
      // by the componentDidUpdate() call.

      var _SETTINGS$GetRouteInf = SETTINGS.GetRouteInfoFromURL(),
          routeProps = _SETTINGS$GetRouteInf.routeProps;

      var token = routeProps.token;

      var TEMPLATE = this.AppState('TEMPLATE');
      var templateSalt = TEMPLATE && TEMPLATE.secretKey;
      this.setState({ templateSalt: templateSalt });
      var decoded = SESSION.DecodeToken(token, templateSalt) || {};
      this.SetAppState('SESSION', decoded);
      this.previousIsValid = decoded.isValid;
    }
    /// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  }, {
    key: 'componentDidUpdate',
    value: function componentDidUpdate(prevProps) {
      // SIDE EFFECT
      // Check for changes in logged in status and
      // trigger AppStateChange if necessary
      var _SETTINGS$GetRouteInf2 = SETTINGS.GetRouteInfoFromURL(),
          routeProps = _SETTINGS$GetRouteInf2.routeProps;

      var token = routeProps.token;


      if (!token) return; // don't bother to check if this was a result of changes from the form
      var decoded = SESSION.DecodeToken(token, this.state.templateSalt);
      if (decoded.isValid !== this.previousIsValid) {
        this.SetAppState('SESSION', decoded);
        this.previousIsValid = decoded.isValid;
      }
    }

    /// EVENT HANDLERS ////////////////////////////////////////////////////////////
    /// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  }, {
    key: 'handleChange',
    value: function handleChange(event) {
      var token = event.target.value;
      var decoded = SESSION.DecodeToken(token, this.state.templateSalt);
      var classId = decoded.classId,
          projId = decoded.projId,
          hashedId = decoded.hashedId,
          subId = decoded.subId,
          groupId = decoded.groupId;

      this.setState(decoded);
    }
    /// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  }, {
    key: 'onSubmit',
    value: function onSubmit(event) {
      event.preventDefault();
      if (this.state.isValid) {
        // force a page URL change
        var redirect = './#/edit/' + this.state.token;
        window.location.replace(redirect);
        window.location.reload();
      }
    }
    /// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    /** Main Render Function
     */

  }, {
    key: 'render',
    value: function render() {
      // FUN FACTS
      // this.state set in constructor
      // this.props.history, location, match added by withRouter(AppShell)
      // way back in init-appshell.jsx

      // if standalone mode, no login possible
      if (UNISYS.IsStandaloneMode()) {
        var _window$NC_UNISYS$sta = window.NC_UNISYS.standalone,
            prompt = _window$NC_UNISYS$sta.prompt,
            timestamp = _window$NC_UNISYS$sta.timestamp;

        return React.createElement(
          'div',
          { style: NAV_LOGIN_STYLE },
          React.createElement(
            'label',
            { style: LABEL_STYLE },
            prompt
          )
        );
      }

      var _SETTINGS$GetRouteInf3 = SETTINGS.GetRouteInfoFromURL(),
          routeProps = _SETTINGS$GetRouteInf3.routeProps;

      var token = routeProps.token;
      // no token so just render login

      if (!token) return this.renderLogin();

      // try to decode token
      var decoded = SESSION.DecodeToken(token, this.state.templateSalt);
      if (decoded.isValid) {
        return this.renderLoggedIn(decoded);
      } else {
        return this.renderLogin(token);
      }
    }
  }]);

  return SessionShell;
}(UNISYS.Component); // UNISYS.Component SessionShell

/// EXPORT REACT COMPONENT ////////////////////////////////////////////////////
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -


module.exports = SessionShell;
});

require.register("unisys/server-database.js", function(exports, require, module) {
'use strict';

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/** Load Template
    1. Tries to load a TOML template
    2. If it can't be found, tries to load the JSON template and convert it
    3. If that fails, clone the default TOML template and load it
    Called by
    * DB.InitializeDatabase
    * DB.WriteTemplateTOML
 */
var m_LoadTemplate = function () {
  var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {
    var TOMLPath;
    return regeneratorRuntime.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            TOMLPath = m_GetTemplateTOMLFilePath();

            FS.ensureDirSync(PATH.dirname(TOMLPath));
            /*/ SRI NOTE
                ripping out the json template conversion to simplify loading and
                avoid wasting time validating this poorly structured code
            /*/
            // Does the TOML template exist?

            if (!FS.existsSync(TOMLPath)) {
              _context2.next = 7;
              break;
            }

            _context2.next = 5;
            return m_LoadTOMLTemplate(TOMLPath);

          case 5:
            _context2.next = 11;
            break;

          case 7:
            // clone _default.template.toml
            console.log(PR, 'NO EXISTING TEMPLATE ' + TOMLPath);
            FS.copySync(m_DefaultTemplatePath(), TOMLPath);
            // then load it
            _context2.next = 11;
            return m_LoadTOMLTemplate(TOMLPath);

          case 11:
          case 'end':
            return _context2.stop();
        }
      }
    }, _callee2, this);
  }));

  return function m_LoadTemplate() {
    return _ref2.apply(this, arguments);
  };
}();

/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/** Updated Migrate Template - WARNING
 *  The original m_MigrateTemplate() uses a lot of indirection and references
 *  an "unused" module called "template-schema.js" that wass very much used */


function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

/*//////////////////////////////// ABOUT \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\*\

  DATABASE SERVER

\*\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ * //////////////////////////////////////*/

/* eslint-disable newline-per-chained-call */
/* eslint-disable nonblock-statement-body-position */

/* added for pull request #81 so 'npm run lint' test appears clean */
/* eslint-disable no-unused-vars */

var DBG = false;

/// LOAD LIBRARIES ////////////////////////////////////////////////////////////
/// = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
var Loki = require('lokijs');
var PATH = require('path');
var FS = require('fs-extra');
var TOML = require('@iarna/toml');

/// CONSTANTS /////////////////////////////////////////////////////////////////
/// = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
var SESSION = require('./common-session');
var LOGGER = require('./server-logger');
var PROMPTS = require('../system/util/prompts');
var FILTER = require('../view/netcreate/components/filter/FilterEnums');

var _require = require('../system/util/enum'),
    EDITORTYPE = _require.EDITORTYPE;

var PR = PROMPTS.Pad('ServerDB');
var RUNTIMEPATH = './runtime/';
var TEMPLATEPATH = './app-templates/';
var TEMPLATE_EXT = '.template.toml';
var BACKUPPATH = 'backups/'; // combined with RUNTIMEPATH, so no leading './'
var NC_CONFIG = require('../../app-config/netcreate-config');

/// MODULE-WIDE VARS //////////////////////////////////////////////////////////
/// = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
var db_file = void 0;
var m_options = void 0; // saved initialization options
var m_db = void 0; // loki database
var m_max_edgeID = void 0;
var m_max_nodeID = void 0;
var m_max_commentID = void 0;
var m_dupe_set = void 0; // set of nodeIDs for determine whether there are duplicates
var NODES = void 0; // loki "nodes" collection
var EDGES = void 0; // loki "edges" collection
var COMMENTS = void 0; // loki "comments" collection
var READBY = void 0; // loki "readby" collection
var m_locked_nodes = void 0; // map key = nodeID, value = uaddr initiating the lock
var m_locked_edges = void 0; // map key = edgeID, value = uaddr initiating the lock
var m_locked_comments = void 0; // map key = commentID, value = uaddr initiating the lock
var TEMPLATE = void 0;
var m_open_editors = []; // array of template, node, or edge editors
/// formatting
var BL = function BL(s) {
  return '\x1B[1;34m' + s + '\x1B[0m';
};
var RD = function RD(s) {
  return '\x1B[1;31m' + s + '\x1B[0m';
};
var YL = function YL(s) {
  return '\x1B[1;33m' + s + '\x1B[0m';
};

/// API METHODS ///////////////////////////////////////////////////////////////
/// = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
var DB = {};
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/** Backup Database File Utility
    Used by PKT_MergeDatabase to clone the db before importing.
    Saves the db in the runtime folder with a timestamp suffix. */
function m_BackupDatabase() {
  FS.ensureDirSync(PATH.dirname(db_file));
  if (FS.existsSync(db_file)) {
    var timestamp = new Date().toISOString().replace(/:/g, '.');
    var backupDBFilePath = m_GetValidDBFilePath(BACKUPPATH + NC_CONFIG.dataset + '_' + timestamp);
    console.log(PR, 'Saving database backup to', backupDBFilePath);
    FS.copySync(db_file, backupDBFilePath);
  }
}
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/** Default Template Path */
function m_DefaultTemplatePath() {
  return TEMPLATEPATH + '_default' + TEMPLATE_EXT;
}
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/** API: Initialize the database */
DB.InitializeDatabase = function () {
  // store for use by DB.WriteJSON

  /*/ !!! HACK NOTED !!!
      CALLBACK ON LOKI LOAD
      also has side-effect of initializing template, which has
      nothing to do with the database :|
  /*/

  var f_DatabaseInitialize = function () {
    var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
      var dupeNodes;
      return regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              // on the first load of (non-existent database), we will have no
              // collections so we can detect the absence of our collections and
              // add (and configure) them now.
              NODES = m_db.getCollection('nodes');
              if (NODES === null) NODES = m_db.addCollection('nodes');
              m_locked_nodes = new Map();
              EDGES = m_db.getCollection('edges');
              if (EDGES === null) EDGES = m_db.addCollection('edges');
              m_locked_edges = new Map();
              COMMENTS = m_db.getCollection('comments');
              if (COMMENTS === null) COMMENTS = m_db.addCollection('comments');
              READBY = m_db.getCollection('readby');
              if (READBY === null) READBY = m_db.addCollection('readby');
              m_locked_comments = new Map();

              // initialize unique set manager
              m_dupe_set = new Set();
              dupeNodes = [];

              // find highest NODE ID

              if (NODES.count() > 0) {
                m_max_nodeID = NODES.mapReduce(function (obj) {
                  // side-effect: make sure ids are numbers
                  m_CleanObjID('node.id', obj);
                  // side-effect: check for duplicate ids
                  if (m_dupe_set.has(obj.id)) {
                    dupeNodes.push(obj);
                  } else {
                    m_dupe_set.add(obj.id);
                  }
                  // return value
                  return obj.id;
                }, function (arr) {
                  return Math.max.apply(Math, _toConsumableArray(arr));
                });
              } else {
                m_max_nodeID = 0;
              }
              // remap duplicate NODE IDs
              dupeNodes.forEach(function (obj) {
                m_max_nodeID += 1;
                LOGGER.WriteRLog({}, PR, '# rewriting duplicate nodeID ' + obj.id + ' to ' + m_max_nodeID);
                obj.id = m_max_nodeID;
              });

              // find highest EDGE ID
              if (EDGES.count() > 0) {
                m_max_edgeID = EDGES.mapReduce(function (obj) {
                  m_CleanObjID('edge.id', obj);
                  m_CleanEdgeEndpoints(obj.id, obj);
                  return obj.id;
                }, function (arr) {
                  return Math.max.apply(Math, _toConsumableArray(arr));
                }); // end mapReduce edge ids
              } else {
                m_max_edgeID = 0;
              }
              console.log(PR, 'dataset loaded', BL(db_file), 'm_max_nodeID \'' + m_max_nodeID + '\', m_max_edgeID \'' + m_max_edgeID + '\'');

              // find highest COMMENT ID
              if (COMMENTS.count() > 0) {
                m_max_commentID = COMMENTS.mapReduce(function (obj) {
                  // side-effect: make sure ids are numbers
                  m_CleanObjID('comment.id', obj);
                  return obj.comment_id;
                }, function (arr) {
                  return Math.max.apply(Math, _toConsumableArray(arr));
                });
              } else {
                m_max_commentID = 0;
              }

              m_db.saveDatabase();

              _context.next = 21;
              return m_LoadTemplate();

            case 21:
              m_MigrateTemplate();
              m_ValidateTemplate();

            case 23:
            case 'end':
              return _context.stop();
          }
        }
      }, _callee, this);
    }));

    return function f_DatabaseInitialize() {
      return _ref.apply(this, arguments);
    };
  }(); // end f_DatabaseInitialize

  // UTILITY FUNCTION


  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  var dataset = NC_CONFIG.dataset;
  db_file = m_GetValidDBFilePath(dataset);
  FS.ensureDirSync(PATH.dirname(db_file));
  if (!FS.existsSync(db_file)) {
    console.log(PR, YL('NOTICE: NO EXISTING DATABASE ' + db_file + ', so creating BLANK DATABASE...'));
  }
  // console.log(PR, YL(`loading dataset`), `${BL(db_file)}...`);
  var ropt = {
    autoload: true,
    autoloadCallback: f_DatabaseInitialize,
    autosave: true,
    autosaveCallback: f_AutosaveStatus,
    autosaveInterval: 4000 // save every four seconds
  };
  ropt = Object.assign(ropt, options);
  m_db = new Loki(db_file, ropt);
  m_options = ropt;
  m_options.db_file = db_file;function f_AutosaveStatus() {
    var nodeCount = NODES.count();
    var edgeCount = EDGES.count();
    var commentCount = COMMENTS.count();
    var readbyCount = READBY.count();
    console.log(PR, 'AUTOSAVING! ' + nodeCount + ' NODES / ' + edgeCount + ' EDGES / ' + commentCount + ' COMMENTS / ' + readbyCount + ' READBY <3');
  }
}; // InitializeDatabase()
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/** Loads a *.template.toml file from the server. */
function m_LoadTOMLTemplate(templateFilePath) {
  return new Promise(function (resolve, reject) {
    var templateFile = FS.readFile(templateFilePath, 'utf8', function (err, data) {
      if (err) throw err;
      var json = TOML.parse(data);
      TEMPLATE = json;
      console.log(PR, 'template loaded', BL(templateFilePath));
      resolve({ Loaded: true });
    });
  });
}function m_MigrateTemplate() {
  //
  var T = TEMPLATE; // mirroring original hacky approach
  var EDF = T.edgeDefs;
  var NDF = T.nodeDefs;
  var nset = function nset(prop) {
    return prop === undefined;
  };

  /*/ SRI NOTE:
      using short messages because these get overwritten anyway
  /*/

  // Migrate 1.0 to 1.1
  if (nset(T.duplicationWarning)) T.duplicationWarning = 'Duplicate node detected';
  if (nset(T.nodeIsLockedMessage)) T.nodeIsLockedMessage = 'Node is locked';
  if (nset.edgeIsLockedMessage) T.edgeIsLockedMessage = 'Edge is locked';
  if (nset(T.templateIsLockedMessage)) T.templateIsLockedMessage = 'Template is locked';
  if (nset(T.importIsLockedMessage)) T.importIsLockedMessage = 'Import is locked';

  // Migrate 1.4 to 1.5 Core Preferences
  // -- v1.5 core defaults -- added 2023-0628 #31
  if (nset(T.searchColor)) T.searchColor = '#008800';
  if (nset(T.sourceColor)) T.sourceColor = '#FFa500';

  // -- v1.5 Filter Labels -- added 2023-0602 #117
  // See branch `dev-bl/template-filter-labels`, and fb28fa6
  if (nset(T.filterFade)) T.filterFade = 'Fade';
  if (nset(T.filterReduce)) T.filterReduce = 'Reduce';
  if (nset(T.filterFocus)) T.filterFocus = 'Focus';
  if (nset(T.filterFadeHelp)) T.filterFadeHelp = 'Fade Filters';
  if (nset(T.filterReduceHelp)) T.filterReduceHelp = 'Reduce Filters';
  if (nset(T.filterFocusHelp)) T.filterFocusHelp = 'Focus Filters';

  // -- v1.5 max sizes -- added 2023-0605 #117
  // See branch `dev-bl/max-size
  if (nset(T.nodeSizeDefault)) T.nodeSizeDefault = 5;
  if (nset(T.nodeSizeMax)) T.nodeSizeMax = 50;
  if (nset(T.edgeSizeDefault)) T.edgeSizeDefault = 1;
  if (nset(T.edgeSizeMax)) T.edgeSizeMax = 25;

  /*/ SRI NOTE:
      EDF is T.edgeDefs
      NDF is T.nodeDefs
  /*/

  // Migrate v1.4 to v1.5 Nodes and Edges
  // hides them by default if they were not previously added
  // SRI NOTE: these related to JSONEditor so needs rework since
  // a lot of this is just used by dead code that hasn't been pruned.
  // I've pruned some of it, but this is an outlier that needs to be handled
  // by a different mechanism in an updated prop editor
  if (nset(EDF.weight)) EDF.weight = {
    type: 'number',
    default: 1,
    label: 'Weight',
    exportLabel: 'Weight',
    help: 'Weight of edge',
    description: 'Weight of this edge',
    includeInGraphTooltip: true,
    isRequired: true,
    isProvenance: false,
    hidden: false
  };

  // v1.5 added `provenance` and `comments` so we add the template definitions
  // Sri notes: this doesn't exist in the template-schema.js output at all, so
  // there is nothing to migrate
  // if (ndef(NDEF?.provenance)) {}
  // if (ndef(NDEF?.comments)) {}
  // if (ndef(EDF?.provenance)) {}
  // if (ndef(EDF?.comments)) {}

  // Migrate 1.5 to 2.0 Template Version
  T._schemaVersion = '2.0';
}

/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/** Validate Template File
    Lazy check of template object definitions to make sure they are of
    expected types and values so the UI doesn't choke and die. Throws an error
    if property is missing.
 */
// eslint-disable-next-line complexity
function m_ValidateTemplate() {
  try {
    // 1. Validate built-in fields
    // nodeDefs
    var nodeDefs = TEMPLATE.nodeDefs;
    if (nodeDefs === undefined) {
      throw 'Missing `nodeDefs` nodeDefs=' + nodeDefs;
    }
    if (nodeDefs.label === undefined) throw 'Missing `nodeDefs.label` label=' + nodeDefs.label;
    // edgeDefs
    var edgeDefs = TEMPLATE.edgeDefs;
    if (edgeDefs === undefined) throw 'Missing `edgeDefs` edgeDefs=' + edgeDefs;
    if (edgeDefs.source === undefined) throw 'Missing `edgeDefs.source` source=' + edgeDefs.source;
    if (edgeDefs.target === undefined) throw 'Missing `edgeDefs.target` label=' + edgeDefs.target;

    // 2. Validate deprecated fields
    //    `TEMPLATE.version` was added after 2.0.
    if (!TEMPLATE.version) {
      // nodeDefs
      if (nodeDefs.type === undefined) throw 'Missing `nodeDefs.type` type= ' + nodeDefs.type;
      if (nodeDefs.type.options === undefined || !Array.isArray(nodeDefs.type.options)) {
        throw 'Missing or bad `nodeDefs.type.options` options=' + nodeDefs.type.options;
      }
      if (nodeDefs.notes === undefined) throw 'Missing `nodeDefs.notes` notes=' + nodeDefs.notes;
      if (nodeDefs.info === undefined) throw 'Missing `nodeDefs.info` info=' + nodeDefs.info;
      // Version 1.5+ Fields
      // if (nodeDefs.provenance === undefined) // v2 provenance removed
      //   throw 'Missing `nodeDefs.provenance` provenance=' + nodeDefs.provenance;
      if (nodeDefs.provenance)
        // v2 provenance removed
        console.log(RD('Template is using deprecated node definition `provenance` which might result in errors when saving a node. Update the template and convert the data.'), JSON.stringify(nodeDefs.provenance, null, 2));
      if (nodeDefs.comments === undefined) throw 'Missing `nodeDefs.comments` comments=' + nodeDefs.comments;

      // edgeDefs
      if (edgeDefs.type === undefined) throw 'Missing `edgeDefs.type` type= ' + edgeDefs.type;
      if (edgeDefs.type.options === undefined || !Array.isArray(edgeDefs.type.options)) {
        throw 'Missing or bad `edgeDefs.type.options` options=' + edgeDefs.type.options;
      }
      if (edgeDefs.notes === undefined) throw 'Missing `edgeDefs.notes` notes=' + edgeDefs.notes;
      if (edgeDefs.info === undefined) throw 'Missing `edgeDefs.info` info=' + edgeDefs.info;
      // Version 1.5+ Fields
      // if (edgeDefs.provenance === undefined) // v2 provenance removed
      //   throw 'Missing `edgeDefs.provenance` provenance=' + edgeDefs.provenance;
      if (edgeDefs.provenance)
        // v2 provenance removed
        console.log(RD('Template is using deprecated edge definition `provenance` which might result in errors when saving a node. Update the template and convert the data.'), JSON.stringify(edgeDefs.provenance, null, 2));
      if (edgeDefs.comments === undefined) throw 'Missing `edgeDefs.comments` comments=' + edgeDefs.comments;
      // -- End 1.5+
      if (edgeDefs.citation === undefined) throw 'Missing `edgeDefs.citation` info=' + edgeDefs.citation;
      if (edgeDefs.category === undefined) throw 'Missing `edgeDefs.category` info=' + edgeDefs.category;
    } else {
      // Placeholder for future version checks
      // if (TEMPLATE.version <= "2.0") {
      //   // do something
      // }
    }
  } catch (error) {
    var templateFileName = m_GetTemplateTOMLFilePath();
    console.error('Error loading template `', templateFileName, '`::::', error);
  }
}

/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/** API: load database
 *  note: InitializeDatabase() was already called on system initialization
 *  to populate the NODES and EDGES structures */
DB.PKT_GetDatabase = function (pkt) {
  var nodes = NODES.chain().data({ removeMeta: false });
  var edges = EDGES.chain().data({ removeMeta: false });
  var comments = COMMENTS.chain().data();
  var readby = READBY.chain().data();
  if (DBG) console.log(PR, 'PKT_GetDatabase ' + pkt.Info() + ' (loaded ' + nodes.length + ' nodes, ' + edges.length + ' edges)');
  m_MigrateNodes(nodes);
  m_MigrateEdges(edges);
  LOGGER.WriteRLog(pkt.InfoObj(), 'getdatabase');
  return { d3data: { nodes: nodes, edges: edges }, template: TEMPLATE, comments: comments, readby: readby };
};
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/** API: reset database from scratch */
DB.PKT_SetDatabase = function (pkt) {
  if (DBG) console.log(PR, 'PKT_SetDatabase');

  var _pkt$Data = pkt.Data(),
      _pkt$Data$nodes = _pkt$Data.nodes,
      nodes = _pkt$Data$nodes === undefined ? [] : _pkt$Data$nodes,
      _pkt$Data$edges = _pkt$Data.edges,
      edges = _pkt$Data$edges === undefined ? [] : _pkt$Data$edges,
      _pkt$Data$comments = _pkt$Data.comments,
      comments = _pkt$Data$comments === undefined ? [] : _pkt$Data$comments,
      _pkt$Data$readby = _pkt$Data.readby,
      readby = _pkt$Data$readby === undefined ? [] : _pkt$Data$readby;

  if (!nodes.length) console.log(PR, 'WARNING: empty nodes array');else console.log(PR, 'setting ' + nodes.length + ' nodes...');
  if (!edges.length) console.log(PR, 'WARNING: empty edges array');else console.log(PR, 'setting ' + edges.length + ' edges...');
  if (!comments.length) console.log(PR, 'WARNING: empty comments array');else console.log(PR, 'setting ' + comments.length + ' comments...');
  if (!readby.length) console.log(PR, 'WARNING: empty readby array');else console.log(PR, 'setting ' + readby.length + ' readby...');
  NODES.clear();
  NODES.insert(nodes);
  EDGES.clear();
  EDGES.insert(edges);
  COMMENTS.clear();
  COMMENTS.insert(comments);
  READBY.clear();
  READBY.insert(readby);
  console.log(PR, 'PKT_SetDatabase complete. Data available on next get.');
  m_db.close();
  DB.InitializeDatabase();
  LOGGER.WriteRLog(pkt.InfoObj(), 'setdatabase');
  return { OK: true };
};
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/** API: Add nodes/edges to an existing db */
DB.PKT_InsertDatabase = function (pkt) {
  if (DBG) console.log(PR, 'PKT_InsertDatabase');

  var _pkt$Data2 = pkt.Data(),
      _pkt$Data2$nodes = _pkt$Data2.nodes,
      nodes = _pkt$Data2$nodes === undefined ? [] : _pkt$Data2$nodes,
      _pkt$Data2$edges = _pkt$Data2.edges,
      edges = _pkt$Data2$edges === undefined ? [] : _pkt$Data2$edges,
      _pkt$Data2$comments = _pkt$Data2.comments,
      comments = _pkt$Data2$comments === undefined ? [] : _pkt$Data2$comments,
      _pkt$Data2$readby = _pkt$Data2.readby,
      readby = _pkt$Data2$readby === undefined ? [] : _pkt$Data2$readby;

  if (!nodes.length) console.log(PR, 'WARNING: empty nodes array');else console.log(PR, 'setting ' + nodes.length + ' nodes...');
  if (!edges.length) console.log(PR, 'WARNING: empty edges array');else console.log(PR, 'setting ' + edges.length + ' edges...');
  if (!comments.length) console.log(PR, 'WARNING: empty comments array');else console.log(PR, 'setting ' + comments.length + ' comments...');
  if (!readby.length) console.log(PR, 'WARNING: empty readby array');else console.log(PR, 'setting ' + readby.length + ' readby...');
  NODES.insert(nodes);
  EDGES.insert(edges);
  COMMENTS.insert(comments);
  READBY.insert(readby);
  console.log(PR, 'PKT_InsertDatabase complete. Data available on next get.');
  m_db.close();
  DB.InitializeDatabase();
  LOGGER.WriteRLog(pkt.InfoObj(), 'setdatabase');
  return { OK: true };
};
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/** API: Update or add nodes/edges to an existing db
 *  If the node/edge exists, update it.
 *  Otherwise, insert it.
 *  This walks down the node and edge arrays one by one,
 *  using PKT_Update to decide whether to insert or update the data.
 *  REVIEW: Consider batch operations ala `NODES.insert(nodes)`?
 */
DB.PKT_MergeDatabase = function (pkt) {
  if (DBG) console.log(PR, 'PKT_MergeDatabase');

  var _pkt$Data3 = pkt.Data(),
      _pkt$Data3$nodes = _pkt$Data3.nodes,
      nodes = _pkt$Data3$nodes === undefined ? [] : _pkt$Data3$nodes,
      _pkt$Data3$edges = _pkt$Data3.edges,
      edges = _pkt$Data3$edges === undefined ? [] : _pkt$Data3$edges,
      _pkt$Data3$comments = _pkt$Data3.comments,
      comments = _pkt$Data3$comments === undefined ? [] : _pkt$Data3$comments,
      _pkt$Data3$readby = _pkt$Data3.readby,
      readby = _pkt$Data3$readby === undefined ? [] : _pkt$Data3$readby;

  // Save Backup First!


  m_BackupDatabase();

  // insert nodes one by one
  nodes.forEach(function (n) {
    pkt.data.node = n;
    DB.PKT_Update(pkt);
  });
  pkt.data.node = undefined; // clear, no longer needed

  edges.forEach(function (e) {
    pkt.data.edge = e;
    DB.PKT_Update(pkt);
  });
  pkt.data.edge = undefined; // clear, no longer needed

  comments.forEach(function (c) {
    pkt.data.comments = c;
    DB.PKT_Update(pkt);
  });
  pkt.data.comment = undefined; // clear, no longer needed

  readby.forEach(function (r) {
    pkt.data.readby = r;
    DB.PKT_Update(pkt);
  });
  pkt.data.readby = undefined; // clear, no longer needed

  return new Promise(function (resolve, reject) {
    return m_db.saveDatabase(function (err) {
      if (err) reject(new Error('rejected'));
      DB.InitializeDatabase();
      LOGGER.WriteRLog(pkt.InfoObj(), 'mergedatabase');
      resolve({ OK: true });
    });
  });
};
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/** API: Update all data in existing database.
 *  Used to update node/edge types after template edit */
DB.PKT_UpdateDatabase = function (pkt) {
  if (DBG) console.log(PR, 'PKT_UpdateDatabase');

  var _pkt$Data4 = pkt.Data(),
      _pkt$Data4$nodes = _pkt$Data4.nodes,
      nodes = _pkt$Data4$nodes === undefined ? [] : _pkt$Data4$nodes,
      _pkt$Data4$edges = _pkt$Data4.edges,
      edges = _pkt$Data4$edges === undefined ? [] : _pkt$Data4$edges,
      _pkt$Data4$comments = _pkt$Data4.comments,
      comments = _pkt$Data4$comments === undefined ? [] : _pkt$Data4$comments,
      _pkt$Data4$readby = _pkt$Data4.readby,
      readby = _pkt$Data4$readby === undefined ? [] : _pkt$Data4$readby;

  if (!nodes.length) console.log(PR, 'WARNING: empty nodes array');else console.log(PR, 'updating ' + nodes.length + ' nodes...');
  if (!edges.length) console.log(PR, 'WARNING: empty edges array');else console.log(PR, 'updating ' + edges.length + ' edges...');
  if (!comments.length) console.log(PR, 'WARNING: empty comments array');else console.log(PR, 'updating ' + comments.length + ' comments...');
  if (!readby.length) console.log(PR, 'WARNING: empty readby array');else console.log(PR, 'updating ' + readby.length + ' readby...');
  NODES.update(nodes);
  EDGES.update(edges);
  COMMENTS.update(comments);
  READBY.update(readby);
  console.log(PR, 'PKT_UpdateDatabase complete. Disk db file updated.');
  m_db.saveDatabase();
  LOGGER.WriteRLog(pkt.InfoObj(), 'updatedatabase');
  return { OK: true };
};

/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/** API: reset database from scratch
 *  Used to clear the existing database and load new nodes and edges
 *  The equivalent of loading a project -- used to faciliate loading
 *  a project with Turbo360.
 */
DB.PKT_ReplaceDatabase = function (pkt) {
  if (DBG) console.log(PR, 'PKT_ReplaceDatabase');

  var _pkt$Data5 = pkt.Data(),
      _pkt$Data5$nodes = _pkt$Data5.nodes,
      nodes = _pkt$Data5$nodes === undefined ? [] : _pkt$Data5$nodes,
      _pkt$Data5$edges = _pkt$Data5.edges,
      edges = _pkt$Data5$edges === undefined ? [] : _pkt$Data5$edges,
      _pkt$Data5$comments = _pkt$Data5.comments,
      comments = _pkt$Data5$comments === undefined ? [] : _pkt$Data5$comments,
      _pkt$Data5$readby = _pkt$Data5.readby,
      readby = _pkt$Data5$readby === undefined ? [] : _pkt$Data5$readby;

  if (!nodes.length) console.log(PR, 'WARNING: empty nodes array');else console.log(PR, 'setting ' + nodes.length + ' nodes...');
  if (!edges.length) console.log(PR, 'WARNING: empty edges array');else console.log(PR, 'setting ' + edges.length + ' edges...');
  if (!comments.length) console.log(PR, 'WARNING: empty comments array');else console.log(PR, 'setting ' + comments.length + ' comments...');
  if (!readby.length) console.log(PR, 'WARNING: empty readby array');else console.log(PR, 'setting ' + readby.length + ' readby...');

  // Save Backup First!
  m_BackupDatabase();

  NODES.clear();
  NODES.insert(nodes);
  EDGES.clear();
  EDGES.insert(edges);
  COMMENTS.clear();
  COMMENTS.insert(comments);
  READBY.clear();
  READBY.insert(readby);
  m_db.saveDatabase();
  LOGGER.WriteRLog(pkt.InfoObj(), 'replacedatabase');
  return { OK: true };
};
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/// WARN: Side Effect: Changes `m_max_nodeID`
function m_CalculateMaxNodeID() {
  if (NODES.count() > 0) {
    m_max_nodeID = NODES.mapReduce(function (obj) {
      return obj.id;
    }, function (arr) {
      return Math.max.apply(Math, _toConsumableArray(arr));
    });
  } else {
    m_max_nodeID = 0;
  }
  return m_max_nodeID;
}
DB.PKT_CalculateMaxNodeID = function (pkt) {
  if (DBG) console.log(PR, 'PKT_CalculateMaxNodeID ' + pkt.Info());
  return { maxNodeID: m_CalculateMaxNodeID() };
};
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
function m_GetNewNodeID() {
  m_max_nodeID += 1;
  return m_max_nodeID;
}
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
DB.PKT_GetNewNodeID = function (pkt) {
  if (DBG) console.log(PR, 'PKT_GetNewNodeID ' + pkt.Info() + ' nodeID ' + m_max_nodeID);
  return { nodeID: m_GetNewNodeID() };
};
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
DB.PKT_GetNewNodeIDs = function (pkt) {
  var count = Number(pkt.Data().count);
  var firstId = m_max_nodeID + 1;
  var nodeIDs = [];
  for (var i = 0; i < count; i++) {
    nodeIDs.push(firstId + i);
  }m_max_nodeID += count;
  if (DBG) console.log(PR, 'PKT_GetNewNodeIDS ' + pkt.Info() + ' nodeIDs ' + nodeIDs);
  return { nodeIDs: nodeIDs };
};
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
function m_CalculateMaxEdgeID() {
  if (EDGES.count() > 0) {
    m_max_edgeID = EDGES.mapReduce(function (obj) {
      return obj.id;
    }, function (arr) {
      return Math.max.apply(Math, _toConsumableArray(arr));
    });
  } else {
    m_max_edgeID = 0;
  }
  return m_max_edgeID;
}
DB.PKT_CalculateMaxEdgeID = function (pkt) {
  if (DBG) console.log(PR, 'PKT_CalculateMaxEdgeID ' + pkt.Info());
  return { maxEdgeID: m_CalculateMaxEdgeID() };
};
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
function m_GetNewEdgeID() {
  m_max_edgeID += 1;
  return m_max_edgeID;
}
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
DB.PKT_GetNewEdgeID = function (pkt) {
  if (DBG) console.log(PR, 'PKT_GetNewEdgeID ' + pkt.Info() + ' edgeID ' + m_max_edgeID);
  return { edgeID: m_GetNewEdgeID() };
};
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
DB.PKT_GetNewEdgeIDs = function (pkt) {
  var count = Number(pkt.Data().count);
  var firstId = m_max_edgeID + 1;
  var edgeIDs = [];
  for (var i = 0; i < count; i++) {
    edgeIDs.push(firstId + i);
  }m_max_edgeID += count;
  if (DBG) console.log(PR, 'PKT_GetNewEdgeIDs ' + pkt.Info() + ' edgeIDs ' + edgeIDs);
  return { edgeIDs: edgeIDs };
};
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
function m_GetNewCommentID() {
  m_max_commentID += 1;
  return m_max_commentID;
}
DB.PKT_GetNewCommentID = function (pkt) {
  if (DBG) console.log(PR, 'PKT_GetNewCommentID ' + pkt.Info() + ' commentID ' + m_max_commentID);
  return { comment_id: m_GetNewCommentID() };
};
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/// WARN: Side Effect: Changes `m_max_nodeID`
function m_CalculateMaxCommentID() {
  if (COMMENTS.count() > 0) {
    m_max_commentID = COMMENTS.mapReduce(function (obj) {
      return obj.comment_id;
    }, function (arr) {
      return Math.max.apply(Math, _toConsumableArray(arr));
    });
  } else {
    m_max_commentID = 0;
  }
  return m_max_commentID;
}
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
DB.PKT_RequestLockNode = function (pkt) {
  var _pkt$Data6 = pkt.Data(),
      nodeID = _pkt$Data6.nodeID;

  var uaddr = pkt.s_uaddr;
  var errcode = m_IsInvalidNode(nodeID);
  if (errcode) return errcode;
  // check if node is already locked
  if (m_locked_nodes.has(nodeID)) return m_MakeLockError('nodeID ' + nodeID + ' is already locked');
  // SUCCESS
  // single matching node exists and is not yet locked, so lock it
  m_locked_nodes.set(nodeID, uaddr);
  return { nodeID: nodeID, locked: true };
};
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
DB.PKT_RequestUnlockNode = function (pkt) {
  var _pkt$Data7 = pkt.Data(),
      nodeID = _pkt$Data7.nodeID;

  var uaddr = pkt.s_uaddr;
  var errcode = m_IsInvalidNode(nodeID);
  if (errcode) return errcode;
  // check that node is already locked
  if (m_locked_nodes.has(nodeID)) {
    m_locked_nodes.delete(nodeID);
    return { nodeID: nodeID, unlocked: true };
  }
  // this is an error because nodeID wasn't in the lock table
  return m_MakeLockError('nodeID ' + nodeID + ' was not locked so can\'t unlock');
};
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
DB.PKT_IsNodeLocked = function (pkt) {
  var _pkt$Data8 = pkt.Data(),
      nodeID = _pkt$Data8.nodeID;

  var uaddr = pkt.s_uaddr;
  var errcode = m_IsInvalidNode(nodeID);
  if (errcode) return errcode;
  var isLocked = m_locked_nodes.has(nodeID);
  return { nodeID: nodeID, locked: isLocked };
};
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
function m_IsInvalidNode(nodeID) {
  if (!nodeID) return m_MakeLockError('undefined nodeID');
  nodeID = Number.parseInt(nodeID, 10);
  if (isNaN(nodeID)) return m_MakeLockError('nodeID was not a number');
  if (nodeID < 0) return m_MakeLockError('nodeID ' + nodeID + ' must be positive integer');
  if (nodeID > m_max_nodeID) return m_MakeLockError('nodeID ' + nodeID + ' is out of range');
  // find if the node exists
  var matches = NODES.find({ id: nodeID });
  if (matches.length === 0) return m_MakeLockError('nodeID ' + nodeID + ' not found');
  if (matches.length > 1) return m_MakeLockError('nodeID ' + nodeID + ' matches multiple entries...critical error!');
  // no retval is no error!
  return undefined;
}
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
function m_MakeLockError(info) {
  return { NOP: 'ERR', INFO: info };
}
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
DB.PKT_RequestLockEdge = function (pkt) {
  var _pkt$Data9 = pkt.Data(),
      edgeID = _pkt$Data9.edgeID;

  var uaddr = pkt.s_uaddr;
  var errcode = m_IsInvalidEdge(edgeID);
  if (errcode) return errcode;
  // check if edge is already locked
  if (m_locked_edges.has(edgeID)) return m_MakeLockError('edgeID ' + edgeID + ' is already locked');
  // SUCCESS
  // single matching edge exists and is not yet locked, so lock it
  m_locked_edges.set(edgeID, uaddr);
  return { edgeID: edgeID, locked: true };
};
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
DB.PKT_RequestUnlockEdge = function (pkt) {
  var _pkt$Data10 = pkt.Data(),
      edgeID = _pkt$Data10.edgeID;

  var uaddr = pkt.s_uaddr;
  var errcode = m_IsInvalidEdge(edgeID);
  if (errcode) return errcode;
  // check that edge is already locked
  if (m_locked_edges.has(edgeID)) {
    m_locked_edges.delete(edgeID);
    return { edgeID: edgeID, unlocked: true };
  }
  // this is an error because nodeID wasn't in the lock table
  return m_MakeLockError('edgeID ' + edgeID + ' was not locked so can\'t unlock');
};
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
DB.PKT_IsEdgeLocked = function (pkt) {
  var _pkt$Data11 = pkt.Data(),
      edgeID = _pkt$Data11.edgeID;

  var uaddr = pkt.s_uaddr;
  var errcode = m_IsInvalidEdge(edgeID);
  if (errcode) return errcode;
  var isLocked = m_locked_edges.has(edgeID);
  return { edgeID: edgeID, locked: isLocked };
};
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
function m_IsInvalidEdge(edgeID) {
  if (!edgeID) return m_MakeLockError('undefined edgeID');
  edgeID = Number.parseInt(edgeID, 10);
  if (isNaN(edgeID)) return m_MakeLockError('edgeID was not a number');
  if (edgeID < 0) return m_MakeLockError('edgeID ' + edgeID + ' must be positive integer');
  if (edgeID > m_max_edgeID) return m_MakeLockError('edgeID ' + edgeID + ' is out of range');
  // find if the node exists
  var matches = EDGES.find({ id: edgeID });
  if (matches.length === 0) return m_MakeLockError('edgeID ' + edgeID + ' not found');
  if (matches.length > 1) return m_MakeLockError('edgeID ' + edgeID + ' matches multiple entries...critical error!');
  // no retval is no error!
  return undefined;
}
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
DB.PKT_RequestLockComment = function (pkt) {
  var _pkt$Data12 = pkt.Data(),
      commentID = _pkt$Data12.commentID;

  var uaddr = pkt.s_uaddr;
  // check if comment is already locked
  if (m_locked_comments.has(commentID)) return m_MakeLockError('commentID ' + commentID + ' is already locked');
  // SUCCESS
  // single matching comment exists and is not yet locked, so lock it
  m_locked_comments.set(commentID, uaddr);
  return { commentID: commentID, locked: true };
};
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
DB.PKT_RequestUnlockComment = function (pkt) {
  var _pkt$Data13 = pkt.Data(),
      commentID = _pkt$Data13.commentID;

  var uaddr = pkt.s_uaddr;
  // check that comment is already locked
  if (m_locked_comments.has(commentID)) {
    m_locked_comments.delete(commentID);
    return { commentID: commentID, unlocked: true };
  }
  // this is an error because commentID wasn't in the lock table
  return m_MakeLockError('commentID ' + commentID + ' was not locked so can\'t unlock');
};
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
DB.PKT_IsCommentLocked = function (pkt) {
  var _pkt$Data14 = pkt.Data(),
      commentID = _pkt$Data14.commentID;

  var uaddr = pkt.s_uaddr;
  var isLocked = m_locked_comments.has(commentID);
  return { commentID: commentID, locked: isLocked };
};
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
DB.PKT_RequestUnlockAllNodes = function (pkt) {
  m_locked_nodes = new Map();
  return { unlocked: true };
};
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
DB.PKT_RequestUnlockAllEdges = function (pkt) {
  m_locked_edges = new Map();
  return { unlocked: true };
};
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
DB.PKT_RequestUnlockAllComments = function (pkt) {
  m_locked_comments = new Map();
  return { unlocked: true };
};
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
DB.PKT_RequestUnlockAll = function (pkt) {
  m_locked_nodes = new Map();
  m_locked_edges = new Map();
  m_locked_comments = new Map();
  m_open_editors = [];
  return { unlocked: true };
};
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/** called by server-network when a client disconnects we want to unlock any
 *  nodes and edges they had locked. */
DB.RequestUnlock = function (uaddr) {
  m_locked_nodes.forEach(function (value, key) {
    if (value === uaddr) m_locked_nodes.delete(key);
  });
  m_locked_edges.forEach(function (value, key) {
    if (value === uaddr) m_locked_edges.delete(key);
  });
  m_locked_comments.forEach(function (value, key) {
    if (value === uaddr) m_locked_comments.delete(key);
  });
};
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
// eslint-disable-next-line complexity
DB.PKT_Update = function (pkt) {
  var _pkt$Data15 = pkt.Data(),
      node = _pkt$Data15.node,
      edge = _pkt$Data15.edge,
      nodeID = _pkt$Data15.nodeID,
      replacementNodeID = _pkt$Data15.replacementNodeID,
      edgeID = _pkt$Data15.edgeID,
      comment = _pkt$Data15.comment,
      readbys = _pkt$Data15.readbys;

  var retval = {};
  // PROCESS NODE INSERT/UPDATE
  if (node) {
    m_CleanObjID(pkt.Info() + ' node.id', node);
    var matches = NODES.find({ id: node.id });
    if (matches.length === 0) {
      // if there was no node, then this is an insert new operation
      if (DBG) console.log(PR, 'PKT_Update ' + pkt.Info() + ' INSERT nodeID ' + JSON.stringify(node));

      // Handle different id types
      if (isNaN(node.id)) {
        // If the node id has NOT been defined, generate a new node id
        node.id = m_GetNewNodeID();
      }

      LOGGER.WriteRLog(pkt.InfoObj(), 'insert node', node.id, JSON.stringify(node));
      DB.AppendNodeLog(node, pkt); // log GroupId to node stored in database
      NODES.insert(node);
      // Return the updated record -- needed to update metadata
      var updatedNode = NODES.findOne({ id: node.id });
      if (!updatedNode) console.log(PR, 'PKT_Update ' + pkt.Info() + ' could not find node after update!  This should not happen! ' + node.id + ' ' + JSON.stringify(node));
      retval = { op: 'insert', node: updatedNode };
    } else if (matches.length === 1) {
      // there was one match to update
      NODES.findAndUpdate({ id: node.id }, function (n) {
        if (DBG) console.log(PR, 'PKT_Update ' + pkt.Info() + ' UPDATE nodeID ' + node.id + ' ' + JSON.stringify(node));
        LOGGER.WriteRLog(pkt.InfoObj(), 'update node', node.id, JSON.stringify(node));
        DB.AppendNodeLog(n, pkt); // log GroupId to node stored in database
        Object.assign(n, node);
      });
      // Return the updated record -- needed to update metadata
      var _updatedNode = NODES.findOne({ id: node.id });
      if (!_updatedNode) console.log(PR, 'PKT_Update ' + pkt.Info() + ' could not find node after update!  This should not happen! ' + node.id + ' ' + JSON.stringify(node));
      retval = { op: 'update', node: _updatedNode };
    } else {
      if (DBG) console.log(PR, 'WARNING: multiple nodeID ' + node.id + ' x' + matches.length);
      LOGGER.WriteRLog(pkt.InfoObj(), 'ERROR', node.id, 'duplicate node id');
      retval = { op: 'error-multinodeid' };
    }
    // Always update m_max_nodeID
    m_CalculateMaxNodeID();
    return retval;
  } // if node

  // PROCESS EDGE INSERT/UPDATE
  if (edge) {
    m_CleanObjID(pkt.Info() + ' edge.id', edge);
    var _matches = EDGES.find({ id: edge.id });
    if (_matches.length === 0) {
      // this is a new edge
      if (DBG) console.log(PR, 'PKT_Update ' + pkt.Info() + ' INSERT edgeID ' + edge.id + ' ' + JSON.stringify(edge));

      // Handle different id types
      if (isNaN(edge.id)) {
        // If the edge id has NOT been defined, generate a new edge id
        edge.id = m_GetNewEdgeID();
      }

      LOGGER.WriteRLog(pkt.InfoObj(), 'insert edge', edge.id, JSON.stringify(edge));
      DB.AppendEdgeLog(edge, pkt); // log GroupId to edge stored in database
      EDGES.insert(edge);
      // Return the updated record -- needed to update metadata
      var updatedEdge = EDGES.findOne({ id: edge.id });
      if (!updatedEdge) console.log(PR, 'PKT_Update ' + pkt.Info() + ' could not find edge after update!  This should not happen! ' + edge.id + ' ' + JSON.stringify(edge));
      retval = { op: 'insert', edge: updatedEdge };
    } else if (_matches.length === 1) {
      // update this edge
      EDGES.findAndUpdate({ id: edge.id }, function (e) {
        if (DBG) console.log(PR, 'PKT_Update ' + pkt.SourceGroupID() + ' UPDATE edgeID ' + edge.id + ' ' + JSON.stringify(edge));
        LOGGER.WriteRLog(pkt.InfoObj(), 'update edge', edge.id, JSON.stringify(edge));
        DB.AppendEdgeLog(e, pkt); // log GroupId to edge stored in database
        Object.assign(e, edge);
      });
      // Return the updated record -- needed to update metadata
      var _updatedEdge = EDGES.findOne({ id: edge.id });
      if (!_updatedEdge) console.log(PR, 'PKT_Update ' + pkt.Info() + ' could not find edge after update!  This should not happen! ' + edge.id + ' ' + JSON.stringify(edge));
      retval = { op: 'update', edge: _updatedEdge };
    } else {
      console.log(PR, 'WARNING: multiple edgeID ' + edge.id + ' x' + _matches.length);
      LOGGER.WriteRLog(pkt.InfoObj(), 'ERROR', node.id, 'duplicate edge id');
      retval = { op: 'error-multiedgeid' };
    }
    // Always update m_max_edgeID
    m_CalculateMaxEdgeID();
    return retval;
  } // if edge

  // DELETE NODE
  if (nodeID !== undefined) {
    nodeID = m_CleanID(pkt.Info() + ' nodeID', nodeID);
    if (DBG) console.log(PR, 'PKT_Update ' + pkt.Info() + ' DELETE nodeID ' + nodeID);
    // Log first so it's apparent what is triggering the edge changes
    LOGGER.WriteRLog(pkt.InfoObj(), 'delete node', nodeID);

    // handle edges
    var edgesToProcess = EDGES.where(function (e) {
      return e.source === nodeID || e.target === nodeID;
    });

    // handle linked nodes
    replacementNodeID = m_CleanID(pkt.Info() + ' replacementNodeID', replacementNodeID);
    if (replacementNodeID !== -1) {
      // re-link edges to replacementNodeID...
      EDGES.findAndUpdate({ source: nodeID }, function (e) {
        LOGGER.WriteRLog(pkt.InfoObj(), 'relinking edge', e.id, 'to', replacementNodeID);
        e.source = replacementNodeID;
      });
      EDGES.findAndUpdate({ target: nodeID }, function (e) {
        LOGGER.WriteRLog(pkt.InfoObj(), 'relinking edge', e.id, 'to', replacementNodeID);
        e.target = replacementNodeID;
      });
    } else {
      // ... or delete edges completely
      var sourceEdges = EDGES.find({ source: nodeID });
      EDGES.findAndRemove({ source: nodeID });
      if (sourceEdges.length) LOGGER.WriteRLog(pkt.InfoObj(), 'deleting ' + sourceEdges.length + ' sources matching ' + nodeID);
      var targetEdges = EDGES.find({ target: nodeID });
      EDGES.findAndRemove({ target: nodeID });
      if (targetEdges.length) LOGGER.WriteRLog(pkt.InfoObj(), 'deleting ' + targetEdges.length + ' targets matching ' + nodeID);
    }
    // ...finally remove the node itself
    NODES.findAndRemove({ id: nodeID });
    return { op: 'delete', nodeID: nodeID, replacementNodeID: replacementNodeID };
  }

  // DELETE EDGES
  if (edgeID !== undefined) {
    edgeID = m_CleanID(pkt.Info() + ' edgeID', edgeID);
    if (DBG) console.log(PR, 'PKT_Update ' + pkt.Info() + ' DELETE edgeID ' + edgeID);
    LOGGER.WriteRLog(pkt.InfoObj(), 'delete edge', edgeID);
    EDGES.findAndRemove({ id: edgeID });
    return { op: 'delete', edgeID: edgeID };
  }

  // PROCESS COMMENT INSERT/UPDATE
  if (comment) {
    m_CleanObjID(pkt.Info() + ' comment.id', comment);
    var _matches2 = COMMENTS.find({ comment_id: comment.comment_id });
    if (_matches2.length === 0) {
      // if there was no comment, then this is an insert new operation
      if (DBG) console.log(PR, 'PKT_Update ' + pkt.Info() + ' INSERT comment_id ' + JSON.stringify(comment));

      // Handle different id types
      if (isNaN(comment.comment_id)) {
        // If the node id has NOT been defined, generate a new node id
        comment.comment_id = m_GetNewCommentID();
      }

      LOGGER.WriteRLog(pkt.InfoObj(), 'insert comment', comment.comment_id, JSON.stringify(comment));
      DB.AppendCommentLog(comment, pkt); // log GroupId to node stored in database
      COMMENTS.insert(comment);
      // Return the updated record -- needed to update metadata
      var updatedComment = COMMENTS.findOne({ comment_id: comment.comment_id });
      if (!updatedComment) console.log(PR, 'PKT_Update ' + pkt.Info() + ' could not find new comment after update!  This should not happen! ' + comment.comment_id + ' ' + JSON.stringify(comment));
      retval = { op: 'insert', comment: updatedComment };
    } else if (_matches2.length === 1) {
      // there was one match to, so update the comment
      COMMENTS.findAndUpdate({ comment_id: comment.comment_id }, function (c) {
        if (DBG) console.log(PR, 'PKT_Update ' + pkt.Info() + ' UPDATE comment_id ' + comment.comment_id + ' ' + JSON.stringify(comment));
        LOGGER.WriteRLog(pkt.InfoObj(), 'update comment', comment.comment_id, JSON.stringify(comment));
        DB.AppendCommentLog(c, pkt); // log GroupId to node stored in database
        Object.assign(c, comment);
      });
      // Return the updated record -- needed to update metadata

      var _updatedComment = COMMENTS.findOne({ comment_id: comment.comment_id });
      if (!_updatedComment) console.log(PR, 'PKT_Update ' + pkt.Info() + ' could not find updated comment after update!  This should not happen! ' + comment.comment_id + ' ' + JSON.stringify(comment));
      retval = { op: 'update', comment: _updatedComment };
    } else {
      if (DBG) console.log(PR, 'WARNING: multiple comment_id ' + comment.comment_id + ' x' + _matches2.length);
      LOGGER.WriteRLog(pkt.InfoObj(), 'ERROR', comment.comment_id, 'duplicate comment id');
      retval = { op: 'error-multinodeid' };
    }
    return retval;
  } // if comment

  // PROCESS READBY INSERT/UPDATE
  // NOTE this is a little different than the others because `readbys` is an array of readby objects.
  if (readbys) {
    var retvals = [];
    readbys.forEach(function (readby) {
      m_CleanObjID(pkt.Info() + ' readby.id', readby);
      var matches = READBY.find({ comment_id: readby.comment_id });
      if (matches.length === 0) {
        // if there was no readby, then this is an insert new operation
        if (DBG) console.log(PR, 'PKT_Update ' + pkt.Info() + ' INSERT comment_id ' + JSON.stringify(readby));

        // Handle different id types
        if (isNaN(readby.comment_id)) {
          // If the node id has NOT been defined, generate a new node id
          throw new Error('server-database.PKT_Update called with invalid comment_id ' + JSON.stringify(readby) + '. This should not happen.');
        }

        LOGGER.WriteRLog(pkt.InfoObj(), 'insert readby', readby.comment_id, JSON.stringify(readby));
        DB.AppendReadbyLog(readby, pkt); // log GroupId to node stored in database
        READBY.insert(readby);
        // Return the updated record -- needed to update metadata
        var updatedReadby = READBY.findOne({ comment_id: readby.comment_id });
        if (!updatedReadby) console.log(PR, 'PKT_Update ' + pkt.Info() + ' could not find new readby after update!  This should not happen! ' + readby.comment_id + ' ' + JSON.stringify(readby));
        retval = { op: 'insert', readby: updatedReadby };
      } else if (matches.length === 1) {
        // there was one match to, so update the comment
        READBY.findAndUpdate({ comment_id: readby.comment_id }, function (r) {
          if (DBG) console.log(PR, 'PKT_Update ' + pkt.Info() + ' UPDATE comment_id ' + readby.comment_id + ' ' + JSON.stringify(readby));
          LOGGER.WriteRLog(pkt.InfoObj(), 'update readby', readby.comment_id, JSON.stringify(readby));
          DB.AppendReadbyLog(r, pkt); // log GroupId to node stored in database
          Object.assign(r, readby);
        });
        // Return the updated record -- needed to update metadata

        var _updatedReadby = READBY.findOne({ comment_id: readby.comment_id });
        if (!_updatedReadby) console.log(PR, 'PKT_Update ' + pkt.Info() + ' could not find updated readby after update!  This should not happen! ' + readby.comment_id + ' ' + JSON.stringify(readby));
        retval = { op: 'update', readby: _updatedReadby };
      } else {
        if (DBG) console.log(PR, 'WARNING: multiple comment_id ' + readby.comment_id + ' x' + matches.length);
        LOGGER.WriteRLog(pkt.InfoObj(), 'ERROR', readby.comment_id, 'duplicate comment id');
        retval = { op: 'error-multinodeid' };
      }
      // NOTE returns an array of retvals for multiple replies
      retvals.push(retval);
    });
    return retvals;
  } // if readby

  // return update value
  return { op: 'error-noaction' };
};
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/** NOTE: Unlike PKT_Update, the return value is an array with multiple
 *  results */
DB.PKT_BatchUpdate = function (pkt) {
  var _pkt$Data16 = pkt.Data(),
      items = _pkt$Data16.items;

  var retvals = [];
  items.forEach(function (item) {
    var comment = item.comment,
        commentID = item.commentID,
        collection_ref = item.collection_ref;
    // PROCESS COMMENT INSERT/UPDATE

    if (comment) retvals.push(m_CommentUpdate(comment, pkt));
    // DELETE SINGLE COMMENT
    if (commentID !== undefined) retvals.push(m_CommentRemove(commentID, pkt));
    // Trigger derived value update after removal
    if (collection_ref) retvals.push({ op: 'refresh', collection_ref: collection_ref });
  });
  return retvals;
};
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
function m_CommentUpdate(comment, pkt) {
  m_CleanObjID(pkt.Info() + ' comment.id', comment);
  var matches = COMMENTS.find({ comment_id: comment.comment_id });
  if (matches.length === 0) {
    // if there was no comment, then this is an insert new operation
    if (DBG) console.log(PR, 'PKT_Update ' + pkt.Info() + ' INSERT comment_id ' + JSON.stringify(comment));
    // Handle different id types
    if (isNaN(comment.comment_id)) {
      // If the comment id has NOT been defined, generate a new comment id
      comment.comment_id = m_GetNewCommentID();
    }
    LOGGER.WriteRLog(pkt.InfoObj(), 'insert comment', comment.comment_id, JSON.stringify(comment));
    DB.AppendCommentLog(comment, pkt); // log GroupId to node stored in database
    COMMENTS.insert(comment);
    // Return the updated record -- needed to update metadata
    var updatedComment = COMMENTS.findOne({ comment_id: comment.comment_id });
    if (!updatedComment) console.log(PR, 'PKT_Update ' + pkt.Info() + ' could not find new comment after update!  This should not happen! ' + comment.comment_id + ' ' + JSON.stringify(comment));
    retval = { op: 'insert', comment: updatedComment };
  } else if (matches.length === 1) {
    // there was one match to, so update the comment
    COMMENTS.findAndUpdate({ comment_id: comment.comment_id }, function (c) {
      if (DBG) console.log(PR, 'PKT_Update ' + pkt.Info() + ' UPDATE comment_id ' + comment.comment_id + ' ' + JSON.stringify(comment));
      LOGGER.WriteRLog(pkt.InfoObj(), 'update comment', comment.comment_id, JSON.stringify(comment));
      DB.AppendCommentLog(c, pkt); // log GroupId to node stored in database
      Object.assign(c, comment);
    });
    // Return the updated record -- needed to update metadata

    var _updatedComment2 = COMMENTS.findOne({ comment_id: comment.comment_id });
    if (!_updatedComment2) console.log(PR, 'PKT_Update ' + pkt.Info() + ' could not find updated comment after update!  This should not happen! ' + comment.comment_id + ' ' + JSON.stringify(comment));
    retval = { op: 'update', comment: _updatedComment2 };
  } else {
    if (DBG) console.log(PR, 'WARNING: multiple comment_id ' + comment.comment_id + ' x' + matches.length);
    LOGGER.WriteRLog(pkt.InfoObj(), 'ERROR', comment.comment_id, 'duplicate comment id');
    retval = { op: 'error-multinodeid' };
  }
  return retval;
} // if comment
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
function m_CommentRemove(commentID, pkt) {
  if (DBG) console.log(PR, 'PKT_Update ' + pkt.Info() + ' DELETE commentID ' + commentID);
  // Log first so it's apparent what is triggering the changes
  LOGGER.WriteRLog(pkt.InfoObj(), 'delete comment', commentID);
  COMMENTS.findAndRemove({ comment_id: commentID });
  return { op: 'delete', commentID: commentID };
}

/// NODE ANNOTATION ///////////////////////////////////////////////////////////
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/** write/remove packet SourceGroupID() information into the node before writing
 *  the first entry is the insert, subsequent operations are updates */
DB.AppendNodeLog = function (node, pkt) {
  if (!node._nlog) node._nlog = [];
  var gid = pkt.SourceGroupID() || pkt.SourceAddress();
  node._nlog.push(gid);
  if (DBG) {
    var out = '';
    node._nlog.forEach(function (el) {
      out += '[' + el + '] ';
    });
    console.log(PR, 'nodelog', out);
  }
};
DB.FilterNodeLog = function (node) {
  var newNode = Object.assign({}, node);
  Reflect.deleteProperty(newNode, '_nlog');
  return newNode;
};

/// EDGE ANNOTATION ///////////////////////////////////////////////////////////
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/** write/remove packet SourceGroupID() information into the node before writing
 *  the first entry is the insert, subsequent operations are updates */
DB.AppendEdgeLog = function (edge, pkt) {
  if (!edge._elog) edge._elog = [];
  var gid = pkt.SourceGroupID() || pkt.SourceAddress();
  edge._elog.push(gid);
  if (DBG) {
    var out = '';
    edge._elog.forEach(function (el) {
      out += '[' + el + '] ';
    });
    console.log(PR, 'edgelog', out);
  }
};
DB.FilterEdgeLog = function (edge) {
  var newEdge = Object.assign({}, edge);
  Reflect.deleteProperty(newEdge, '_elog');
  return newEdge;
};
/// COMMENT ANNOTATION ////////////////////////////////////////////////////////
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/** write/remove packet SourceGroupID() information into the comment before writing
 *  the first entry is the insert, subsequent operations are updates */
DB.AppendCommentLog = function (comment, pkt) {
  if (!comment._nlog) comment._nlog = [];
  var gid = pkt.SourceGroupID() || pkt.SourceAddress();
  comment._nlog.push(gid);
  if (DBG) {
    var out = '';
    comment._nlog.forEach(function (el) {
      out += '[' + el + '] ';
    });
    console.log(PR, 'commentlog', out);
  }
};
DB.FilterCommentLog = function (comment) {
  var newComment = Object.assign({}, comment);
  Reflect.deleteProperty(newComment, '_nlog');
  return newComment;
};
/// READBY ANNOTATION ////////////////////////////////////////////////////////
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/** write/remove packet SourceGroupID() information into the readby before writing
 *  the first entry is the insert, subsequent operations are updates */
DB.AppendReadbyLog = function (readby, pkt) {
  if (!readby._nlog) readby._nlog = [];
  var gid = pkt.SourceGroupID() || pkt.SourceAddress();
  readby._nlog.push(gid);
  if (DBG) {
    var out = '';
    readby._nlog.forEach(function (el) {
      out += '[' + el + '] ';
    });
    console.log(PR, 'readbylog', out);
  }
};
DB.FilterReadbyLog = function (readby) {
  var newReadby = Object.assign({}, readby);
  Reflect.deleteProperty(newReadby, '_nlog');
  return newReadby;
};

/// JSON EXPORT ///////////////////////////////////////////////////////////////
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/** called by brunch to generate an up-to-date JSON file to path.
 *  creates the path if it doesn't exist */
DB.WriteDbJSON = function (filePath) {
  var dataset = NC_CONFIG.dataset;

  // Ideally we should use m_otions value, but in standlone mode,
  // m_options might not be defined.
  db_file = m_options ? m_options.db_file : m_GetValidDBFilePath(dataset);
  var db = new Loki(db_file, {
    autoload: true,
    autoloadCallback: function autoloadCallback() {
      if (typeof filePath === 'string') {
        if (DBG) console.log(PR, 'writing { nodes, edges } to \'' + filePath + '\'');
        var nodes = db.getCollection('nodes').chain().data({ removeMeta: false });
        var edges = db.getCollection('edges').chain().data({ removeMeta: false });
        var comments = db.getCollection('comments').chain().data({ removeMeta: false });
        var readby = db.getCollection('readby').chain().data({ removeMeta: false });
        var data = { nodes: nodes, edges: edges, comments: comments, readby: readby };
        var json = JSON.stringify(data);
        if (DBG) console.log(PR, 'ensuring DIR ' + PATH.dirname(filePath));
        FS.ensureDirSync(PATH.dirname(filePath));
        if (DBG) console.log(PR, 'writing file ' + filePath);
        FS.writeFileSync(filePath, json);
        console.log(PR, '*** WROTE JSON DATABASE ' + filePath);
      } else {
        console.log(PR, 'ERR path ' + filePath + ' must be a pathname');
      }
    }
  });
};
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/** called by Template Editor and DB.WriteTemplateTOML
 */
function m_GetTemplateTOMLFileName() {
  return NC_CONFIG.dataset + TEMPLATE_EXT;
}
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
function m_GetTemplateTOMLFilePath() {
  return RUNTIMEPATH + m_GetTemplateTOMLFileName();
}
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
DB.GetTemplateTOMLFileName = function () {
  return { filename: m_GetTemplateTOMLFileName() };
};
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/** called by Template Editor to save TOML template changes to disk.
 *  @param {object} pkt.data.template
 *  @param pkt.data.path  Will override the current template path in NC_CONFIG.dataset
 *                        Use this to write to the _default template or
 *                        other specific template.
 *  WARN: Loads the template after saving!
 */
DB.WriteTemplateTOML = function (pkt) {
  if (pkt.data === undefined) throw 'DB.WriteTemplateTOML pkt received with no `data`';
  var templateFilePath = pkt.data.path || m_GetTemplateTOMLFilePath();
  FS.ensureDirSync(PATH.dirname(templateFilePath));
  // Does the template exist?  If so, rename the old version with curren timestamp.
  if (FS.existsSync(templateFilePath)) {
    var timestamp = new Date().toISOString().replace(/:/g, '.');
    var backupFilePath = RUNTIMEPATH + NC_CONFIG.dataset + '_' + timestamp + TEMPLATE_EXT;
    FS.copySync(templateFilePath, backupFilePath);
    console.log(PR, 'Backed up template to', backupFilePath);
  }
  var toml = TOML.stringify(pkt.data.template);
  return FS.outputFile(templateFilePath, toml).then(function (data) {
    console.log(PR, 'Saved template to', templateFilePath);
    // reload template
    m_LoadTemplate();
    return { OK: true, info: templateFilePath };
  }).catch(function (err) {
    console.log(PR, 'Failed trying to save', templateFilePath, err);
    return { OK: false, info: 'Failed trying to save', templateFilePath: templateFilePath };
  });
};
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/** Clones the existing toml template
    called by brunch to generate an up-to-date Template file to path
    for standalone mode.
    creates the path if it doesn't exist
 */
DB.CloneTemplateTOML = function (filePath) {
  var TOMLPath = m_GetTemplateTOMLFilePath();
  FS.ensureDirSync(PATH.dirname(TOMLPath));
  // Does the template exist?
  if (!FS.existsSync(TOMLPath)) {
    console.error(PR, 'ERR could not find template ' + TOMLPath);
  } else {
    FS.copySync(TOMLPath, filePath);
    console.log(PR, '*** COPIED TEMPLATE ' + TOMLPath + ' to ' + filePath);
  }
};
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/** Regenerate Default Template from Template Schema
    Call this when `template-schema.js` changes so that _default.template.toml will
    match the schema defined in `template-schema.js`.
    Use JSCLI `ncRegenerateDefaultTemplate` in the dev console to call this.
 */
DB.RegenerateDefaultTemplate = function () {
  var pkt = {
    data: {
      template: TEMPLATE_SCHEMA.ParseTemplateSchema(),
      path: m_DefaultTemplatePath()
    }
  };
  var toml = TOML.stringify(pkt.data.template);
  return DB.WriteTemplateTOML(pkt);
};

/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/*/ OPENEDITORS

    Used to coordinate Template editing, Importing, and Node/Edge editing.
    They are mutually exclusive: if one is active, the others should be disabled
    to prevent overwriting data.

    Since Nodes and Edges should not be edited while the Template is being
    edited or data is being imported, any editor that is opened registers
    as an OPENEDITOR.  The UI will also pre-emptively disable edit buttons
    whenever the open editors have been updated via a broacast of the
    `EDIT_PERMISSIONS_UPDATE` message by server.js.

    * When a Template editor is open, "Import", "Node Edit", "Edge Edit",
      "Add New Node", and "Add New Edge" buttons are all disabled.
    * When an Import file has been successfully selected and validated,
      "Template", "Node Edit", "Edge Edit", "Add New Node", and
      "Add New Edge" buttons are disabled.
    * When "Node Edit", "Edge Edit", "Add New Node" or "Add New Edge" has
      been triggered, the Template buttons on the Template panel and the
      "Import" pane on the "More" panel are disabled.

    m_open_editors is an array of all the editors (node, edge, template,
    importer) that are currently open.

    Whenever a template is being edited, import is requested, or a node or
    edge is being edited:
    1. They will register with `RequestEditLock`.
    2. When they are finished, they will deregister using `ReleaseEditLock`.
    3. `GetEditStatus` returns the current state of `m_open_editors`.

    UI elements query `GetEditStatus` to figure out what they should
    enable or disable.

    UI elements should also listen to `EDIT_PERMISSIONS_UPDATE` to
    enable or disable elements.

    Note that multiple `node` and `edge` editors can be open at the same
    time and ALL must be closed before the lock is released.  We support
    this because each node or edge will have its own entry in m_open_editors,
    though we do not distinguish between the individual nodes/edges.

    Note that this is a different system from the instance-specific Node/Edge
    lock that locks out individual node/edge objects for editing used with
    `PKT_RequestLockNode` and `PKT_RequestLockEdge`.  m_open_editors focuses
    on categories of editor types rather than locking out individual nodes
    and edges to prevent others from editing the same node or edge.

/*/
/**
 * Returns object with flags indicating whether the template is being edited,
 * data is being imported, or node or edge are being edited
 * @returns {templateBeingEdited:boolean, importActive:boolean, nodeOrEdgeBeingEdited:boolean,
 *           lockedNodes:array, lockedEdges:array }
 */
DB.GetEditStatus = function (pkt) {
  var my_uaddr = pkt.s_uaddr;
  // If there are any 'template' open editors, then templateBeingEdited is true
  var templateBeingEdited = m_open_editors.includes(EDITORTYPE.TEMPLATE);
  // If there are any 'importers' open editors, then importActive is true
  var importActive = m_open_editors.includes(EDITORTYPE.IMPORTER);
  // If there are any 'node' or 'edge' open editors, then nodeOrEdgeBeingEdited is true
  var nodeOrEdgeBeingEdited = m_open_editors.length > 0 && (m_open_editors.includes(EDITORTYPE.NODE) || m_open_editors.includes(EDITORTYPE.EDGE));
  // NOT IMPLEMENTED
  // -- This is now problematic with the new optimized state management because
  //    editStatus is being broadcast to ALL clients, not just the one editing
  // Was Used to disable local editing if a comment is being edited, but ignores network comment edits
  // const commentBeingEditedByMe =
  //   [...m_locked_comments.values()].find(
  //     comment_uaddr => comment_uaddr === my_uaddr
  //   ) || false; // returns `false` if not found -- necessary otherwise `commentBeingEditedByMe` is removed and not updated
  return {
    templateBeingEdited: templateBeingEdited,
    importActive: importActive,
    nodeOrEdgeBeingEdited: nodeOrEdgeBeingEdited,
    // commentBeingEditedByMe, // NOT IMPLEMENTED
    lockedNodes: [].concat(_toConsumableArray(m_locked_nodes.keys())),
    lockedEdges: [].concat(_toConsumableArray(m_locked_edges.keys())),
    lockedComments: [].concat(_toConsumableArray(m_locked_comments.keys()))
  };
};
/**
 * Register a template, import, node or edge as being actively edited.
 * @param {Object} pkt
 * @param {string} pkt.editor - 'template', 'importer', 'node', 'edge', or 'comment'
 * @returns { templateBeingEdited: boolean, importActive: boolean, nodeOrEdgeBeingEdited: boolean, commentBeingEdited: boolean }
 */
DB.RequestEditLock = function (pkt) {
  m_open_editors.push(pkt.Data().editor);
  return DB.GetEditStatus(pkt);
};
/**
 * Deregister a template, import, node or edge as being actively edited.
 * @param {Object} pkt
 * @param {string} pkt.editor - 'template', 'importer', 'node', 'edge', or 'comment'
 * @returns { templateBeingEdited: boolean, importActive: boolean, nodeOrEdgeBeingEdited: boolean, commentBeingEdited: boolean }
 */
DB.ReleaseEditLock = function (pkt) {
  var i = m_open_editors.findIndex(function (e) {
    return e === pkt.Data().editor;
  });
  if (i > -1) m_open_editors.splice(i, 1);
  return DB.GetEditStatus(pkt);
};

/// UTILITIES FOR LOADING DATA ///

/** Migrates old network data to new formats based on the template defintion.
 *  This will automatically migrate any field/property that is marked `isRequired`
 *  and has a `defaultValue` defined.
 *
 *  The basic check is this:
 *  1. If the TEMPLATE property `isRequired`
 *  2. ...and the TEMPLATE propert has `defaultValue` defined
 *  2. ...and the node/edge property is currently undefined or ``
 *  3. ...then we set the property to the defaultValue
 *
 *  The key parameters:
 *    property.isRequired
 *    property.defaultValue
 *
 *  If `isRequired` or `defaultValue` is not defined on the property, we skip migration.
 *
 *  REVIEW: We might consider also adding type coercion. */
function m_MigrateNodes(nodes) {
  var _loop = function _loop(propertyName, property) {
    if (property.isRequired && property.defaultValue !== undefined) {
      nodes.forEach(function (n) {
        if (n[propertyName] === undefined || n[propertyName] === '') n[propertyName] = property.defaultValue;
      });
    }
  };

  // modifies `nodes` by reference
  var _iteratorNormalCompletion = true;
  var _didIteratorError = false;
  var _iteratorError = undefined;

  try {
    for (var _iterator = Object.entries(TEMPLATE.nodeDefs)[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
      var _ref3 = _step.value;

      var _ref4 = _slicedToArray(_ref3, 2);

      var propertyName = _ref4[0];
      var property = _ref4[1];

      _loop(propertyName, property);
    }
  } catch (err) {
    _didIteratorError = true;
    _iteratorError = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion && _iterator.return) {
        _iterator.return();
      }
    } finally {
      if (_didIteratorError) {
        throw _iteratorError;
      }
    }
  }
}
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
function m_MigrateEdges(edges) {
  var _loop2 = function _loop2(propertyName, property) {
    if (property.isRequired && property.defaultValue !== undefined) {
      edges.forEach(function (e) {
        if (e[propertyName] === undefined || e[propertyName] === '') e[propertyName] = property.defaultValue;
      });
    }
  };

  // modifies `edges` by reference
  var _iteratorNormalCompletion2 = true;
  var _didIteratorError2 = false;
  var _iteratorError2 = undefined;

  try {
    for (var _iterator2 = Object.entries(TEMPLATE.edgeDefs)[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
      var _ref5 = _step2.value;

      var _ref6 = _slicedToArray(_ref5, 2);

      var propertyName = _ref6[0];
      var property = _ref6[1];

      _loop2(propertyName, property);
    }
  } catch (err) {
    _didIteratorError2 = true;
    _iteratorError2 = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion2 && _iterator2.return) {
        _iterator2.return();
      }
    } finally {
      if (_didIteratorError2) {
        throw _iteratorError2;
      }
    }
  }
}
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/// utility function for cleaning nodes with numeric id property
function m_CleanObjID(prompt, obj) {
  if (typeof obj.id === 'string') {
    var int = parseInt(obj.id, 10);
    LOGGER.WriteRLog({}, PR, '! ' + prompt + ' "' + obj.id + '" is string; converting to ' + int);
    obj.id = int;
  }
  return obj;
}
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
function m_CleanEdgeEndpoints(prompt, edge) {
  if (typeof edge.source === 'string') {
    var int = parseInt(edge.source, 10);
    LOGGER.WriteRLog({}, PR, '  edge ' + prompt + ' source "' + edge.source + '" is string; converting to ' + int);
    edge.source = int;
  }
  if (typeof edge.target === 'string') {
    var _int = parseInt(edge.target, 10);
    LOGGER.WriteRLog({}, PR, '  edge ' + prompt + ' target "' + edge.target + '" is string; converting to ' + _int);
    edge.target = _int;
  }
  return edge;
}
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
function m_CleanID(prompt, id) {
  if (typeof id === 'string') {
    var int = parseInt(id, 10);
    LOGGER.WriteRLog({}, PR, '! ' + prompt + ' "' + id + '" is string; converting to number ' + int);
    id = int;
  }
  return id;
}
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/// utility function for getting a valid file path
function m_GetValidDBFilePath(dataset) {
  // validate dataset name
  var regex = /^([A-z0-9-_+./])*$/; // Allow _ - + . /, so nested pathways are allowed
  if (!regex.test(dataset)) {
    console.error(PR, 'Trying to initialize database with bad dataset name: ' + dataset);
  }

  return RUNTIMEPATH + dataset + '.loki';
}

/// EXPORT MODULE DEFINITION //////////////////////////////////////////////////
/// = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
module.exports = DB;
});

require.register("unisys/server-logger.js", function(exports, require, module) {
'use strict';

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

/*//////////////////////////////// ABOUT \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\*\

  LOGGER - WIP
  porting PLAE logger for now to get it minimally working

  SUPER UGLY PORT WILL CLEAN UP LATER AVERT YOUR EYES OMG

\*\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ * //////////////////////////////////////*/

/* eslint-disable newline-per-chained-call */
/* eslint-disable nonblock-statement-body-position */

/* added for pull request #81 so 'npm run lint' test appears clean */
/* eslint-disable no-unused-vars */

var PATH = require('path');
var FSE = require('fs-extra');
///
var NC_CONFIG = require('../../app-config/netcreate-config');

/// CONSTANTS & DECLARATIONS //////////////////////////////////////////////////
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
var DBG = false;
var PROMPTS = require('../system/util/prompts');
var PR = PROMPTS.Pad('SRV-LOG');

/// MODULE-WIDE VARS //////////////////////////////////////////////////////////
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
var LOG_DIR = '../../runtime/logs';
var Tracer = require('tracer');
var LOG_DELIMITER = '\t';
var LOG_CONFIG = {
  format: '{{line}}  {{message}}',
  dateformat: 'HH:MM:ss.L',
  preprocess: function preprocess(data) {
    data.line = 'C ' + Number(data.line).zeroPad(4);
  }
};
var LOGGER = Tracer.colorConsole(LOG_CONFIG);
var fs_log = null;
// enums for outputing dates
var e_weekday = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];

/// RUNTIME INITIALIZATION ////////////////////////////////////////////////////
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/// initialize event logger
var dir = PATH.resolve(PATH.join(__dirname, LOG_DIR));
FSE.ensureDir(dir, function (err) {
  if (err) throw new Error('could not make ' + dir + ' directory');
  var logname = str_TimeDatedFilename('log') + '.txt';
  var pathname = dir + '/' + logname;
  fs_log = FSE.createWriteStream(pathname);

  // Show Research Log Field Names
  var fieldnames = ['Date', 'Time', 'NetName', 'Addr', 'Token', 'Action', 'DataID', 'DataDetail'];
  var fields = fieldnames.join(LOG_DELIMITER);
  fields += '\n';
  fs_log.write(fields);

  LogResearchLine({}, 'NETCREATE APPSERVER SESSION LOG for ' + str_DateStamp() + ' ' + str_TimeStamp());
  LogResearchLine({}, '---');
});

/// LOGGING FUNCTIONS /////////////////////////////////////////////////////////
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/** Log a standard system log message
 */
function LogLine() {
  if (!fs_log) return;

  var out = str_ShortDateStamp() + LOG_DELIMITER;
  out += str_TimeStamp() + LOG_DELIMITER;
  out += NC_CONFIG.dataset + LOG_DELIMITER;

  for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
    args[_key] = arguments[_key];
  }

  var c = args.length;
  // arguments are delimited
  if (c) {
    for (var i = 0; i < c; i++) {
      if (i > 0) out += LOG_DELIMITER;
      out += args[i];
    }
  }
  out += '\n';
  fs_log.write(out);
}

/** Log a standard structured log message for research
 *  Guarantees a predictable column order with
 *    date, time, network, uaddr, group
 */
function LogResearchLine() {
  var info = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : { uaddr: '', group: '' };

  if (!fs_log) return;

  var out = str_ShortDateStamp() + LOG_DELIMITER;
  out += str_TimeStamp() + LOG_DELIMITER;
  out += NC_CONFIG.dataset + LOG_DELIMITER;
  out += (info.uaddr || '-') + LOG_DELIMITER;
  out += (info.group || '-') + LOG_DELIMITER;

  for (var _len2 = arguments.length, args = Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
    args[_key2 - 1] = arguments[_key2];
  }

  var c = args.length;
  // arguments are delimited
  if (c) {
    for (var i = 0; i < c; i++) {
      if (i > 0) out += LOG_DELIMITER;
      out += args[i];
    }
  }
  out += '\n';
  fs_log.write(out);
}

/// UTILITY FUNCTIONS /////////////////////////////////////////////////////////
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
function str_TimeStamp() {
  var date = new Date();
  var hh = ('0' + date.getHours()).slice(-2);
  var mm = ('0' + date.getMinutes()).slice(-2);
  var ss = ('0' + date.getSeconds()).slice(-2);
  return hh + ':' + mm + ':' + ss;
}
///	- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
function str_DateStamp() {
  var date = new Date();
  var mm = ('0' + (date.getMonth() + 1)).slice(-2);
  var dd = ('0' + date.getDate()).slice(-2);
  var day = e_weekday[date.getDay()];
  var yyyy = date.getFullYear();
  return yyyy + '/' + mm + '/' + dd + ' ' + day;
}
///	- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
function str_ShortDateStamp() {
  var date = new Date();
  var mm = ('0' + (date.getMonth() + 1)).slice(-2);
  var dd = ('0' + date.getDate()).slice(-2);
  var day = e_weekday[date.getDay()];
  var yyyy = date.getFullYear();
  return yyyy + '/' + mm + '/' + dd;
}
///	- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
function str_TimeDatedFilename() {
  var _filename;

  for (var _len3 = arguments.length, args = Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
    args[_key3] = arguments[_key3];
  }

  // construct filename
  var date = new Date();
  var dd = ('0' + date.getDate()).slice(-2);
  var mm = ('0' + (date.getMonth() + 1)).slice(-2);
  var hms = ('0' + date.getHours()).slice(-2);
  hms += ('0' + date.getMinutes()).slice(-2);
  hms += ('0' + date.getSeconds()).slice(-2);
  var filename;
  filename = date.getFullYear().toString();
  filename += '-' + mm + dd;
  var c = arguments.length;
  if (c) filename += (_filename = filename).concat.apply(_filename, ['-'].concat(args));
  filename += '-' + hms;
  return filename;
}

/// API METHODS ///////////////////////////////////////////////////////////////
/// = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
var LOG = {};
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/** API: Handle incoming log events
 */
LOG.PKT_LogEvent = function (pkt) {
  var _console;

  var _pkt$Data = pkt.Data(),
      event = _pkt$Data.event,
      items = _pkt$Data.items;

  var uaddr = pkt.SourceAddress();
  var group = pkt.SourceGroupID(); // leave blank if empty for network events
  if (DBG) (_console = console).log.apply(_console, [PR, pkt.Info(), event].concat(_toConsumableArray(items)));
  LogResearchLine.apply(undefined, [{ uaddr: uaddr, group: group }, event || '-'].concat(_toConsumableArray(items)));
  return { OK: true };
};
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/** API: Write to log as delimited arguments
 */
LOG.Write = LogLine;
/** API: Write to Researcher log as delimited arguments
 *  Research logs alway start with date, time, network, uaddr, group
 */
LOG.WriteRLog = function () {
  var info = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : { uaddr: '', group: '' };

  for (var _len4 = arguments.length, args = Array(_len4 > 1 ? _len4 - 1 : 0), _key4 = 1; _key4 < _len4; _key4++) {
    args[_key4 - 1] = arguments[_key4];
  }

  LogResearchLine.apply(undefined, [info].concat(args));
};

/// EXPORT MODULE DEFINITION //////////////////////////////////////////////////
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
module.exports = LOG;
});

require.register("unisys/server-network.js", function(exports, require, module) {
'use strict';

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

///	- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/** handle messages that are a Send(), Signal(), or Call() */
var m_HandleMessage = function () {
  var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(socket, pkt) {
    var promises, notsrv, json, pktArray, data;
    return regeneratorRuntime.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            if (!pkt.IsOwnResponse()) {
              _context2.next = 3;
              break;
            }

            // console.log(PR,`-- ${pkt.Message()} completing transaction ${pkt.seqlog.join(':')}`);
            pkt.CompleteTransaction();
            return _context2.abrupt('return');

          case 3:
            // console.log(PR,`packet source incoming ${pkt.SourceAddress()}-${pkt.Message()}`);
            // (1) first check if this is a server handler
            promises = m_PromiseServerHandlers(pkt);

            // (2) if it wasn't, then see if we have remote handlers defined

            if (promises.length === 0) promises = m_PromiseRemoteHandlers(pkt);

            // (3) FAIL if no promises were returned, because there were no eligible
            // UADDR targets, possibly because the sources are not allowed to call itself
            // except in the case of the SIGNAL type

            if (!(promises.length === 0)) {
              _context2.next = 10;
              break;
            }

            console.log(PR, 'info: \'' + pkt.Message() + '\' no eligible UADDR targets');
            // return transaction to resolve callee
            pkt.SetData({ NOP: 'no handler found for \'' + pkt.Message() + '\'' });
            if (pkt.IsType('mcall')) pkt.ReturnTransaction(socket);
            return _context2.abrupt('return');

          case 10:
            // got this far? let's skip all server messages for debugging purposes
            notsrv = !pkt.Message().startsWith('SRV_');
            json = JSON.stringify(pkt.Data());
            /* MAGICAL ASYNC/AWAIT BLOCK *****************************/

            if (DBG) console.log(PR, pkt.Info() + ' FORWARD ' + pkt.Message() + ' to ' + promises.length + ' remotes');
            // if (notsrv) console.log(PR,`>> '${pkt.Message()}' queuing ${promises.length} Promises w/ data ${json}'`);
            _context2.next = 15;
            return Promise.all(promises);

          case 15:
            pktArray = _context2.sent;

            // if (notsrv) console.log(PR,`<< '${pkt.Message()}' resolved`);
            if (DBG) console.log(PR, pkt.Info() + ' RETURN ' + pkt.Message() + ' from ' + promises.length + ' remotes');
            /* END MAGICAL ASYNC/AWAIT BLOCK *************************/

            // (4) only mcall packets need to receive the data back return

            if (pkt.IsType('mcall')) {
              _context2.next = 19;
              break;
            }

            return _context2.abrupt('return');

          case 19:

            // (5) got this far? this is a call, so gather data and return it
            data = pktArray.reduce(function (d, p) {
              var pdata = p instanceof NetMessage ? p.Data() : p;
              var retval = Object.assign(d, pdata);
              // if (notsrv) console.log(PR,`'${pkt.Message()}' reduce`,JSON.stringify(retval));
              return retval;
            }, {});
            // json = JSON.stringify(data);
            // if (notsrv) console.log(PR,`'${pkt.Message()}' returning transaction data ${json}`);

            pkt.SetData(data);
            pkt.ReturnTransaction(socket);

          case 22:
          case 'end':
            return _context2.stop();
        }
      }
    }, _callee2, this);
  }));

  return function m_HandleMessage(_x3, _x4) {
    return _ref2.apply(this, arguments);
  };
}();
///	- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/** m_PromiseServerHandlers() returns an array of promises, which should be used
 *  by Promises.all() inside an async/await function (m_SocketMessage above)
 *  Logic is similar to client-datalink-class.js Call() */


function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

/*//////////////////////////////// ABOUT \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\*\

  WebSocketServer and Network Management for UNISYS

\*\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ * //////////////////////////////////////*/

/* eslint-disable newline-per-chained-call */
/* eslint-disable nonblock-statement-body-position */

/* added for pull request #81 so 'npm run lint' test appears clean */
/* eslint-disable no-unused-vars */

var DBG = false;
var STAT = true;

///	LOAD LIBRARIES ////////////////////////////////////////////////////////////
///	- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
var WSS = require('ws').Server;
var NetMessage = require('./common-netmessage-class');
var LOGGER = require('./server-logger');
var DB = require('./server-database');
var DEFS = require('./common-defs');

/// CONSTANTS /////////////////////////////////////////////////////////////////
///	- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
var PROMPTS = require('../system/util/prompts');
var PR = PROMPTS.Pad('SRV_NET');
var ERR_SS_EXISTS = 'socket server already created';
var DBG_SOCK_BADCLOSE = 'closing socket is not in mu_sockets';
var DEFAULT_NET_PORT = 2929;

/// MODULE-WIDE VARS //////////////////////////////////////////////////////////
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/// sockets
var mu_wss; // websocket server
var mu_options; // websocket options
var mu_sockets = new Map(); // sockets mapped by socket id
var mu_sid_counter = 0; // for generating  unique socket ids
// storage
var m_server_handlers = new Map(); // message map storing sets of functions
var m_message_map = new Map(); // message map storing other handlers
var m_socket_msgs_list = new Map(); // message map by uaddr
// heartbeat
var m_heartbeat_interval;
var m_pong_timer = [];

/// API MEHTHODS //////////////////////////////////////////////////////////////
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
var UNET = {};
var SERVER_UADDR = NetMessage.DefaultServerUADDR(); // is 'SVR_01'
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/** Initialize() is called by brunch-server.js to define the default UNISYS
 *  network values, so it can embed them in the index.ejs file for webapps */
UNET.InitializeNetwork = function (options) {
  options = options || {};
  options.port = options.port || DEFAULT_NET_PORT;
  options.uaddr = options.uaddr || SERVER_UADDR;
  if (mu_wss !== undefined) throw Error(ERR_SS_EXISTS);
  NetMessage.GlobalSetup({ uaddr: options.uaddr });
  mu_options = options;
  return mu_options;
};
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/**	CreateNetwork() is called by brunch-server after the Express webserver
 *  has started listening, initializing the UNISYS NETWORK socket listener. */
UNET.StartNetwork = function () {
  // create listener
  mu_wss = new WSS(mu_options);
  mu_wss.on('listening', function () {
    if (STAT) console.log(PR, 'unisys network is active on port ' + mu_options.port);
    mu_wss.on('connection', m_NewSocketConnected);
  });
};
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/** HandleMessage() registers a server-implemented handler. The handlerFunc
 *  receives a NetMessage and should return one as well. It can also return a
 *  non-object if there is an error. Logic is similar to
 *  client-datalink-class.js equivalent */
UNET.HandleMessage = function (mesgName, handlerFunc) {
  if (typeof handlerFunc !== 'function') {
    throw 'arg2 must be a function';
  }
  var handlers = m_server_handlers.get(mesgName);
  if (!handlers) {
    handlers = new Set();
    m_server_handlers.set(mesgName, handlers);
  }
  handlers.add(handlerFunc);
  return this;
};
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/** UnhandleMessage() de-registers a server-implemented handler, in case you
 *  ever want to do that. Logic is similar to client-datalink-class.js
 *  equivalent */
UNET.UnhandleMessage = function (mesgName, handlerFunc) {
  if (!arguments.length) {
    m_server_handlers.clear();
  } else if (arguments.length === 1) {
    m_server_handlers.delete(mesgName);
  } else {
    var handlers = m_server_handlers.get(mesgName);
    if (handlers) {
      handlers.delete(handlerFunc);
    }
  }
  return this;
};
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/** Call remote handler, with possible return value */
UNET.NetCall = function () {
  var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(mesgName, data) {
    var pkt, promises, resArray, resObj;
    return regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            pkt = new NetMessage(mesgName, data);
            promises = m_PromiseRemoteHandlers(pkt);

            if (DBG) console.log(PR, pkt.Info() + ' NETCALL ' + pkt.Message() + ' to ' + promises.length + ' remotes');
            /// MAGICAL ASYNC/AWAIT BLOCK ///
            _context.next = 5;
            return Promise.all(promises);

          case 5:
            resArray = _context.sent;

            /// END MAGICAL ASYNC/AWAIT BLOCK ///
            resObj = Object.assign.apply(Object, [{}].concat(_toConsumableArray(resArray)));
            return _context.abrupt('return', resObj);

          case 8:
          case 'end':
            return _context.stop();
        }
      }
    }, _callee, this);
  }));

  return function (_x, _x2) {
    return _ref.apply(this, arguments);
  };
}();
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/** Send data to remote handler, no expected return value */
UNET.NetSend = function (mesgName, data) {
  var pkt = new NetMessage(mesgName, data);
  var promises = m_PromiseRemoteHandlers(pkt);
  // we don't care about waiting for the promise to complete
  if (DBG) console.log(PR, pkt.Info() + ' NETSEND ' + pkt.Message() + ' to ' + promises.length + ' remotes');
};
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/** Send signal to remote handler, no expected return value */
UNET.NetSignal = function (mesgName, data) {
  console.warn(PR, 'NOTE: Use NetSend(), not NetSignal() since the server doesnt care.');
  UNET.NetSend(mesgName, data);
};
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/** RegisterRemoteHandlers() accepts a RegistrationPacket with data = { messages }
 *  and writes to the two main maps for handling incoming messages */
UNET.RegisterRemoteHandlers = function (pkt) {
  if (pkt.Message() !== 'SRV_REG_HANDLERS') throw Error('not a registration packet');
  var uaddr = pkt.SourceAddress();

  var _pkt$Data = pkt.Data(),
      _pkt$Data$messages = _pkt$Data.messages,
      messages = _pkt$Data$messages === undefined ? [] : _pkt$Data$messages;

  var regd = [];
  // save message list, for later when having to delete
  var existing = m_socket_msgs_list.get(uaddr) || [];
  m_socket_msgs_list.set(uaddr, [].concat(_toConsumableArray(existing), _toConsumableArray(messages)));
  // add uaddr for each message in the list
  // m_message_map[mesg] contains a Set
  messages.forEach(function (msg) {
    var entry = m_message_map.get(msg);
    if (!entry) {
      entry = new Set();
      m_message_map.set(msg, entry);
    }
    if (DBG) console.log(PR, 'adding \'' + msg + '\' reference to ' + uaddr);
    entry.add(uaddr);
    regd.push(msg);
  });
  return { registered: regd };
};

/// SOCKET HELPER FUNCTIONS ///////////////////////////////////////////////////
///	- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/** The socket has connected, so let's save this to our connection list */
function m_NewSocketConnected(socket) {
  if (DBG) console.log(PR, 'socket connected');
  m_SocketAdd(socket);
  m_SocketClientAck(socket);
  // subscribe socket to handlers
  socket.on('message', function (json) {
    m_SocketMessage(socket, json);
  });
  socket.on('close', function () {
    // The socket wil not receive a close event immediately if the client
    // loses their internet connection.  The close event WILL fire if the
    // client comes back online and reconnects on a new UADDR.
    // The socket will close eventually after about 4 minutes.
    m_SocketDelete(socket);
  });
  // start heartbeat
  m_StartHeartbeat();
}
///	- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/** When a new socket is connected, we send a periodic heartbeat to let them
 *  know we're still here, and so client can detect when network is lost.
 *  This will keep sending a heartbeat to the socket so long as it is open. */
function m_StartHeartbeat() {
  if (DBG) console.log(PR, 'starting heartbeat');
  if (m_heartbeat_interval) return; // already started
  m_heartbeat_interval = setInterval(function sendHeartbeat() {
    mu_sockets.forEach(function (socket, key, map) {
      if (DBG) console.log(PR, 'sending heartbeat to', socket.UADDR);
      if (socket.readyState === socket.OPEN) {
        socket.send('ping', function (err) {
          if (err) console.log(PR, 'error "', err, '" while sending heartbeat to', socket.UADDR);
        });
      }
    });
  }, DEFS.SERVER_HEARTBEAT_INTERVAL);
}
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/** If a 'pong' message is not received from the client 5 seconds after we send
 *  the client a ping message, we assume the network connection has gone down.
 *  The socket close handler is only triggered when the server closes the
 *  connection.  In order to detect the internet connection going down
 *  (e.g. loss of wifi) we need to check to see if we are peridically receiving
 *  a heartbeat message from the client. */
function m_ResetPongTimer(uaddr) {
  clearTimeout(m_pong_timer[uaddr]);
  m_pong_timer[uaddr] = setTimeout(function pongTimedOut() {
    if (DBG) console.log(PR, uaddr, 'pong not received before time ran out -- CONNECTION DEAD!');
    LOGGER.WriteRLog({ uaddr: uaddr }, PR, 'pong not received before time ran out -- CLIENT CONNECTION DEAD!');
    DB.RequestUnlock(uaddr);
  }, DEFS.SERVER_HEARTBEAT_INTERVAL * 2);
}
///	- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/** When a new socket connection happens, send back the special registration
 * packet (WIP) */
function m_SocketClientAck(socket) {
  var data = {
    HELLO: 'Welcome to UNISYS',
    UADDR: socket.UADDR
  };
  socket.send(JSON.stringify(data));
}
///	- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/** Handle all incoming socket messages asynchronously through Promises */
function m_SocketMessage(socket, json) {
  // Check Heartbeat
  if (json === 'pong') {
    if (socket.UADDR === undefined) {
      console.log(PR, '!!!!!!!!!!!!!!!!!! Bad socket.UADDR', socket.UADDR, '! Skipping pong timer reset.');
      return; // Don't start the timer if we get a bad UADDR
    }
    m_ResetPongTimer(socket.UADDR);
    return;
  }
  try {
    var pkt = new NetMessage(json);
    // todo: check authentication
    // figure out what to do
    switch (pkt.Type()) {
      case 'state':
        m_HandleState(socket, pkt);
        break;
      case 'msig':
      case 'msend':
      case 'mcall':
        m_HandleMessage(socket, pkt);
        break;
      default:
        throw new Error(PR + ' unknown packet type \'' + pkt.Type() + '\'');
    } // end switch
  } catch (err) {
    console.error(PR, 'm_SocketMessage try:', err);
  }
}function m_PromiseServerHandlers(pkt) {
  var mesgName = pkt.Message();
  var handlers = m_server_handlers.get(mesgName);
  /// create promises for all registered handlers
  var promises = [];
  if (handlers) {
    var _iteratorNormalCompletion = true;
    var _didIteratorError = false;
    var _iteratorError = undefined;

    try {
      for (var _iterator = handlers[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
        var handlerFunc = _step.value;

        // handlerFunc signature: (data,dataReturn) => {}
        var p = f_make_resolver_func(pkt, handlerFunc);
        promises.push(p);
      }
    } catch (err) {
      _didIteratorError = true;
      _iteratorError = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion && _iterator.return) {
          _iterator.return();
        }
      } finally {
        if (_didIteratorError) {
          throw _iteratorError;
        }
      }
    }
  } /// return all queued promises
  return promises;

  /// inline utility function ///
  function f_make_resolver_func(srcPkt, handlerFunc) {
    return new Promise(function (resolve, reject) {
      var retval = handlerFunc(srcPkt);
      if (retval === undefined) throw '\'' + mesgName + '\' message handler MUST return object or error string';
      if ((typeof retval === 'undefined' ? 'undefined' : _typeof(retval)) !== 'object') reject(retval);else resolve(retval);
    });
  }
}
///	- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/** If a handler is registered elsewhere on UNET, then dispatch to them for
 *  eventual reflection back through server aggregation of data. */
function m_PromiseRemoteHandlers(pkt) {
  // debugging values
  var s_uaddr = pkt.SourceAddress();
  // logic values
  var promises = [];
  var mesgName = pkt.Message();
  var type = pkt.Type();
  // iterate!
  var handlers = m_message_map.get(mesgName);
  if (handlers) handlers.forEach(function (d_uaddr) {
    // don't send packet to originating UADDR because it already has handled it
    // locally
    switch (type) {
      case 'msig':
        promises.push(f_make_remote_resolver_func(pkt, d_uaddr));
        break;
      case 'msend':
      case 'mcall':
        if (s_uaddr !== d_uaddr) {
          promises.push(f_make_remote_resolver_func(pkt, d_uaddr));
        } else {
          // console.log(PR,`${type} '${pkt.Message()}' -NO ECHO- ${d_uaddr}`);
        }
        break;
      default:
        throw Error('{ERR_UNKNOWN_PKT} ' + type);
    }
  });
  /// return all queued promises
  return promises;
  /// f_make_remote_resolver_function returns the promise created by QueueTransaction()
  /// made on a new netmessage.
  function f_make_remote_resolver_func(srcPkt, d_uaddr) {
    var opt = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
    var verbose = opt.verbose;
    // get the address of the destination implementor of MESSAGE

    var d_sock = mu_sockets.get(d_uaddr);
    if (d_sock === undefined) {
      // throw Error(ERR_INVALID_DEST + ` ${d_uaddr}`);
      console.log(PR, 'ERROR \'' + d_uaddr + '\' for \'' + pkt.Message() + ' doesn\'t exist');
      return Promise.resolve({ NOP: 'no handler found for \'' + d_uaddr + '\'' });
    }
    // Queue transaction from server
    // sends to destination socket d_sock
    // console.log(PR,`++ '${pkt.Message()}' FWD from ${pkt.SourceAddress()} to ${d_uaddr}`);
    var newpkt = new NetMessage(srcPkt);
    newpkt.MakeNewID();
    newpkt.CopySourceAddress(srcPkt);
    if (verbose) {
      console.log('make_resolver_func:', 'PKT: ' + srcPkt.Type() + ' \'' + srcPkt.Message() + '\' from ' + srcPkt.Info() + ' to d_uaddr:' + d_uaddr + ' dispatch to d_sock.UADDR:' + d_sock.UADDR);
    }
    return newpkt.QueueTransaction(d_sock);
  }
}
///	- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/** invoked when web socket server gets a new connection. See m_SocketDelete()
 *  for the mirror function */
function m_SocketAdd(socket) {
  // save socket by socket_id
  var sid = m_GetNewUADDR();
  // store additional props in socket
  socket.UADDR = sid;
  // save socket
  mu_sockets.set(sid, socket);
  if (STAT) console.log(PR, 'socket ADD ' + socket.UADDR + ' to network');
  LOGGER.WriteRLog({ uaddr: socket.UADDR }, 'joined network');
  if (DBG) m_ListSockets('add ' + sid);
}
///	- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/** generate a new UADDR when a new soecket is created, used by m_SocketAdd */
function m_GetNewUADDR() {
  var prefix = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'UADDR';

  ++mu_sid_counter;
  var cstr = mu_sid_counter.toString(10).padStart(2, '0');
  return prefix + '_' + cstr;
}
///	- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/** invoked when a client socket is disconnected. It has to do additional
 *  cleanup to remove any messages related to the socket address */
function m_SocketDelete(socket) {
  var uaddr = socket.UADDR;
  if (!mu_sockets.has(uaddr)) throw Error(DBG_SOCK_BADCLOSE);
  if (STAT) console.log(PR, 'socket DEL ' + uaddr + ' from network');
  LOGGER.WriteRLog({ uaddr: socket.UADDR }, 'left network');
  mu_sockets.delete(uaddr);
  // delete socket reference from previously registered handlers
  var rmesgs = m_socket_msgs_list.get(uaddr);
  if (Array.isArray(rmesgs)) {
    rmesgs.forEach(function (msg) {
      var addressSet = m_message_map.get(msg);
      if (DBG) console.log('---', uaddr, addressSet);
      if (addressSet) {
        addressSet.delete(uaddr);
        if (DBG) console.log(PR, '...' + uaddr + ' unregister \'' + msg + '\'');
      }
    });
  }
  // Unlock everything if the socket is being removed
  DB.RequestUnlock(uaddr);
  // console list
  if (DBG) m_ListSockets('del ' + socket.UADDR);
}
///	- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/** utility to list the current socket connections to the terminal window */
function m_ListSockets(change) {
  console.log(PR, '...SocketList change:', change);
  // let's use iterators! for..of
  var values = mu_sockets.values();
  var count = 1;
  var _iteratorNormalCompletion2 = true;
  var _didIteratorError2 = false;
  var _iteratorError2 = undefined;

  try {
    for (var _iterator2 = values[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
      var socket = _step2.value;

      console.log(PR, '   ' + count + ' - ' + socket.UADDR);
    }
  } catch (err) {
    _didIteratorError2 = true;
    _iteratorError2 = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion2 && _iterator2.return) {
        _iterator2.return();
      }
    } finally {
      if (_didIteratorError2) {
        throw _iteratorError2;
      }
    }
  }
}

/// EXPORT MODULE DEFINITION //////////////////////////////////////////////////
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
module.exports = UNET;
});

require.register("unisys/server.js", function(exports, require, module) {
'use strict';

/*//////////////////////////////// ABOUT \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\*\

  UNISYS server loader

\*\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ * //////////////////////////////////////*/

var PATH = require('path');
var UNET = require('./server-network');
var UDB = require('./server-database');
var LOGGER = require('./server-logger');
var PROMPTS = require('../system/util/prompts');

var _require = require('../system/util/enum'),
    EDITORTYPE = _require.EDITORTYPE;

var MUR = require('../../_mur/_dist/mur-node.cjs');
var NC_CONFIG = require('../../app-config/netcreate-config');

/// CONSTANTS & DECLARATIONS ///////////////////////////////////////////////////
///	- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
var DBG = false;
var PR = PROMPTS.Pad('MUR_SET');
///	- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
var ROOT = PATH.resolve(__dirname, '../../');
var TEST_TEMPL_DIR = PATH.resolve(ROOT, 'app-templates');

/// API CREATE MODULE /////////////////////////////////////////////////////////
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
var UNISYS = {};
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/** Initialize() is called by brunch-server.js to define the default UNISYS
 *  network values, so it can embed them in the index.ejs file for webapps
 *  override = { port } */
UNISYS.InitializeNetwork = function (override) {
  // MUR INTEROP: connect to MUR
  MUR.NCI.InteropConnect(UNET, NC_CONFIG);
  // MUR INTEROP: load settings and persist unified file
  var settings = MUR.SettingMgr.LoadSettings(TEST_TEMPL_DIR);
  MUR.SettingMgr.WriteDefaultSettings();
  console.log(PR, 'Loaded settings: [' + Object.keys(settings).join(', '));
  // MUR INTEROP: end

  // resume NetCreate server initialization
  UDB.InitializeDatabase(override);
  return UNET.InitializeNetwork(override);
};
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/** RegisterHandlers() is called before network is started, so they're
 *  ready to run. These are server-implemented reserved messages.
 */
UNISYS.RegisterHandlers = function () {
  //  define local handlers
  UNET.HandleMessage('SRV_REFLECT', function (pkt) {
    pkt.Data().serverSays = 'REFLECTING';
    pkt.Data().stack.push('SRV_01');
    if (DBG) console.log(PR, sprint_message(pkt));
    // return the original packet
    return pkt;
  });
  //
  UNET.HandleMessage('SRV_REG_HANDLERS', function (pkt) {
    if (DBG) console.log(PR, sprint_message(pkt));
    // now need to store the handlers somehow.
    var data = UNET.RegisterRemoteHandlers(pkt);
    // or return a new data object that will replace pkt.data
    return data;
  });
  //
  UNET.HandleMessage('SRV_DBGET', function (pkt) {
    if (DBG) console.log(PR, sprint_message(pkt));
    return UDB.PKT_GetDatabase(pkt);
  });
  //
  UNET.HandleMessage('SRV_DBSET', function (pkt) {
    if (DBG) console.log(PR, sprint_message(pkt));
    return UDB.PKT_SetDatabase(pkt);
  });
  //
  /// Add new node/edges to db after an import
  UNET.HandleMessage('SRV_DBINSERT', function (pkt) {
    if (DBG) console.log(PR, sprint_message(pkt));
    return UDB.PKT_InsertDatabase(pkt);
  });
  // Update or add new node/edges to db after an import
  UNET.HandleMessage('SRV_DBMERGE', function (pkt) {
    if (DBG) console.log(PR, sprint_message(pkt));
    return UDB.PKT_MergeDatabase(pkt);
  });

  // Emulate a project load for Turbo360
  UNET.HandleMessage('SRV_DBREPLACE', function (pkt) {
    if (DBG) console.log(PR, sprint_message(pkt));
    return UDB.PKT_ReplaceDatabase(pkt);
  });

  /** TEMPLATE / IMPORT / NODE / EDGE EDITOR LOCKING **/

  /** Reports on whether template, import, or node/edge are being edited
   *  @return { templateBeingEdited: boolean, importActive: boolean, nodeOrEdgeBeingEdited: boolean }
   */
  UNET.HandleMessage('SRV_GET_EDIT_STATUS', function (pkt) {
    // server-database
    if (DBG) console.log(PR, sprint_message(pkt));
    var data = UDB.GetEditStatus(pkt);
    return data;
  });
  /** Requested by Node / Edge Editor when user wants to edit node / edge
   * @return { templateBeingEdited: boolean, importActive: boolean, nodeOrEdgeBeingEdited: boolean }
   */
  UNET.HandleMessage('SRV_REQ_EDIT_LOCK', function (pkt) {
    // server-database
    if (DBG) console.log(PR, sprint_message(pkt));
    var editStatus = UDB.RequestEditLock(pkt);
    // Broadcast Lock State
    UNET.NetSend('EDIT_PERMISSIONS_UPDATE', editStatus);
    return editStatus;
  });
  /**
   * @return { templateBeingEdited: boolean, importActive: boolean, nodeOrEdgeBeingEdited: boolean }
   */
  UNET.HandleMessage('SRV_RELEASE_EDIT_LOCK', function (pkt) {
    // server-database
    if (DBG) console.log(PR, sprint_message(pkt));
    var editStatus = UDB.ReleaseEditLock(pkt);
    // Broadcast Lock State
    UNET.NetSend('EDIT_PERMISSIONS_UPDATE', editStatus);
    return editStatus;
  });

  /** TEMPLATE EDITING **/

  UNET.HandleMessage('SRV_TEMPLATE_REGENERATE_DEFAULT', function (pkt) {
    // server-database
    if (DBG) console.log(PR, sprint_message(pkt));
    return UDB.RegenerateDefaultTemplate();
  });
  UNET.HandleMessage('SRV_TEMPLATESAVE', function (pkt) {
    // server-database
    if (DBG) console.log(PR, sprint_message(pkt));
    UNET.NetSend('NET_TEMPLATE_UPDATE', pkt.data.template); // Broadcast template to other computers on the net
    return UDB.WriteTemplateTOML(pkt);
  });
  UNET.HandleMessage('SRV_GET_TEMPLATETOML_FILENAME', function () {
    return UDB.GetTemplateTOMLFileName();
  });

  /// Update all EXISTING nodes/edges after a Template edit
  UNET.HandleMessage('SRV_DBUPDATE_ALL', function (pkt) {
    if (DBG) console.log(PR, sprint_message(pkt));
    return UDB.PKT_UpdateDatabase(pkt);
  });

  /** NODE/EDGE EDITING **/

  // receives a packet from a client
  UNET.HandleMessage('SRV_DBUPDATE', function (pkt) {
    if (DBG) console.log(PR, sprint_message(pkt));
    var data = UDB.PKT_Update(pkt);
    // add src attribute for client SOURCE_UPDATE to know
    // this is a remote update
    data.src = 'remote';
    // fire update messages
    if (data.node) UNET.NetSend('SOURCE_UPDATE', data);
    if (data.edge) UNET.NetSend('EDGE_UPDATE', data);
    if (data.nodeID !== undefined) UNET.NetSend('NODE_DELETE', data);
    if (data.edgeID !== undefined) UNET.NetSend('EDGE_DELETE', data);
    if (data.comment) {
      data.uaddr = pkt.s_uaddr; // used to differentiate local vs net updates
      UNET.NetSend('COMMENT_UPDATE', data);
    }
    if (data.readbys) UNET.NetSend('READBY_UPDATE', data);
    if (data.commentID !== undefined) UNET.NetSend('COMMENT_DELETE', data);
    // return SRV_DBUPDATE value (required)
    return { OK: true, info: 'SRC_DBUPDATE' };
  });

  // receives a batch of packets from a client
  UNET.HandleMessage('SRV_DBBATCHUPDATE', function (pkt) {
    if (DBG) console.log(PR, sprint_message(pkt));
    var retvals = UDB.PKT_BatchUpdate(pkt);
    // fire update messages
    // retvals is an array and contains multiple comments and commentIDs
    UNET.NetSend('COMMENTS_UPDATE', retvals);
    // return SRV_DBBATCHUPDATE value (required)
    return { OK: true, info: 'SRV_DBBATCHUPDATE' };
  });

  UNET.HandleMessage('SRV_CALCULATE_MAXNODEID', function (pkt) {
    if (DBG) console.log(PR, sprint_message(pkt));
    return UDB.PKT_CalculateMaxNodeID(pkt);
  });
  UNET.HandleMessage('SRV_DBGETNODEID', function (pkt) {
    if (DBG) console.log(PR, sprint_message(pkt));
    return UDB.PKT_GetNewNodeID(pkt);
  });
  UNET.HandleMessage('SRV_DBGETNODEIDS', function (pkt) {
    if (DBG) console.log(PR, sprint_message(pkt));
    return UDB.PKT_GetNewNodeIDs(pkt);
  });

  /// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  /// DB LOCKING
  /**
   * @param {object} pkt
   * @param {string} pkt.data.nodeID
   */
  UNET.HandleMessage('SRV_DBLOCKNODE', function (pkt) {
    if (DBG) console.log(PR, sprint_message(pkt));
    var lockResult = UDB.PKT_RequestLockNode(pkt);
    if (lockResult.locked) {
      // successfully locked, broadcast edit state
      //  - inject editor type into the pkt
      var pktData = pkt.Data();
      pktData.editor = EDITORTYPE.NODE;
      pkt.SetData(pktData);
      var editStatus = UDB.RequestEditLock(pkt);
      // - broadcast lock state
      UNET.NetSend('EDIT_PERMISSIONS_UPDATE', editStatus);
    }
    return lockResult; // handle callback
  });
  UNET.HandleMessage('SRV_DBUNLOCKNODE', function (pkt) {
    if (DBG) console.log(PR, sprint_message(pkt));
    var unlockResult = UDB.PKT_RequestUnlockNode(pkt);
    if (unlockResult.unlocked) {
      // successfully unlocked, broadcast edit state
      // - inject editor type into the pkt
      var pktData = pkt.Data();
      pktData.editor = EDITORTYPE.NODE;
      pkt.SetData(pktData);
      var editStatus = UDB.ReleaseEditLock(pkt);
      // - broadcast lock state
      UNET.NetSend('EDIT_PERMISSIONS_UPDATE', editStatus);
    }
    return unlockResult; // handle callback
  });
  UNET.HandleMessage('SRV_DBLOCKEDGE', function (pkt) {
    if (DBG) console.log(PR, sprint_message(pkt));
    var lockResult = UDB.PKT_RequestLockEdge(pkt);
    if (lockResult.locked) {
      // successfully locked, broadcast edit state
      // - inject editor type into the pkt
      var pktData = pkt.Data();
      pktData.editor = EDITORTYPE.EDGE;
      pkt.SetData(pktData);
      var editStatus = UDB.RequestEditLock(pkt);
      // = broadcast lock state
      UNET.NetSend('EDIT_PERMISSIONS_UPDATE', editStatus);
    }
    return lockResult; // handle callback
  });
  UNET.HandleMessage('SRV_DBUNLOCKEDGE', function (pkt) {
    if (DBG) console.log(PR, sprint_message(pkt));
    var unlockResult = UDB.PKT_RequestUnlockEdge(pkt);
    if (unlockResult.unlocked) {
      // successfully unlocked, broadcast edit state
      // - inject editor type into the pkt
      var pktData = pkt.Data();
      pktData.editor = EDITORTYPE.EDGE;
      pkt.SetData(pktData);
      var editStatus = UDB.ReleaseEditLock(pkt);
      // - broadcast lock state
      UNET.NetSend('EDIT_PERMISSIONS_UPDATE', editStatus);
    }
    return unlockResult; // handle callback
  });

  UNET.HandleMessage('SRV_DBISEDGELOCKED', function (pkt) {
    if (DBG) console.log(PR, sprint_message(pkt));
    return UDB.PKT_IsEdgeLocked(pkt);
  });

  UNET.HandleMessage('SRV_DBLOCKCOMMENT', function (pkt) {
    if (DBG) console.log(PR, sprint_message(pkt));
    var lockResult = UDB.PKT_RequestLockComment(pkt);
    if (lockResult.locked) {
      // successfully unlocked, broadcast edit state
      // - inject editor type into the pkt
      var pktData = pkt.Data();
      pktData.editor = EDITORTYPE.COMMENT;
      pkt.SetData(pktData);
      var editStatus = UDB.ReleaseEditLock(pkt);
      // - broadcast lock state
      UNET.NetSend('EDIT_PERMISSIONS_UPDATE', editStatus);
    }
    return lockResult; // handle callback
  });

  UNET.HandleMessage('SRV_DBUNLOCKCOMMENT', function (pkt) {
    if (DBG) console.log(PR, sprint_message(pkt));
    var unlockResult = UDB.PKT_RequestUnlockComment(pkt);
    if (unlockResult.unlocked) {
      // successfully unlocked, broadcast edit state
      // - inject editor type into the pkt
      var pktData = pkt.Data();
      pktData.editor = EDITORTYPE.COMMENT;
      pkt.SetData(pktData);
      var editStatus = UDB.ReleaseEditLock(pkt);
      // - broadcast lock state
      UNET.NetSend('EDIT_PERMISSIONS_UPDATE', editStatus);
    }
    return unlockResult; // handle callback
  });

  UNET.HandleMessage('SRV_DBISCOMMENTLOCKED', function (pkt) {
    if (DBG) console.log(PR, sprint_message(pkt));
    return UDB.PKT_IsCommentLocked(pkt);
  });

  UNET.HandleMessage('SRV_DBUNLOCKALLNODES', function (pkt) {
    if (DBG) console.log(PR, sprint_message(pkt));
    return UDB.PKT_RequestUnlockAllNodes(pkt);
  });
  UNET.HandleMessage('SRV_DBUNLOCKALLEDGES', function (pkt) {
    if (DBG) console.log(PR, sprint_message(pkt));
    return UDB.PKT_RequestUnlockAllEdges(pkt);
  });
  UNET.HandleMessage('SRV_DBUNLOCKALLCOMMENTS', function (pkt) {
    if (DBG) console.log(PR, sprint_message(pkt));
    return UDB.PKT_RequestUnlockAllComments(pkt);
  });
  UNET.HandleMessage('SRV_DBUNLOCKALL', function (pkt) {
    if (DBG) console.log(PR, sprint_message(pkt));
    var res = UDB.PKT_RequestUnlockAll(pkt);
    // Broadcast Lock State
    var data = UDB.GetEditStatus(pkt);
    UNET.NetSend('EDIT_PERMISSIONS_UPDATE', data);
    return res;
  });

  UNET.HandleMessage('SRV_CALCULATE_MAXEDGEID', function (pkt) {
    if (DBG) console.log(PR, sprint_message(pkt));
    return UDB.PKT_CalculateMaxEdgeID(pkt);
  });
  UNET.HandleMessage('SRV_DBGETEDGEID', function (pkt) {
    if (DBG) console.log(PR, sprint_message(pkt));
    return UDB.PKT_GetNewEdgeID(pkt);
  });
  UNET.HandleMessage('SRV_DBGETEDGEIDS', function (pkt) {
    if (DBG) console.log(PR, sprint_message(pkt));
    return UDB.PKT_GetNewEdgeIDs(pkt);
  });

  UNET.HandleMessage('SRV_DBGETCOMMENTID', function (pkt) {
    if (DBG) console.log(PR, sprint_message(pkt));
    return UDB.PKT_GetNewCommentID(pkt);
  });

  UNET.HandleMessage('SRV_LOG_EVENT', function (pkt) {
    if (DBG) console.log(PR, sprint_message(pkt));
    return LOGGER.PKT_LogEvent(pkt);
  });

  // utility function //
  function sprint_message(pkt) {
    return 'got \'' + pkt.Message() + '\' data=' + JSON.stringify(pkt.Data());
  }
};
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/**	StartNetwork() is called by brunch-server after the Express webserver
 */
UNISYS.StartNetwork = function () {
  UNET.StartNetwork();
};

/// EXPORT MODULE DEFINITION //////////////////////////////////////////////////
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
module.exports = UNISYS;
});

require.register("view/default/AppDefault.jsx", function(exports, require, module) {
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

if (window.NC_DBG) console.log('inc ' + module.id);
/*///////////////////////////////// ABOUT \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\*\

  Placeholder Root View

\*\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ * /////////////////////////////////////*/

var React = require('react');

/// DEFAULT APPLICATION COMPONENT /////////////////////////////////////////////
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

var AppDefault = function (_React$Component) {
  _inherits(AppDefault, _React$Component);

  function AppDefault() {
    _classCallCheck(this, AppDefault);

    return _possibleConstructorReturn(this, (AppDefault.__proto__ || Object.getPrototypeOf(AppDefault)).call(this));
  }

  _createClass(AppDefault, [{
    key: 'render',
    value: function render() {
      return React.createElement(
        'div',
        {
          style: {
            display: 'flex',
            flexFlow: 'row nowrap',
            width: '100%',
            height: '100%'
          }
        },
        React.createElement('div', { id: 'left', style: { flex: '1 0 auto' } }),
        React.createElement(
          'div',
          { id: 'middle', style: { flex: '3 0 auto' } },
          React.createElement(
            'p',
            null,
            'AppDefault.jsx'
          ),
          React.createElement(
            'h4',
            null,
            'NetCreate welcomes you'
          ),
          React.createElement(
            'p',
            null,
            'This is a work in progress.'
          )
        ),
        React.createElement('div', { id: 'right', style: { flex: '1 0 auto' } })
      );
    }
  }, {
    key: 'componentDidMount',
    value: function componentDidMount() {
      console.log('AppDefault mounted');
    }
  }]);

  return AppDefault;
}(React.Component);

/// EXPORT REACT COMPONENT ////////////////////////////////////////////////////
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -


module.exports = AppDefault;
});

require.register("view/html-frame/HTMLFrame.jsx", function(exports, require, module) {
'use strict';

/*///////////////////////////////// ABOUT \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\*\

  Root View for an IFrame-based HTML page

\*\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ * /////////////////////////////////////*/

var React = require('react');

/// CONSTANTS & DECLARATIONS //////////////////////////////////////////////////
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

/// COMPONENT DECLARATION /////////////////////////////////////////////////////
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
function HTMLFrame(props) {
  SETTINGS.IsReloadRequired();
  var loc = void 0;
  if (props && props.location && props.location.pathname) {
    loc = props.location.pathname.substring(1);
  }
  loc = '/htmldemos/' + loc + '/' + loc + '.html';
  return React.createElement(
    'div',
    {
      style: {
        display: 'flex',
        flexFlow: 'column nowrap',
        width: '100%',
        height: '100%'
      }
    },
    React.createElement('iframe', { style: { flex: '1 0 auto', border: '0' }, src: loc })
  );
}

/// EXPORTS ///////////////////////////////////////////////////////////////////
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
module.exports = HTMLFrame;
});

require.register("view/netcreate/NetCreate.jsx", function(exports, require, module) {
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _panelMgr = require('./panel-mgr');

var _panelMgr2 = _interopRequireDefault(_panelMgr);

var _NCInfoPanel = require('./components/NCInfoPanel');

var _NCInfoPanel2 = _interopRequireDefault(_NCInfoPanel);

var _NCHelpPanel = require('./components/NCHelpPanel');

var _NCHelpPanel2 = _interopRequireDefault(_NCHelpPanel);

var _NCAdvancedPanel = require('./components/NCAdvancedPanel');

var _NCAdvancedPanel2 = _interopRequireDefault(_NCAdvancedPanel);

var _NCFiltersPanel = require('./components/filter/NCFiltersPanel');

var _NCFiltersPanel2 = _interopRequireDefault(_NCFiltersPanel);

var _URButtonToggle = require('./components/URButtonToggle');

var _URButtonToggle2 = _interopRequireDefault(_URButtonToggle);

var _URCommentStatus = require('./components/URCommentStatus');

var _URCommentStatus2 = _interopRequireDefault(_URCommentStatus);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/*//////////////////////////////// ABOUT \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\*\

    NetCreate

    The basic React Component structure of the app looks like this:

        NetCreate
        +- NodeSelector
        |  +- NodeDetail
        |  +- AutoComplete
        |  |  +- AutoSuggest
        |  +- EdgeEntry
        |     +- *AutoComplete (for Target Node)*
        +- NetGraph
           +- D3SimpleNetGraph
              +- D3

    `NetCreate` is the root element. It is a wrapper for the key app
    elements `NodeSelector` and `NetGraph`.

    It does not do any data or event handling.  Those are handled individually
    by the respective Components.

  * All state is maintained in `nc-logic.js`
  * It handles events from NodeSelector, EdgeEntry, and NetGraph components
      and passes data and upates across them.

    PROPS  ... (none)
    STATE  ... (none)
    EVENTS ... (none)

\*\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ * //////////////////////////////////////*/

/// UNISYS INITIALIZE REQUIRES for REACT ROOT /////////////////////////////////
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
var UNISYS = require('unisys/client');
var UR = require('ursys-min');
var SessionShell = require('unisys/component/SessionShell');

/// SWITCHES //////////////////////////////////////////////////////////////////
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
var DBG = false;
var PROMPTS = require('system/util/prompts');
var PR = PROMPTS.Pad('ACD');

/// LIBRARIES /////////////////////////////////////////////////////////////////
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
var React = require('react');
var NCSearch = require('./components/NCSearch');
var NCNode = require('./components/NCNode');
var NCGraph = require('./components/NCGraph');
var NCLOGIC = require('./nc-logic'); // require to bootstrap data loading
var FILTERMGR = require('./filter-mgr'); // handles filtering functions
var EDGEMGR = require('./edge-mgr'); // handles edge synthesis
var SELECTIONMGR = require('./selection-mgr'); // handles UI selection events
var HILITEMGR = require('./hilite-mgr'); // handles UI hilite events
var CMTMGR = require('./comment-mgr');
var FILTER = require('./components/filter/FilterEnums');

/// REACT COMPONENT ///////////////////////////////////////////////////////////
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
var NetCreate = function (_UNISYS$Component) {
  _inherits(NetCreate, _UNISYS$Component);

  function NetCreate() {
    _classCallCheck(this, NetCreate);

    var _this = _possibleConstructorReturn(this, (NetCreate.__proto__ || Object.getPrototypeOf(NetCreate)).call(this));

    UNISYS.IsReloadRequired();

    // URSYS TEST CODE - not used by NetCreate
    var SM = new UR.StateMgr('NETCREATE');
    SM._initializeState({ prop_1: 1 });
    // console.log('NetCreate: UR:', UR);
    // console.log('SM:StateMgr contains:', SM.state());

    // URSYS COMPONENT INIT - used by comment-mgr.js
    UR.COMMENT.Init();

    _this.state = {
      isConnected: true,
      isLoggedIn: false,
      requireLogin: _this.AppState('TEMPLATE').requireLogin,
      disconnectMsg: '',
      layoutNodesOpen: true,
      layoutFiltersOpen: false,
      commentStatusMessage: 'waiting...'
    };
    _this.OnDOMReady(function () {
      if (DBG) console.log(PR, 'OnDOMReady');
    });
    _this.OnReset(function () {
      if (DBG) console.log(PR, 'OnReset');
    });
    _this.OnStart(function () {
      if (DBG) console.log(PR, 'OnStart');
    });
    _this.OnAppReady(function () {
      if (DBG) console.log(PR, 'OnAppReady');
    });
    _this.OnRun(function () {
      if (DBG) console.log(PR, 'OnRun');
    });
    _this.OnDisconnect(function (e) {
      if (DBG) console.log(PR, 'OnDisconnect');
      // This is now handled by the UDATA "DISCONNECT" message.
      // so that we can show a message explaining the cause of disconnect.
      // this.setState({ isConnected: false });
    });

    _this.onStateChange_SESSION = _this.onStateChange_SESSION.bind(_this);
    _this.onStateChange_PANELSTATE = _this.onStateChange_PANELSTATE.bind(_this);
    _this.onDisconnect = _this.onDisconnect.bind(_this);
    _this.onFilterBtnClick = _this.onFilterBtnClick.bind(_this);

    _this.OnAppStateChange('SESSION', _this.onStateChange_SESSION);
    _this.OnAppStateChange('PANELSTATE', _this.onStateChange_PANELSTATE);

    _this.HandleMessage('DISCONNECT', _this.onDisconnect);
    return _this;
  }

  /// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  /** SESSION is called by SessionShell when the ID changes
      Show or hide netgraph depending on template settings.
   */


  _createClass(NetCreate, [{
    key: 'onStateChange_SESSION',
    value: function onStateChange_SESSION(decoded) {
      this.setState({ isLoggedIn: decoded.isValid });
    }
  }, {
    key: 'onStateChange_PANELSTATE',
    value: function onStateChange_PANELSTATE(data) {
      this.setState({ render: true }); // REVIEW: force render?
    }
  }, {
    key: 'onDisconnect',
    value: function onDisconnect(e) {
      var time = new Date().toLocaleTimeString();
      this.setState({
        isConnected: false,
        disconnectMsg: e.detail.message + ' ' + time
      });
    }

    /// REACT LIFECYCLE METHODS ///////////////////////////////////////////////////
    /// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    /** This is the root component, so this fires after all subcomponents have
        been fully rendered by render().
     */

  }, {
    key: 'componentDidMount',
    value: function componentDidMount() {
      // Init dragger
      var dragger = document.getElementById('dragger');
      dragger.onmousedown = this.handleMouseDown;
    }
  }, {
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      this.AppStateChangeOff('SESSION', this.onStateChange_SESSION);
    }

    /// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  }, {
    key: 'onFilterBtnClick',
    value: function onFilterBtnClick(e) {
      this.setState(function (state) {
        return { layoutFiltersOpen: !state.layoutFiltersOpen };
      });
    }

    /// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    /** Define the component structure of the web application
     */

  }, {
    key: 'render',
    value: function render() {
      var _state = this.state,
          isLoggedIn = _state.isLoggedIn,
          disconnectMsg = _state.disconnectMsg,
          layoutNodesOpen = _state.layoutNodesOpen,
          layoutFiltersOpen = _state.layoutFiltersOpen,
          commentStatusMessage = _state.commentStatusMessage,
          handleMessageUpdate = _state.handleMessageUpdate;

      // show or hide graph
      // Use 'visibiliity' css NOT React's 'hidden' so size is properly
      // calculated on init

      var hideGraph = 'visible';
      if (this.state.requireLogin && !isLoggedIn) hideGraph = 'hidden';

      /// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      var DISCONNECTED_MSG = this.state.isConnected ? '' : React.createElement(
        'div',
        { className: '--NetCreate_Fixed_Top_SaveAlert nc-savealert' },
        React.createElement(
          'div',
          null,
          React.createElement(
            'b',
            null,
            disconnectMsg,
            '!'
          ),
          ' Your changes will not be saved! Please report "',
          disconnectMsg,
          '" to your administrator to restart the graph.'
        )
      );
      /// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      var NAVBAR = React.createElement(
        'nav',
        { className: '--NetCreate_Fixed_Top nc-navbar', role: 'navigation' },
        React.createElement('div', { style: { width: '3rem' } }),
        React.createElement(SessionShell, null),
        React.createElement('div', { style: { flexGrow: 1 } }),
        React.createElement(_URCommentStatus2.default, {
          message: commentStatusMessage,
          handleMessageUpdate: handleMessageUpdate
        }),
        React.createElement('div', { style: { flexGrow: 1 } }),
        React.createElement('img', { src: 'images/netcreate-logo.svg', height: '25px', alt: 'NetCreate Logo' })
      );
      /// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      /// Force Help and Advanced to render AFTER main page
      /// so that focus tab order comes AFTER the main content.
      var NAVBTNS = React.createElement(
        'div',
        { className: 'nc-navbar-btns' },
        React.createElement(
          _URButtonToggle2.default,
          {
            title: 'Show/Hide Help',
            selected: _panelMgr2.default.HelpIsOpen(),
            onClick: _panelMgr2.default.ToggleHelp
          },
          React.createElement('img', { src: 'images/icn_help.svg', alt: 'Help' })
        ),
        React.createElement(
          _URButtonToggle2.default,
          {
            title: 'Show/Hide Advanced',
            selected: _panelMgr2.default.AdvancedIsOpen(),
            onClick: _panelMgr2.default.ToggleAdvanced
          },
          React.createElement('img', { src: 'images/icn_advanced.svg', alt: 'Advanced' })
        )
      );
      /// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

      return React.createElement(
        'main',
        { className: '--NetCreate nc-base', role: 'main' },
        DISCONNECTED_MSG,
        NAVBAR,
        React.createElement(
          'div',
          { className: '--NetCreate_Rows nc-rows', style: { visibility: hideGraph } },
          React.createElement(
            'div',
            { className: '--NetCreate_Columns nc-col-left', id: 'left' },
            React.createElement(NCSearch, null),
            React.createElement(NCNode, null)
          ),
          React.createElement(
            'div',
            { className: '--NetCreate_Column_NetView nc-col-middle' },
            React.createElement(_NCInfoPanel2.default, null),
            React.createElement(NCGraph, null)
          ),
          React.createElement(
            'div',
            { className: '--NetCreate_Column_Filters_Open nc-col-right', id: 'right' },
            React.createElement(
              'div',
              {
                id: 'filterpanel',
                className: layoutFiltersOpen ? 'filterpanelOpen' : ''
              },
              React.createElement(
                'button',
                {
                  className: 'cat',
                  id: 'filterpanel-btn',
                  type: 'button',
                  'aria-label': layoutFiltersOpen ? 'Close ' + FILTER.PANEL_LABEL : 'Open ' + FILTER.PANEL_LABEL,
                  onClick: this.onFilterBtnClick
                },
                FILTER.PANEL_LABEL
              ),
              React.createElement(_NCFiltersPanel2.default, { hidden: !layoutFiltersOpen })
            )
          ),
          NAVBTNS
        ),
        React.createElement('div', { id: 'dialog-container' }),
        React.createElement(_NCHelpPanel2.default, null),
        React.createElement(_NCAdvancedPanel2.default, null)
      ); // end return
    } // end render()

  }]);

  return NetCreate;
}(UNISYS.Component); // end class NetCreate

/// EXPORT UNISYS SIGNATURE ///////////////////////////////////////////////////
/// used in init.jsx to set module scope early
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -


NetCreate.UMOD = module.id;

/// EXPORT REACT COMPONENT ////////////////////////////////////////////////////
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
module.exports = NetCreate;
});

require.register("view/netcreate/comment-mgr.js", function(exports, require, module) {
'use strict';

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

/*//////////////////////////////// ABOUT \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\*\

  COMMENT MANAGER

  uses new ursys-min (minimal ursys for netcreate), see _mur/ directory

\*\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ * //////////////////////////////////////*/

var React = require('react');
var ReactDOM = require('react-dom');
var UNISYS = require('unisys/client');
var LOCKMGR = require('./lock-mgr');

var _require = require('ursys-min'),
    COMMENT = _require.COMMENT;

var DATASTORE = require('system/datastore');

var _require2 = require('system/util/constant'),
    ARROW_RIGHT = _require2.ARROW_RIGHT;

var _require3 = require('system/util/enum'),
    EDITORTYPE = _require3.EDITORTYPE;

var NCUI = require('./nc-ui');
var NCDialog = require('./components/NCDialog');
var SETTINGS = require('settings');

/// CONSTANTS & DECLARATIONS //////////////////////////////////////////////////
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
var DBG = false;
var PR = 'comment-mgr: ';

var CMTBTNOFFSET = 10;

/// INITIALIZE MODULE /////////////////////////////////////////////////////////
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
var MOD = UNISYS.NewModule(module.id);
var UDATA = UNISYS.NewDataLink(MOD);
var dialogContainerId = 'dialog-container'; // used to inject dialogs into NetCreate.jsx

var UID = void 0; // user id, cached.  nc-logic updates this on INITIALIZE and SESSION

/// UNISYS LIFECYCLE HOOKS ////////////////////////////////////////////////////
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/** lifecycle INITIALIZE handler
 */
MOD.Hook('INITIALIZE', function () {
  /// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - inside hook
  /** LOAD_COMMENT_DATACORE
   *  Called by nc-logic.m_PromiseLoadDB
   *  Primarily after LOADASSETS
   *  Loads comments from the database into dc-comments
   *  @param {Object} data
   *  @param {Object} data.users
   *  @param {Object} data.commenttypes
   *  @param {Object} data.comments
   */
  // Comment AddOn Handlers
  UDATA.HandleMessage('LOAD_COMMENT_DATACORE', MOD.LoadDB); // MEME equivalent: DATA_UPDATED
  /// STATE UPDATES and Message Handlers
  UDATA.OnAppStateChange('LOCKSTATE', m_urstate_LOCKSTATE);
  UDATA.HandleMessage('COMMENTS_UPDATE', MOD.HandleCOMMENTS_UPDATE);
  UDATA.HandleMessage('COMMENT_UPDATE', MOD.HandleCOMMENT_UPDATE);
  UDATA.HandleMessage('READBY_UPDATE', MOD.HandleREADBY_UPDATE);
  // Currently not used
  // UDATA.OnAppStateChange('COMMENTCOLLECTION', COMMENTCOLLECTION => console.log('comment-mgr.COMMENTCOLLECTION state updated:', COMMENTCOLLECTION));
  // UDATA.OnAppStateChange('COMMENTVOBJS', COMMENTVOBJS => console.error('comment-mgr.COMMENTVOBJS state updated', COMMENTVOBJS));
}); // end INITIALIZE Hook
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/** CONFIGURE fires after LOADASSETS, so this is a good place to put TEMPLATE
 *  validation.
 */
MOD.Hook('CONFIGURE', function () {
  if (DBG) console.log('comment-mgr CONFIGURE');
}); // end CONFIGURE Hook

/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/** The APP_READY hook is fired after all initialization phases have finished
 *  and may also fire at other times with a valid info packet
 */
MOD.Hook('APP_READY', function (info) {
  if (DBG) console.log('comment-mgr APP_READY');
}); // end APP_READY Hook

/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
MOD.LoadDB = function (data) {
  var TEMPLATE = UDATA.AppState('TEMPLATE');
  COMMENT.LoadTemplate(TEMPLATE.commentTypes);
  COMMENT.LoadDB(data);

  // After loading db, derive the view objects
  // This is needed to force update of the project comment count
  var uid = MOD.GetCurrentUserId();
  COMMENT.DeriveAllThreadedViewObjects(uid);
  var COMMENTCOLLECTION = COMMENT.GetCommentCollections();
  UDATA.SetAppState('COMMENTCOLLECTION', COMMENTCOLLECTION);
};

/// HELPER FUNCTIONS //////////////////////////////////////////////////////////
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

// From Evan O'Neil https://drive.google.com/drive/folders/1fJ5WiLMVQxxaqghrCOFwegmnYoOvst7E
MOD.COMMENTICON = React.createElement(
  'g',
  { transform: 'matrix(1.6,0,0,1.6,4,0)' },
  React.createElement('path', {
    className: 'svg-fill',
    d: 'M8 15C11.866 15 15 11.866 15 8C15 4.13401 11.866 1 8 1C4.13401 1 1 4.13401 1 8C1 9.15705 1.28072 10.2485 1.77778 11.21V15H8Z'
  }),
  React.createElement('path', {
    className: 'svg-outline',
    d: 'M3.17778 10.8696V13.6H8C11.0928 13.6 13.6 11.0928 13.6 8C13.6 4.90721 11.0928 2.4 8 2.4C4.90721 2.4 2.4 4.90721 2.4 8C2.4 8.92813 2.62469 9.79968 3.02143 10.5671L3.17778 10.8696ZM15 8C15 11.866 11.866 15 8 15H1.77778V11.21C1.28072 10.2485 1 9.15705 1 8C1 4.13401 4.13401 1 8 1C11.866 1 15 4.13401 15 8Z'
  }),
  React.createElement('path', { fill: 'none', d: 'M0 0h24v24H0z' })
);
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
function m_SetAppStateCommentCollections() {
  var COMMENTCOLLECTION = COMMENT.GetCommentCollections();
  UDATA.SetAppState('COMMENTCOLLECTION', COMMENTCOLLECTION);
}
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
function m_SetAppStateCommentVObjs() {
  var COMMENTVOBJS = COMMENT.GetCOMMENTVOBJS();
  UDATA.SetAppState('COMMENTVOBJS', COMMENTVOBJS);
}
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
function m_UpdateComment(comment) {
  var cobj = {
    collection_ref: comment.collection_ref,
    comment_id: comment.comment_id,
    comment_id_parent: comment.comment_id_parent,
    comment_id_previous: comment.comment_id_previous,
    comment_type: comment.comment_type,
    comment_createtime: comment.comment_createtime,
    comment_modifytime: comment.comment_modifytime,
    comment_isMarkedDeleted: comment.comment_isMarkedDeleted,
    commenter_id: comment.commenter_id,
    commenter_text: comment.commenter_text
  };
  var uid = MOD.GetCurrentUserId();
  COMMENT.UpdateComment(cobj, uid);
}
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
function m_urstate_LOCKSTATE(LOCKSTATE) {
  UDATA.SetAppState('CMTLOCKSTATE', LOCKSTATE);
}

/// API METHODS ///////////////////////////////////////////////////////////////
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

/// CONSTANTS
MOD.VIEWMODE = NCUI.VIEWMODE;

/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/// Collection Reference Generators
/// e.g. converts node id to "n32"
MOD.GetNodeCREF = function (nodeId) {
  return 'n' + nodeId;
};
MOD.GetEdgeCREF = function (edgeId) {
  return 'e' + edgeId;
};
MOD.GetProjectCREF = function (projectId) {
  return 'p' + projectId;
};

/// deconstructs "n32" into {type: "n", id: 32}
MOD.DeconstructCREF = function (cref) {
  var type = cref.substring(0, 1);
  var id = cref.substring(1);
  return { type: type, id: id };
};

/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/**
 * Generate a human friendly label based on the cref (e.g. `n21`, `e4`)
 * e.g. "n32" becomes {typeLabel "Node", sourceLabel: "32"}
 * @param {string} cref
 * @returns { typeLabel, sourceLabel } sourceLabel is undefined if the source has been deleted
 */
MOD.GetCREFSourceLabel = function (cref) {
  var _MOD$DeconstructCREF = MOD.DeconstructCREF(cref),
      type = _MOD$DeconstructCREF.type,
      id = _MOD$DeconstructCREF.id;

  var typeLabel = void 0;
  var node = void 0,
      edge = void 0,
      nodes = void 0,
      sourceNode = void 0,
      targetNode = void 0;
  var sourceLabel = void 0; // undefined if not found
  switch (type) {
    case 'n':
      typeLabel = 'Node';
      node = UDATA.AppState('NCDATA').nodes.find(function (n) {
        return n.id === Number(id);
      });
      if (!node) break; // node might be missing if comment references a node that was removed
      if (node) sourceLabel = node.label;
      break;
    case 'e':
      typeLabel = 'Edge';
      edge = UDATA.AppState('NCDATA').edges.find(function (e) {
        return e.id === Number(id);
      });
      if (!edge) break; // edge might be missing if the comment references an edge that was removed
      nodes = UDATA.AppState('NCDATA').nodes;
      sourceNode = nodes.find(function (n) {
        return n.id === Number(edge.source);
      });
      targetNode = nodes.find(function (n) {
        return n.id === Number(edge.target);
      });
      if (edge && sourceNode && targetNode) sourceLabel = '' + sourceNode.label + ARROW_RIGHT + targetNode.label;
      break;
    case 'p':
      typeLabel = 'Project'; // reserve for future use
      sourceLabel = id;
      break;
  }
  return { typeLabel: typeLabel, sourceLabel: sourceLabel };
};
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/**
 * Returns the position for the comment button
 * Adjusting for window position is done via GetCommentCollectionPosition
 */
MOD.GetCommentBtnPosition = function (cref) {
  var btn = document.getElementById(cref);
  if (!btn) throw new Error(PR + 'GetCommentCollectionPosition: Button not found ' + cref);
  var bbox = btn.getBoundingClientRect();
  return { x: bbox.left, y: bbox.top };
};
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/**
 * Returns the comment window position for the comment button
 * shifting the window to the left if it's too close to the edge of the screen.
 * or shifting it up if it's too close to the bottom of the screen.
 * x,y is the position of the comment button, offsets are then caclulated
 */
MOD.GetCommentCollectionPosition = function (_ref, isExpanded) {
  var x = _ref.x,
      y = _ref.y;

  var windowWidth = Math.min(screen.width, window.innerWidth);
  var windowHeight = Math.min(screen.height, window.innerHeight);
  var newX = void 0;
  if (windowWidth - x < 500) {
    newX = x - 410;
  } else {
    newX = x + CMTBTNOFFSET * 2;
  }
  var newY = y + window.scrollY;
  if (windowHeight - y < 250) {
    if (isExpanded) newY = y - 250;else newY = y - 150;
  } else {
    newY = y - CMTBTNOFFSET;
  }
  return { x: newX, y: newY };
};
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/// Open the object that the comment refers to
/// e.g. in Net.Create it's a node or edge object
MOD.OpenReferent = function (cref) {
  var _MOD$DeconstructCREF2 = MOD.DeconstructCREF(cref),
      type = _MOD$DeconstructCREF2.type,
      id = _MOD$DeconstructCREF2.id;

  var edge = void 0;
  switch (type) {
    case 'n':
      UDATA.LocalCall('SOURCE_SELECT', { nodeIDs: [parseInt(id)] });
      break;
    case 'e':
      edge = UDATA.AppState('NCDATA').edges.find(function (e) {
        return e.id === Number(id);
      });
      UDATA.LocalCall('SOURCE_SELECT', { nodeIDs: [edge.source] }).then(function () {
        UDATA.LocalCall('EDGE_SELECT', { edgeId: edge.id });
      });
      break;
    case 'p':
      // reserve for future use
      // do something?
      break;
  }
};
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/// Open comment using a comment id
MOD.OpenComment = function (cref, cid) {
  var _MOD$DeconstructCREF3 = MOD.DeconstructCREF(cref),
      type = _MOD$DeconstructCREF3.type,
      id = _MOD$DeconstructCREF3.id;

  var edge = void 0;
  switch (type) {
    case 'n':
      UDATA.LocalCall('SOURCE_SELECT', { nodeIDs: [parseInt(id)] }).then(function () {
        UDATA.LocalCall('COMMENT_SELECT', { cref: cref }).then(function () {
          var commentEl = document.getElementById(cid);
          commentEl.scrollIntoView({ behavior: 'smooth' });
        });
      });
      break;
    case 'e':
      edge = UDATA.AppState('NCDATA').edges.find(function (e) {
        return e.id === Number(id);
      });
      UDATA.LocalCall('SOURCE_SELECT', { nodeIDs: [edge.source] }).then(function () {
        UDATA.LocalCall('EDGE_SELECT', { edgeId: edge.id }).then(function () {
          UDATA.LocalCall('COMMENT_SELECT', { cref: cref }).then(function () {
            var commentEl = document.getElementById(cid);
            commentEl.scrollIntoView({ behavior: 'smooth' });
          });
        });
      });
      break;
    case 'p':
      // reserve for future use
      // do something?
      break;
  }
};

/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/// User Id
MOD.SetCurrentUserId = function (uid) {
  return UID = uid;
};
MOD.GetCurrentUserId = function () {
  return UID;
}; // called by other comment classes
MOD.GetUserName = function (uid) {
  return COMMENT.GetUserName(uid);
};
MOD.IsAdmin = function () {
  return SETTINGS.IsAdmin();
};

/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/// Comment Type
MOD.GetCommentTypes = function () {
  return COMMENT.GetCommentTypes();
};
MOD.GetCommentType = function (slug) {
  return COMMENT.GetCommentType(slug);
};
MOD.GetDefaultCommentType = function () {
  return COMMENT.GetDefaultCommentType();
};

/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/// Global Operations
MOD.MarkAllRead = function () {
  var uid = MOD.GetCurrentUserId();
  var crefs = COMMENT.GetCrefs();
  crefs.forEach(function (cref) {
    m_DBUpdateReadBy(cref, uid);
    COMMENT.MarkRead(cref, uid);
  });
  COMMENT.DeriveAllThreadedViewObjects(uid);
  m_SetAppStateCommentCollections();
};

/// COMMENT COLLECTIONS ///////////////////////////////////////////////////////
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/// Comment Collections
MOD.GetCommentCollection = function (uiref) {
  return COMMENT.GetCommentCollection(uiref);
};
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/*
  OpenCommentCollection

  The requests come from four sources:
    * Node Editor
    * Edge Editor
    * Node Table
    * Edge Table

  URCommentVBtn is a UI component that passes clicks
  to URCommentCollectionMgr via UR.Publish(`CMT_COLLECTION_SHOW`) calls

  URCommentSVGBtn is a purely visual component that renders SVG buttons
  as symbols and displays the comment count and selection status.
  It pases the click events to URCommentVBtn.

  MAP
    * URCommentStatus
      > URCommentCollectionMgr
        > URCommentThread
          > URCommentVBtn
            > URCommentSVGBtn


  HOW IT WORKS
  When a Node Editor, Edge Editor, Node Table, or Edge Table clicks on the
  URCommentVBtn, URCommentCollectionMgr will:
  * Add the requested Thread to the URCommentCollectionMgr
  * Open the URCommentThread
  * When the URCommentThread is closed, it will be removed from the URCommentCollectionMgr

*/
MOD.OpenCommentCollection = function (cref, position) {
  // Validate
  if (cref === undefined) throw new Error('comment-mgr.OpenCommentCollection: missing cref data ' + JSON.stringify(cref));
  if (position === undefined || position.x === undefined || position.y === undefined) throw new Error('comment-mgr.OpenCommentCollection: missing position data ' + JSON.stringify(position));
  position.x = parseInt(position.x); // handle net call data
  position.y = parseInt(position.y);
  // 0. If the comment is already open, do nothing
  var openComments = MOD.GetOpenComments(cref);
  if (openComments) {
    MOD.CloseCommentCollection(cref, cref, MOD.GetCurrentUserId());
    return; // already open, close it
  }
  // 1. Position the window to the right of the click
  var commentThreadWindowIsExpanded = MOD.GetCommentCollectionCount(cref);
  var collectionPosition = MOD.GetCommentCollectionPosition(position, commentThreadWindowIsExpanded);

  // 2. Update the state
  MOD.UpdateCommentUIState(cref, { cref: cref, isOpen: true });
  // 3. Open the collection in the collection manager
  UDATA.LocalCall('CMT_COLLECTION_SHOW', { cref: cref, position: collectionPosition });
};
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/**
 * Called by URCommentVBtn
 * @param {string} cref
 */
MOD.OpenCommentCollectionByCref = function (cref) {
  var cmtPosition = MOD.GetCommentBtnPosition(cref);
  MOD.OpenCommentCollection(cref, {
    x: cmtPosition.x + CMTBTNOFFSET,
    y: cmtPosition.y + CMTBTNOFFSET
  });
};
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/// Open comment inside a collection using a comment id
/// NOTE this is NOT used by SVGButtons
MOD.OpenCommentStatusComment = function (cref, cid) {
  var _MOD$DeconstructCREF4 = MOD.DeconstructCREF(cref),
      type = _MOD$DeconstructCREF4.type,
      id = _MOD$DeconstructCREF4.id;

  var parms = void 0;

  // if a comment is being edited...
  // - don't close all comments
  // - don't open a new one
  if (MOD.GetCommentsAreBeingEdited()) {
    var CMTSTATUS = UDATA.AppState('CMTSTATUS');
    CMTSTATUS.dialog = {
      isOpen: true,
      message: 'Please finish editing your comment before opening a different comment!',
      okmessage: 'OK',
      onOK: m_CloseRemoveCommentDialog,
      cancelmessage: '',
      onCancel: undefined
    };

    UDATA.SetAppState('CMTSTATUS', CMTSTATUS);
    return;
  }

  MOD.CloseAllCommentCollectionsWithoutMarkingRead();

  var edge = void 0;
  switch (type) {
    case 'p':
      // project (from MEME, currently not used) reserved for future use
      MOD.OpenCommentCollectionByCref('projectcmt');
      break;
    case 'n':
      UDATA.LocalCall('SOURCE_SELECT', { nodeIDs: [parseInt(id)] }).then(function () {
        MOD.OpenCommentCollectionByCref(cref);
        // wait for the comment to open before scrolling to the current comment
        // REVIEW: Do this as a callback?
        //         Problem is that this is a long chain for the callback
        //         - OpenCommentCollectionByCref
        //         - OpenCommentCollection
        //         - UpdateCommentUIState
        //         - m_SetAppStateCommentCollections
        //         - UDATA.SetAppState('COMMENTCOLLECTION)
        setTimeout(function () {
          var commentEl = document.getElementById(cid);
          commentEl.scrollIntoView({ behavior: 'smooth' });
        }, 100);
      });
      break;
    case 'e':
      edge = UDATA.AppState('NCDATA').edges.find(function (e) {
        return e.id === Number(id);
      });
      UDATA.LocalCall('SOURCE_SELECT', { nodeIDs: [edge.source] }).then(function () {
        UDATA.LocalCall('EDGE_SELECT', { edgeId: edge.id }).then(function () {
          MOD.OpenCommentCollectionByCref(cref);
          // wait for the comment to open before scrolling to the current comment
          // REVIEW: Do this as a callback?
          setTimeout(function () {
            var commentEl = document.getElementById(cid);
            commentEl.scrollIntoView({ behavior: 'smooth' });
          });
        });
      });
      break;
  }
};
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/// DEPRECATED -- URCommentVBtn handles this currently
///               But we might want to restore the ability to toggle in place.
// /**
//  * Used by NCNodeTable and NCEdgeTable to open/close the comment thread
//  * If a comment is already opened by one button (e.g. node), and the user
//  * clicks on another comment button (e.g. NodeTable), the new one will open,
//  * and the old one closed.
//  * Called by URCommentBtn, NCNodeTable, and NCEdgeTable
//  * @param {TCommentUIRef} uiref comment button id
//  * @param {TCollectionRef} cref collection_ref
//  * @param {Object} position x, y position of the comment button
//  */
// MOD.ToggleCommentCollection = (uiref, cref, position) => {
//   const uid = MOD.GetCurrentUserId();
//   // is the comment already open?
//   const open_uiref = MOD.GetOpenComments(cref);
//   if (open_uiref === uiref) {
//     // already opened by THIS uiref, so toggle it closed.
//     MOD.CloseCommentCollection(uiref, cref, uid);
//   } else if (open_uiref !== undefined) {
//     // already opened by SOMEONE ELSE, so close it, then open the new one
//     MOD.CloseCommentCollection(open_uiref, cref, uid);
//     // REVIEW remove uiref?
//     MOD.OpenCommentCollection(uiref, cref, position);
//   } else {
//     // no comment is open, so open the new one
//     // REVIEW remove uiref?
//     MOD.OpenCommentCollection(uiref, cref, position);
//   }
// };
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/**
 * Marks a comment as read, and closes the component.
 * Called by NCCommentBtn when clicking "Close"
 * @param {Object} uiref comment button id
 * @param {Object} cref collection_ref
 * @param {Object} uid user id
 */
MOD.CloseCommentCollection = function (uiref, cref, uid) {
  if (!MOD.OKtoClose(cref)) {
    // Comment is still being edited, prevent close
    // eslint-disable-next-line no-alert
    alert('This comment is still being edited!  Please Save or Cancel before closing the comment.');
    return;
  }
  // OK to close
  UDATA.LocalCall('CMT_COLLECTION_HIDE', { cref: cref });
  COMMENT.CloseCommentCollection(uiref, cref, uid);
  m_SetAppStateCommentCollections();
};
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/**
 * Marks a comment as read, and closes the component.
 * Called by NCCommentBtn when clicking "Close"
 * @param {Object} uiref comment button id (note kept for Net.Create compatibility)
 * @param {Object} cref collection_ref
 * @param {Object} uid user id
 */
MOD.CloseCommentCollectionAndMarkRead = function (uiref, cref, uid) {
  if (!MOD.OKtoClose(cref)) {
    // Comment is still being edited, prevent close
    // eslint-disable-next-line no-alert
    alert('This comment is still being edited!  Please Save or Cancel before closing the comment.');
    return;
  }
  // OK to close
  UDATA.LocalCall('CMT_COLLECTION_HIDE', { cref: cref });
  // Update the readby
  m_DBUpdateReadBy(cref, uid);
  COMMENT.CloseCommentCollection(uiref, cref, uid);
  m_SetAppStateCommentCollections();
};
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/**
 * Closes all comment collections without marking them as read.
 * Used by comment status when user clicks on status updates to display
 * updated comments.
 * @param {*} uid
 */
MOD.CloseAllCommentCollectionsWithoutMarkingRead = function () {
  var uid = MOD.GetCurrentUserId();
  UDATA.LocalCall('CMT_COLLECTION_HIDE_ALL');
  COMMENT.CloseAllCommentCollections(uid);
};
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
MOD.GetCommentCollectionCount = function (cref) {
  var ccol = COMMENT.GetCommentCollection(cref);
  return ccol ? ccol.commentCount : 0;
};
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
MOD.GetCommentStats = function () {
  var uid = MOD.GetCurrentUserId();
  return COMMENT.GetCommentStats(uid);
};
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
MOD.GetCommentThreadPosition = function (commentButtonId) {
  var btn = document.getElementById(commentButtonId);
  var cmtbtnx = btn.getBoundingClientRect().left;
  var windowWidth = Math.min(screen.width, window.innerWidth);
  var x = void 0;
  if (windowWidth - cmtbtnx < 500) {
    x = cmtbtnx - 405;
  } else {
    x = cmtbtnx + 35;
  }
  var y = btn.getBoundingClientRect().top + window.scrollY;
  return { x: x, y: y };
};

/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/**
 * Comment UI State
 * @param {string} uiref
 * @returns {TCommentOpenState} {isOpen: boolean, cref: string}
 */
MOD.GetCommentUIState = function (uiref) {
  return COMMENT.GetCommentUIState(uiref);
};
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/**
 * Used to open/close the comment thread
 * @param {string} uiref
 * @param {TCommentOpenState} openState
 */
MOD.UpdateCommentUIState = function (uiref, openState) {
  COMMENT.UpdateCommentUIState(uiref, openState);
  m_SetAppStateCommentCollections();
};

/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/// Open Comments
MOD.GetOpenComments = function (cref) {
  return COMMENT.GetOpenComments(cref);
};

/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/// Editable Comments (comments being edited)
MOD.RegisterCommentBeingEdited = function (cid) {
  COMMENT.RegisterCommentBeingEdited(cid);
};
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
MOD.DeRegisterCommentBeingEdited = function (cid) {
  return COMMENT.DeRegisterCommentBeingEdited(cid);
};

/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/// Are ANY comments being edited?
/// Returns True if ANY comment is being edited
/// * Used by comment status when user clicks on a comment id to view a saved comment
///   to prevent closing the comment collection if a comment is being edited.
/// * Also used by URCommentThread to determine whether "Click to add" is displayed
MOD.GetCommentsAreBeingEdited = function () {
  return COMMENT.GetCommentsAreBeingEdited();
};

/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
MOD.OKtoClose = function (cref) {
  var cvobjs = MOD.GetThreadedViewObjects(cref);
  var isBeingEdited = false;
  cvobjs.forEach(function (cvobj) {
    if (COMMENT.GetCommentBeingEdited(cvobj.comment_id)) isBeingEdited = true;
  });
  return !isBeingEdited;
};

/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/// Threaded View Objects
MOD.GetThreadedViewObjects = function (cref, uid) {
  return COMMENT.GetThreadedViewObjects(cref, uid);
};

/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/// Comment View Objects
MOD.GetCommentVObj = function (cref, cid) {
  return COMMENT.GetCommentVObj(cref, cid);
};

/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/// Comments
MOD.GetComment = function (cid) {
  return COMMENT.GetComment(cid);
};
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
MOD.GetUnreadRepliesToMe = function (uid) {
  return COMMENT.GetUnreadRepliesToMe(uid);
};
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
MOD.GetUnreadComments = function () {
  return COMMENT.GetUnreadComments();
};
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/**
 * @param {Object} cobj Comment Object
 */
MOD.AddComment = function (cobj) {
  // This just generates a new ID, but doesn't update the DB
  DATASTORE.PromiseNewCommentID().then(function (newCommentID) {
    cobj.comment_id = newCommentID;
    COMMENT.AddComment(cobj); // creates a comment vobject
    m_SetAppStateCommentVObjs();
  });
};
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/** User clicks Edit on a comment
 *  @param {TCommentID} comment_id
 */
MOD.UIEditComment = function (comment_id) {
  MOD.RegisterCommentBeingEdited(comment_id);
  MOD.LockComment(comment_id);
  UDATA.NetSend('COMMENT_UPDATE_PERMISSIONS');
};
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/** User clicks Cancel on a comment
 *  @param {TCommentID} comment_id
 */
MOD.UICancelComment = function (comment_id) {
  MOD.DeRegisterCommentBeingEdited(comment_id);
  MOD.UnlockComment(comment_id);
  UDATA.NetSend('COMMENT_UPDATE_PERMISSIONS');
};
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/** User clicks Save coment
 *  @param {TComment} cobj
 */
MOD.UISaveComment = function (cobj) {
  MOD.UnlockComment(cobj.comment_id);
  MOD.DeRegisterCommentBeingEdited(cobj.comment_id);
  MOD.UpdateComment(cobj);
  UDATA.NetSend('COMMENT_UPDATE_PERMISSIONS');
};
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/**
 * Update the ac/dc comments, then save it to the db
 * This will also broadcast COMMENT_UPDATE so other clients on the network
 * update the data to match the server.
 * @param {Object} cobj
 */
MOD.UpdateComment = function (cobj) {
  COMMENT.UpdateComment(cobj);
  m_DBUpdateComment(cobj);
  m_SetAppStateCommentVObjs();
};
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/**
 * Removing a comment can affect multiple comments, so this is done
 * via a batch operation.  We queue up all of the comment changes
 * using the logic for removing/re-arranging the comments in
 * ac-comments/dc-comments, then write out the db updates. This way
 * the db updates can be blindly accomplished in a single operation.
 *
 * Removing is a two step process:
 * 1. Show confirmation dialog
 * 2. Execute the removal
 *
 * Also used by "Cancel" button to remove a comment being edited
 * @param {Object} parms
 * @param {string} parms.collection_ref
 * @param {string} parms.comment_id
 * @param {string} parms.id
 * @param {string} parms.uid
 * @param {boolean} parms.isAdmin
 * @param {boolean} parms.showCancelDialog
 * @param {boolean} parms.skipDialog
 */
MOD.RemoveComment = function (parms) {
  var confirmMessage = void 0,
      okmessage = void 0,
      cancelmessage = void 0;
  if (parms.showCancelDialog) {
    // Are you sure you want to cancel?
    confirmMessage = 'Are you sure you want to cancel editing this comment #' + parms.id + '?';
    okmessage = 'Cancel Editing and Delete';
    cancelmessage = 'Go Back to Editing';
  } else {
    // show delete confirmaiton dialog
    // Are you sure you want to delete?
    parms.isAdmin = SETTINGS.IsAdmin();
    confirmMessage = parms.isAdmin ? 'Are you sure you want to delete this comment #' + parms.id + ' and ALL related replies (admin only)?' : 'Are you sure you want to delete this comment #' + parms.id + '?';
    okmessage = 'Delete';
    cancelmessage = "Don't Delete";
  }

  var CMTSTATUS = UDATA.AppState('CMTSTATUS');
  if (parms.skipDialog) {
    m_ExecuteRemoveComment(event, parms);
  } else {
    CMTSTATUS.dialog = {
      isOpen: true,
      message: confirmMessage,
      okmessage: okmessage,
      onOK: function onOK(event) {
        return m_ExecuteRemoveComment(event, parms);
      },
      cancelmessage: cancelmessage,
      onCancel: m_CloseRemoveCommentDialog
    };
  }
  UDATA.SetAppState('CMTSTATUS', CMTSTATUS);

  MOD.DeRegisterCommentBeingEdited(parms.comment_id);
  MOD.UnlockComment(parms.comment_id);

  UDATA.LocalCall('COMMENT_UPDATE_PERMISSIONS');
};
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/**
 * The db call is made AFTER ac/dc handles the removal and the logic of
 * relinking comments.  The db call is dumb, all the logic is in dc-comments.
 * @param {Object} event
 * @param {Object} parms
 * @param {Object} parms.collection_ref
 * @param {Object} parms.comment_id
 * @param {Object} parms.uid
 */
function m_ExecuteRemoveComment(event, parms, cb) {
  var queuedActions = COMMENT.RemoveComment(parms);
  m_DBRemoveComment(queuedActions);
  m_SetAppStateCommentVObjs();
  m_CloseRemoveCommentDialog();
  if (typeof cb === 'function') cb();
}
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
function m_CloseRemoveCommentDialog() {
  var CMTSTATUS = UDATA.AppState('CMTSTATUS');
  CMTSTATUS.dialog = { isOpen: false };
  UDATA.SetAppState('CMTSTATUS', CMTSTATUS);
}
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/**
 * Requested when a node/edge is deleted
 * @param {string} cref
 */
MOD.RemoveAllCommentsForCref = function (cref) {
  var uid = MOD.GetCurrentUserId();
  var parms = { uid: uid, collection_ref: cref };
  var queuedActions = COMMENT.RemoveAllCommentsForCref(parms);
  m_DBRemoveComment(queuedActions);
  m_SetAppStateCommentVObjs();
};

/// EVENT HANDLERS ////////////////////////////////////////////////////////////
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/**
 * Respond to network COMMENTS_UPDATE Messages
 * Usually used after a comment deletion to handle a batch of comment updates
 * This can include
 *   * updates to existing comments (marked DELETE or re-linked to other removed comment)
 *   * removal of comment altogether
 * This a network call that is used to update local state for other browsers
 * (does not trigger another DB update)
 * @param {Object[]} dataArray
 */
MOD.HandleCOMMENTS_UPDATE = function (dataArray) {
  if (DBG) console.log('COMMENTS_UPDATE======================', dataArray);
  var updatedComments = [];
  var removedComments = [];
  var updatedCrefs = new Map();
  dataArray.forEach(function (data) {
    if (data.comment) {
      updatedComments.push(data.comment);
      updatedCrefs.set(data.comment.collection_ref, 'flag');
    }
    if (data.commentID) removedComments.push(data.commentID);
    if (data.collection_ref) updatedCrefs.set(data.collection_ref, 'flag');
  });
  var uid = MOD.GetCurrentUserId();
  COMMENT.HandleRemovedComments(removedComments, uid);
  COMMENT.HandleUpdatedComments(updatedComments, uid);

  var crefs = [].concat(_toConsumableArray(updatedCrefs.keys()));
  crefs.forEach(function (cref) {
    return COMMENT.DeriveThreadedViewObjects(cref, uid);
  });

  // and broadcast a state change
  m_SetAppStateCommentCollections();
  m_SetAppStateCommentVObjs();
};
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/**
 * Respond to COMMENT_UPDATE Messages from the network
 * After the server/db saves the new/updated comment, COMMENT_UPDATE is
 * broadcast across the network.  This a network call that is used to update
 * the local state to match the server's comments.
 * (does not trigger another DB update)
 * @param {Object} data
 * @param {Object} data.comment cobj
 */
MOD.HandleCOMMENT_UPDATE = function (data) {
  if (DBG) console.log('COMMENT_UPDATE======================', data);

  // If a new comment is sent over the network
  // and the incoming comment conflicts with a comment being edited
  // then re-link the editing comment to point to the incoming comment

  var incomingComment = data.comment;

  var editingCommentId = COMMENT.GetCommentsBeingEdited().values().next().value;
  var editingComment = COMMENT.GetComment(editingCommentId);

  if (editingComment) {
    // conflict if both think they're the root
    if (incomingComment.comment_id_parent === '' && incomingComment.comment_id_previous === '' && editingComment.comment_id_parent === '' && editingComment.comment_id_previous === '') {
      if (DBG) console.error('CONFLICT! both think they are root');
      // Re-link the comment to the incoming
      editingComment.comment_id_previous = incomingComment.comment_id;
    }
    // conflict if previous of both are the same
    if (incomingComment.comment_id_previous === editingComment.comment_id_previous) {
      if (DBG) console.error('CONFLICT! both think they are reply to same previous');
      // Re-link the comment to the incoming
      editingComment.comment_id_previous = incomingComment.comment_id;
    }
    // conflict if parent of both are the same and previous are blank (new reply root)
    if (incomingComment.comment_id_parent === editingComment.comment_id_parent && incomingComment.comment_id_previous === '' && editingComment.comment_id_previous === '') {
      if (DBG) console.error('CONFLICT! both think they are reply to same parent');
      // Re-link the comment to the incoming
      editingComment.comment_id_previous = incomingComment.comment_id;
    }
  }

  var updatedComments = [{ comment: incomingComment }, { comment: editingComment }];
  MOD.HandleCOMMENTS_UPDATE(updatedComments);
};
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
MOD.HandleREADBY_UPDATE = function (data) {
  if (DBG) console.log('READBY_UPDATE======================');
  // Not used currently
  // Use this if we need to update READBY status from another user.
  // Since "read" status is only displayed for the current user,
  // we don't need to worry about "read" status updates from other users
  // across the network.
  //
  // The exception to this would be if we wanted to support a single user
  // logged in to multiple browsers.
};

/// DB CALLS //////////////////////////////////////////////////////////////////
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
MOD.LockComment = function (comment_id) {
  UDATA.NetCall('SRV_DBLOCKCOMMENT', { commentID: comment_id }).then(function () {
    UDATA.LocalCall('SELECTMGR_SET_MODE', { mode: 'comment_edit' });
  });
};
MOD.UnlockComment = function (comment_id) {
  UDATA.NetCall('SRV_DBUNLOCKCOMMENT', { commentID: comment_id }).then(function () {
    UDATA.LocalCall('SELECTMGR_SET_MODE', { mode: 'normal' });
  });
};
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
function m_DBUpdateComment(cobj, cb) {
  var comment = {
    collection_ref: cobj.collection_ref,
    comment_id: cobj.comment_id,
    comment_id_parent: cobj.comment_id_parent,
    comment_id_previous: cobj.comment_id_previous,
    comment_type: cobj.comment_type,
    comment_createtime: cobj.comment_createtime,
    comment_modifytime: cobj.comment_modifytime,
    comment_isMarkedDeleted: cobj.comment_isMarkedDeleted,
    commenter_id: cobj.commenter_id,
    commenter_text: cobj.commenter_text
  };
  UDATA.LocalCall('DB_UPDATE', { comment: comment }).then(function (data) {
    if (typeof cb === 'function') cb(data);
  });
}
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
function m_DBUpdateReadBy(cref, uid) {
  // Get existing readby
  var cvobjs = COMMENT.GetThreadedViewObjects(cref, uid);
  var readbys = [];
  cvobjs.forEach(function (cvobj) {
    var commenter_ids = COMMENT.GetReadby(cvobj.comment_id) || [];
    // Add uid if it's not already marked
    if (!commenter_ids.includes(uid)) commenter_ids.push(uid);
    var readby = {
      comment_id: cvobj.comment_id,
      commenter_ids: commenter_ids
    };
    readbys.push(readby);
  });
  UDATA.LocalCall('DB_UPDATE', { readbys: readbys }).then(function (data) {
    if (typeof cb === 'function') cb(data);
  });
}
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/**
 * Executes multiple database operations via a batch of commands:
 * - `cobjs` will be updated
 * - `commentIDs` will be deleted
 * @param {Object[]} items [ ...cobj, ...commentID ]
 * @param {function} cb callback
 */
function m_DBRemoveComment(items, cb) {
  UDATA.LocalCall('DB_BATCHUPDATE', { items: items }).then(function (data) {
    if (typeof cb === 'function') cb(data);
  });
}

/// EXPORT CLASS DEFINITION ///////////////////////////////////////////////////
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
module.exports = MOD;
});

require.register("view/netcreate/components/MURPropertyGroup.jsx", function(exports, require, module) {
'use strict';

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _MURTextInput = require('./MURTextInput');

var _MURTextInput2 = _interopRequireDefault(_MURTextInput);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/*///////////////////////////////// ABOUT \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\*\

  MUR Property Group Component
  used by mur-settings-client.jsx to generate a text input component

\*\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ * /////////////////////////////////////*/

var React = require('react');
var RSB = require('./react-settings-bridge');
var DerefGroupDef = RSB.DerefGroupDef;


/// CONSTANTS /////////////////////////////////////////////////////////////////
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
var DBG = true;

/// HELPER METHODS ////////////////////////////////////////////////////////////
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
function GroupHeader(props) {
  var label = props.label;

  return React.createElement(
    'span',
    null,
    React.createElement(
      'b',
      null,
      label
    )
  );
}

/// COMPONENTS ////////////////////////////////////////////////////////////////
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
function PropertyGroup(props) {
  var groupDef = props.groupDef,
      metaDef = props.metaDef;

  if (DBG) {
    if ((typeof groupDef === 'undefined' ? 'undefined' : _typeof(groupDef)) !== 'object') return React.createElement(
      'p',
      null,
      'PropertyGroup bad groupDef'
    );
    if ((typeof metaDef === 'undefined' ? 'undefined' : _typeof(metaDef)) !== 'object') return React.createElement(
      'p',
      null,
      'PropertyGroup bad metaDef'
    );
  }
  var gdata = DerefGroupDef(groupDef);
  if (gdata.error) return React.createElement(
    'p',
    null,
    'PropertyGroup bad groupDef ',
    gdata.error
  );
  var groupName = gdata.groupName,
      properties = gdata.properties;

  var propList = Object.keys(properties); // list of property names
  var meta = metaDef[groupName];

  var _ref = meta._groupMeta || {},
      title = _ref.title,
      description = _ref.description;

  var key = 'pg-' + groupName;
  return React.createElement(
    'div',
    { key: key, style: { margin: '1rem' } },
    React.createElement(
      'details',
      { open: true },
      React.createElement(
        'summary',
        null,
        React.createElement(GroupHeader, { label: title || groupName })
      ),
      description && React.createElement(
        'p',
        { style: { color: 'gray', fontStyle: 'italic' } },
        description
      ),
      propList.map(function (p) {
        if (properties[p].type) {
          var _key = 'in-' + groupName + '.' + p;
          return React.createElement(_MURTextInput2.default, { propDef: properties[p], metaDef: meta[p], key: _key });
        }
        return null;
      })
    )
  );
}

/// EXPORTS ///////////////////////////////////////////////////////////////////
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
module.exports = PropertyGroup;
});

require.register("view/netcreate/components/MURSettingsEditor.jsx", function(exports, require, module) {
'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

/*//////////////////////////////// ABOUT \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\*\

  MUR Property Editor Panel
  (test replacement `NCTemplate.jsx`)

  Requires that init.jsx has called UR.ViewLib.DeclareComponents() to make
  custom web components available _before_ React renders anything.

\*\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ * //////////////////////////////////////*/

var React = require('react');

var _require = require('ursys-min'),
    ConsoleStyler = _require.ConsoleStyler;

var RSB = require('./react-settings-bridge');
var PropertyGroup = require('./MURPropertyGroup');

var _require2 = require('deep-object-diff'),
    diff = _require2.diff;

/// RUNTIME INITIALIZATION ////////////////////////////////////////////////////
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -


var DBG = true;
var PR = ConsoleStyler('SetEdit', 'TagBlue');
var LOG = console.log.bind(console);
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/** a react context object, providing access to the values prop of the
 *  SettingsProvider. It has to be defined within the React App root */
var SettingsContext = RSB.GetSettingsContext(); // get the settings context

/// REACT COMPONENT ///////////////////////////////////////////////////////////
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
function MURSettingsEditor() {
  var api = RSB.useSettings();

  var _React$useState = React.useState(api.lastSettingsUpdate),
      _React$useState2 = _slicedToArray(_React$useState, 2),
      oldState = _React$useState2[0],
      saveOldState = _React$useState2[1];

  var _React$useState3 = React.useState(true),
      _React$useState4 = _slicedToArray(_React$useState3, 2),
      showToDo = _React$useState4[0],
      setShowToDo = _React$useState4[1];

  function saveChanges() {
    saveOldState(api.lastSettingsUpdate);
    LOG.apply(undefined, _toConsumableArray(PR('would save changes')));
  }

  function revertChanges() {
    LOG.apply(undefined, _toConsumableArray(PR('would revert changes')));
  }

  var propDefs = RSB.GetPropertyDefs();
  var metaDefs = RSB.GetMetaDefs();

  var _RSB$GetStyles = RSB.GetStyles(),
      opBtnStyle = _RSB$GetStyles.opBtnStyle,
      modColor = _RSB$GetStyles.modColor;

  var mod = api.lastSettingsUpdate !== oldState;
  var backgroundColor = mod ? modColor : 'white';
  var color = mod ? 'black' : 'gray';
  var btnStyle = _extends({}, opBtnStyle, { backgroundColor: backgroundColor, color: color });
  var toDoList = React.createElement(
    'div',
    null,
    React.createElement(
      'ul',
      null,
      React.createElement(
        'li',
        null,
        'graph name'
      ),
      React.createElement(
        'li',
        null,
        'graph description'
      ),
      React.createElement(
        'li',
        null,
        'secret key (for tokens)'
      ),
      React.createElement(
        'li',
        null,
        'admin password'
      ),
      React.createElement(
        'li',
        null,
        'Node Definitions',
        React.createElement(
          'ul',
          null,
          React.createElement(
            'li',
            null,
            'Node Type',
            React.createElement(
              'ul',
              null,
              React.createElement(
                'li',
                null,
                '1: [label, color]'
              ),
              React.createElement(
                'li',
                null,
                '2: [label, color]'
              ),
              React.createElement(
                'li',
                null,
                '...7'
              )
            )
          ),
          React.createElement(
            'li',
            null,
            'Notes -- label, type, hide'
          ),
          React.createElement(
            'li',
            null,
            'Info -- label, type, hide'
          ),
          React.createElement(
            'li',
            null,
            'InfoSource -- label, type, hide'
          )
        )
      ),
      React.createElement(
        'li',
        null,
        'Edge Definitions',
        React.createElement(
          'ul',
          null,
          React.createElement(
            'li',
            null,
            'Edge Type',
            React.createElement(
              'ul',
              null,
              React.createElement(
                'li',
                null,
                '1: [label, color]'
              ),
              React.createElement(
                'li',
                null,
                '2: [label, color]'
              ),
              React.createElement(
                'li',
                null,
                '...7'
              )
            )
          ),
          React.createElement(
            'li',
            null,
            'Notes -- label, type, hide'
          ),
          React.createElement(
            'li',
            null,
            'InfoOrigin -- label, type, hide'
          ),
          React.createElement(
            'li',
            null,
            'Citation -- label, type, hide'
          ),
          React.createElement(
            'li',
            null,
            'Category -- label, type, hide'
          )
        )
      ),
      React.createElement(
        'li',
        null,
        'Comment Types',
        React.createElement(
          'ul',
          null,
          React.createElement(
            'li',
            null,
            'slug'
          ),
          React.createElement(
            'li',
            null,
            'label'
          ),
          React.createElement(
            'li',
            null,
            'prompts',
            React.createElement(
              'ul',
              null,
              React.createElement(
                'li',
                null,
                '1: [format, prompt, help, feedback]'
              ),
              React.createElement(
                'li',
                null,
                '2: [format, prompt, help, feedback]'
              )
            )
          )
        )
      )
    ),
    React.createElement(
      'p',
      null,
      'NOTES: '
    ),
    React.createElement(
      'ul',
      null,
      React.createElement(
        'li',
        null,
        '`isProvenance` will place a field in the Proveannce tab. But we do not expect teachers to need to change that.'
      ),
      React.createElement(
        'li',
        null,
        'Ideally teachers can add and remove new Node and Edge field definitions, rather merely re-purposing existing fields. e.g. they might add an Event Date field.'
      )
    )
  );

  return React.createElement(
    SettingsContext.Provider,
    { value: api, modified: mod },
    React.createElement(
      'button',
      { style: btnStyle, onClick: saveChanges, disabled: !mod },
      'Save Changes'
    ),
    '\xA0',
    React.createElement(
      'button',
      { style: btnStyle, onClick: revertChanges, disabled: !mod },
      'Revert Changes'
    ),
    React.createElement(
      'button',
      { style: btnStyle, onClick: function onClick() {
          return setShowToDo(!showToDo);
        } },
      showToDo ? 'ShowWIP' : 'ShowToDo'
    ),
    !showToDo && Object.keys(propDefs).map(function (gn) {
      return React.createElement(PropertyGroup, {
        groupDef: _defineProperty({}, gn, propDefs[gn]),
        metaDef: _defineProperty({}, gn, metaDefs[gn]),
        key: gn
      });
    }),
    showToDo && toDoList
  );
}

/// EXPORT REACT COMPONENT ////////////////////////////////////////////////////
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
module.exports = MURSettingsEditor;
});

require.register("view/netcreate/components/MURTextInput.jsx", function(exports, require, module) {
'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

/*///////////////////////////////// ABOUT \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\*\

  MUR Text Input Component
  used by mur-settings-client.jsx to generate a text input component

\*\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ * /////////////////////////////////////*/

var React = require('react');

var _require = require('ursys-min'),
    Settings = _require.Settings; // import the settings manager


var RSB = require('./react-settings-bridge');

/// CONSTANTS /////////////////////////////////////////////////////////////////
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
var DBG = true;
var LOG = console.log.bind(console);
var SettingsContext = RSB.GetSettingsContext();

/// STYLING OBJECTS ///////////////////////////////////////////////////////////
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

var _RSB$GetStyles = RSB.GetStyles(),
    itemGrid = _RSB$GetStyles.itemGrid,
    labelStyle = _RSB$GetStyles.labelStyle,
    inputStyle = _RSB$GetStyles.inputStyle,
    popupStyle = _RSB$GetStyles.popupStyle,
    modColor = _RSB$GetStyles.modColor;

/// TEXT INPUT COMPONENT //////////////////////////////////////////////////////
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/** A TextInput component */


function TextInput(props) {
  var _this = this;

  var propDef = props.propDef,
      metaDef = props.metaDef;

  if (DBG) {
    if ((typeof propDef === 'undefined' ? 'undefined' : _typeof(propDef)) !== 'object') return React.createElement(
      'p',
      null,
      'TextInput bad groupDef'
    );
    if ((typeof metaDef === 'undefined' ? 'undefined' : _typeof(metaDef)) !== 'object') return React.createElement(
      'p',
      null,
      'TextInput bad metaDef'
    );
  }
  var value = propDef.value,
      defValue = propDef.default;
  var label = metaDef.label,
      tooltip = metaDef.tooltip,
      help = metaDef.help,
      placeholder = metaDef.placeholder;
  // declare reactive render state

  var _React$useState = React.useState('black'),
      _React$useState2 = _slicedToArray(_React$useState, 2),
      labelColor = _React$useState2[0],
      setLabelColor = _React$useState2[1];

  var _React$useState3 = React.useState(_extends({}, popupStyle)),
      _React$useState4 = _slicedToArray(_React$useState3, 2),
      tooltipStyle = _React$useState4[0],
      setTooltipStyle = _React$useState4[1];

  var _React$useState5 = React.useState(_extends({}, popupStyle)),
      _React$useState6 = _slicedToArray(_React$useState5, 2),
      oldStyle = _React$useState6[0],
      setOldStyle = _React$useState6[1];

  var _React$useState7 = React.useState(value || defValue),
      _React$useState8 = _slicedToArray(_React$useState7, 1),
      oldValue = _React$useState8[0];

  var _React$useState9 = React.useState(value || defValue),
      _React$useState10 = _slicedToArray(_React$useState9, 2),
      inputValue = _React$useState10[0],
      setInputValue = _React$useState10[1];

  /// CONTEXT ///

  var api = React.useContext(SettingsContext);

  /// TESTS ///

  function assert_is_modified() {
    if (label === 'description') console.log('old / input / propDef\n' + oldValue + ' \t' + inputValue + ' \t' + propDef.value);
  }

  /// UI-SETTINGS INTEROP EVENT UPDATES ///

  // send data to settings object, which will trigger rerender
  var submitToSettings = function () {
    var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(value) {
      return regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              LOG('would check data', propDef);
              LOG('would call RSB.UpdateProperty(args)');
              // api.forceUpdate();

            case 2:
            case 'end':
              return _context.stop();
          }
        }
      }, _callee, _this);
    }));

    return function submitToSettings(_x) {
      return _ref.apply(this, arguments);
    };
  }();

  /// LOCAL EVENT UPDATES ///

  // input changes will update the current inputValue
  var handleTyping = function handleTyping(event) {
    propDef.value = event.target.value;
    setInputValue(propDef.value);
  };

  // input key return will submit the value to settings object
  var handleEnterKey = function () {
    var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(event) {
      return regeneratorRuntime.wrap(function _callee2$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              if (event.key === 'Enter') submitToSettings(event.target.value);

            case 1:
            case 'end':
              return _context2.stop();
          }
        }
      }, _callee2, _this);
    }));

    return function handleEnterKey(_x2) {
      return _ref2.apply(this, arguments);
    };
  }();

  // hovering over label will show tooltip
  var handleTooltip = function handleTooltip(event) {
    if (event.type === 'mouseover') {
      var offset = RSB.EventTargetOffsetStyle(event);
      setTooltipStyle(_extends({}, popupStyle, offset, {
        display: 'block',
        content: tooltip || ''
      }));
      setLabelColor('maroon');
    } else if (event.type === 'mouseout') {
      setTooltipStyle(_extends({}, popupStyle));
      setLabelColor('black');
    }
  };

  // hovering over a changed input will show the old value
  var showOldValue = function showOldValue(event) {
    if (oldValue === inputValue) {
      setOldStyle(_extends({}, popupStyle));
      return;
    } else if (event.type === 'mouseover') {
      var offset = RSB.EventTargetOffsetStyle(event);
      setOldStyle(_extends({}, popupStyle, offset, {
        display: 'block',
        content: oldValue || ''
      }));
    } else if (event.type === 'mouseout') {
      setOldStyle(_extends({}, popupStyle));
    }
  };

  /// RENDER ///

  // conditional flags based on inputValue
  var mod = inputValue !== oldValue;
  var bgColor = mod ? modColor : 'white';
  var pad = mod ? '1rem' : '0';

  // assert_is_modified();

  return React.createElement(
    'div',
    { style: itemGrid },
    React.createElement(
      'label',
      {
        htmlFor: name,
        style: _extends({}, labelStyle, { color: labelColor }),
        onMouseOver: handleTooltip,
        onMouseOut: handleTooltip
      },
      label || name
    ),
    React.createElement('input', {
      type: 'text',
      name: '${name}',
      style: _extends({}, inputStyle, {
        color: labelColor,
        backgroundColor: bgColor,
        paddingRight: pad
      }),
      defaultValue: inputValue,
      onKeyDown: handleEnterKey,
      onBlur: submitToSettings,
      onInput: handleTyping,
      onMouseOver: showOldValue,
      onMouseOut: showOldValue
    }),
    tooltip && React.createElement(
      'div',
      { style: tooltipStyle },
      tooltip
    ),
    React.createElement(
      'div',
      { style: oldStyle },
      React.createElement(
        'span',
        { style: { opacity: 0.5 } },
        'old value: '
      ),
      oldValue
    )
  );
}

/// EXPORTS ///////////////////////////////////////////////////////////////////
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
module.exports = TextInput;
});

require.register("view/netcreate/components/MarkdownNote.jsx", function(exports, require, module) {
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/*///////////////////////////////// ABOUT \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\*\

  Optimized Markdwon React Component

  This is based on Joshua's implementation of Markdown React in NodeTable
  and EdgeTable.

  Wraps the MDReactComponent and only updates when the text changes.

\*\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ * /////////////////////////////////////*/

var MDReactComponent = require('markdown-react-js');
var mdEmoji = require('markdown-it-emoji');
var React = require('react');
var UNISYS = require('unisys/client');

/// COMPONENT DECLARATION /////////////////////////////////////////////////////
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

var MarkdownNote = function (_UNISYS$Component) {
  _inherits(MarkdownNote, _UNISYS$Component);

  function MarkdownNote() {
    _classCallCheck(this, MarkdownNote);

    var _this = _possibleConstructorReturn(this, (MarkdownNote.__proto__ || Object.getPrototypeOf(MarkdownNote)).call(this));

    _this.markdownIterate = _this.markdownIterate.bind(_this);
    return _this;
  }

  _createClass(MarkdownNote, [{
    key: 'markdownIterate',
    value: function markdownIterate(Tag, props, children) {
      if (Tag === 'a') {
        props.target = '_blank';
      }
      return React.createElement(
        Tag,
        props,
        children
      );
    }
  }, {
    key: 'shouldComponentUpdate',
    value: function shouldComponentUpdate(np, ns) {
      var bReturn = true;
      if (this.text === np.text) bReturn = false;else this.text = np.text;
      return bReturn;
    }
  }, {
    key: 'render',
    value: function render() {
      var text = this.props.text;

      return React.createElement(MDReactComponent, {
        text: text,
        onIterate: this.markdownIterate,
        markdownOptions: { typographer: true, linkify: true },
        plugins: [mdEmoji]
      });
    }
  }]);

  return MarkdownNote;
}(UNISYS.Component);

/// EXPORTS ///////////////////////////////////////////////////////////////////
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -


module.exports = MarkdownNote;
});

require.register("view/netcreate/components/NCAdvancedPanel.jsx", function(exports, require, module) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }(); /* eslint-disable react/no-unescaped-entities */
/*//////////////////////////////// ABOUT \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\*\

  # NCAdvancedPanel

  NCAdvancedPanel handles:
  - Template Import/Export
  - Node/Edge Import/Export
  - User Tokens
  - Admin Password

  By default, only Export nodes/edges is enabled for normal users.
  (The "Import/Export" tab will display "Export" only).
  The other functions are admin-only.


  ### PERMISSIONS App State

  The `PERMISSIONS` app state is used to track the admin permissions.
  This app state is used by NCNode, NCEdge, NCImportExport to
  enable/disable admin-only features.

  REVIEW: This probably should be moved to a permissions manager.


  ### Admin Password

  Only administrators (teachers) can manage templates, import data, and manage
  user tokens.

  The admin password is defined in the project template with the `adminPassword`
  property and is not visible to students.

  Admin features will be enabled as soon as you enter the correct password.
  (You don't need to hit return).  When the password is validated, the input
  form will turn into a "Reset Password"


\*\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ * //////////////////////////////////////*/

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _client = require('unisys/client');

var _client2 = _interopRequireDefault(_client);

var _NCImportExport = require('./NCImportExport');

var _NCImportExport2 = _interopRequireDefault(_NCImportExport);

var _NCTemplate = require('./NCTemplate');

var _NCTemplate2 = _interopRequireDefault(_NCTemplate);

var _NCUserTokens = require('./NCUserTokens');

var _NCUserTokens2 = _interopRequireDefault(_NCUserTokens);

var _MURSettingsEditor = require('./MURSettingsEditor');

var _MURSettingsEditor2 = _interopRequireDefault(_MURSettingsEditor);

var _URPopover = require('./URPopover');

var _URPopover2 = _interopRequireDefault(_URPopover);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/// CONSTANTS & DECLARATIONS //////////////////////////////////////////////////
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/// Initialize UNISYS DATA LINK for react component
var UDATAOwner = { name: 'NCAdvancedPanel' };
var UDATA = _client2.default.NewDataLink(UDATAOwner);
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
var DBG = false;
var VIEWS = {
  template: 'Template',
  importexport: 'Import/Export',
  usertokens: 'User Tokens',
  settings: 'Settings'
};

/// REACT COMPONENT ///////////////////////////////////////////////////////////
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/// export a class object for consumption by brunch/require
function NCAdvancedPanel() {
  var _useState = (0, _react.useState)(false),
      _useState2 = _slicedToArray(_useState, 2),
      isOpen = _useState2[0],
      setIsOpen = _useState2[1];

  var _useState3 = (0, _react.useState)('importexport'),
      _useState4 = _slicedToArray(_useState3, 2),
      openTab = _useState4[0],
      setOpenTab = _useState4[1];

  var _useState5 = (0, _react.useState)(''),
      _useState6 = _slicedToArray(_useState5, 2),
      password = _useState6[0],
      setPassword = _useState6[1];

  var _useState7 = (0, _react.useState)(undefined),
      _useState8 = _slicedToArray(_useState7, 2),
      hasAdminPermissions = _useState8[0],
      setHasAdminPermissions = _useState8[1];

  (0, _react.useEffect)(function () {
    var PERMISSIONS = UDATA.AppState('PERMISSIONS');
    UDATA.SetAppState('PERMISSIONS', _extends({}, PERMISSIONS, {
      isAdmin: hasAdminPermissions
    }));

    UDATA.OnAppStateChange('PANELSTATE', evt_ToggleAdvanced);
    assessAdminPrivileges();
    return function () {
      UDATA.AppStateChangeOff('PANELSTATE', evt_ToggleAdvanced);
    };
  }, []);

  (0, _react.useEffect)(function () {
    assessAdminPrivileges();
  }, [password]);

  /// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  function evt_ToggleAdvanced(PANELSTATE) {
    setIsOpen(PANELSTATE.advancedIsOpen);
  }
  /// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  function assessAdminPrivileges() {
    var TEMPLATE = UDATA.AppState('TEMPLATE');
    if (TEMPLATE && TEMPLATE.adminPassword === undefined) console.warn('No admin password defined!  Please set it if you need admin access');
    var isAdmin = TEMPLATE && TEMPLATE.adminPassword && TEMPLATE.adminPassword === password;
    setHasAdminPermissions(isAdmin);

    var PERMISSIONS = UDATA.AppState('PERMISSIONS');
    UDATA.SetAppState('PERMISSIONS', _extends({}, PERMISSIONS, { isAdmin: isAdmin }));
  }
  /// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  function ui_CloseAdvanced() {
    var PANELSTATE = UDATA.AppState('PANELSTATE');
    UDATA.SetAppState('PANELSTATE', _extends({}, PANELSTATE, { advancedIsOpen: false }));
  }
  /// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  function ui_SelectTab(tab) {
    setOpenTab(tab);
  }
  /// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  function ui_PasswordChange(e) {
    var password = e.target.value;
    setPassword(password);
  }
  /// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  function ui_PasswordClear() {
    setPassword('');
  }

  // COMPONENT RENDER ////////////////////////////////////////////////////////
  /// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  var TABS = hasAdminPermissions ? VIEWS // show all tabs to admin
  : { export: 'Export' }; // show "Export" only

  var jsx = void 0;
  switch (openTab) {
    case 'template':
      jsx = _react2.default.createElement(_NCTemplate2.default, null);
      break;
    case 'importexport':
    case 'export':
      jsx = _react2.default.createElement(_NCImportExport2.default, { isAdmin: hasAdminPermissions });
      break;
    case 'usertokens':
      jsx = _react2.default.createElement(_NCUserTokens2.default, null);
      break;
    case 'settings':
      jsx = _react2.default.createElement(_MURSettingsEditor2.default, null);
      break;
    default:
      break;
  }

  if (!isOpen) return null;

  var adminStatus = void 0;
  if (hasAdminPermissions === undefined) {
    adminStatus = _react2.default.createElement(
      'span',
      null,
      'Admin Mode Disabled'
    );
    console.error('"adminPassword" has not been defined in template!  You will not be able to access admin features.  Add a "adminPassword" property to the template to enable admin features.');
  } else if (hasAdminPermissions === false) adminStatus = _react2.default.createElement(
    'label',
    null,
    'admin: ',
    _react2.default.createElement('input', { type: 'password', id: 'password', onChange: ui_PasswordChange })
  );else if (hasAdminPermissions === true) adminStatus = _react2.default.createElement(
    'button',
    { type: 'button', onClick: ui_PasswordClear },
    'Admin Logout'
  );

  return _react2.default.createElement(
    _URPopover2.default,
    { title: 'Advanced', onClose: ui_CloseAdvanced },
    _react2.default.createElement(
      'div',
      { id: 'NCTabPanel', className: 'NCAdvancedPanel' },
      _react2.default.createElement(
        'div',
        { className: 'tabs', role: 'tablist' },
        Object.keys(TABS).map(function (k) {
          return _react2.default.createElement(
            'button',
            {
              key: k,
              role: 'tab',
              className: openTab === k ? 'selected' : '',
              'aria-selected': openTab === k,
              'aria-controls': k,
              tabIndex: openTab === k ? '0' : '-1',
              onClick: function onClick() {
                return ui_SelectTab(k);
              }
            },
            TABS[k]
          );
        })
      ),
      _react2.default.createElement(
        'div',
        { className: 'tabpanels' },
        jsx
      ),
      _react2.default.createElement(
        'div',
        { className: 'footer' },
        adminStatus
      )
    )
  );
}

/// EXPORT REACT COMPONENT ////////////////////////////////////////////////////
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
exports.default = NCAdvancedPanel;
});

require.register("view/netcreate/components/NCAutoSuggest.jsx", function(exports, require, module) {
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/*//////////////////////////////// ABOUT \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\*\

  Custom Auto Suggest for NetCreate

  USE:

    <NCAutoSuggest
      parentKey={key}
      value={value}
      onChange={this.handleInputUpdate}
      onSelect={this.handleSelection}
    />

  PROPS

    onChange(key, value) -- returns `key` and `value` for the input field

    onSelect(parentKey, value, id)
        -- returns `state` and `value` for the final submission as well as the
           matching id.  `value` is then passed back to NCAutoSuggest as the
           search field input value.

  This will look up matching nodes via FIND_MATCHING_NODES nc-logic request.

  This is a simple HTML component that will allow users to enter arbitrary
  text input.  Any partial node labels will display as a list of popup
  menu options.

  It can be used in a NCSearch or NCEdge
  (NOTE NCNode does not not use NCAutoSuggest, but displays a matchlist using
  a mechanism similar to NCAutoSuggest -- the key difference is that NCNode's
  matchlist is simply a static display list to let you know which nodes match
  the current input field, and does NOT support selecting a match.)

  `parentKey` provides a unique key to determine whether this NCAutoSuggest
  component is being used for a `search`, a `source`, or a `target` selection

  Replaces the deprecated AutoComplete and AutoSuggest components.

\*\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ * //////////////////////////////////////*/

var React = require('react');
var UNISYS = require('unisys/client');

var _require = require('system/util/constant'),
    SEARCH_PLACEHOLDER = _require.SEARCH_PLACEHOLDER;

/// CONSTANTS & DECLARATIONS //////////////////////////////////////////////////
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -


var DBG = false;
var PR = 'NCAutoSuggest';

/// REACT COMPONENT ///////////////////////////////////////////////////////////
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/// export a class object for consumption by brunch/require

var NCAutoSuggest = function (_UNISYS$Component) {
  _inherits(NCAutoSuggest, _UNISYS$Component);

  function NCAutoSuggest(props) {
    _classCallCheck(this, NCAutoSuggest);

    var _this = _possibleConstructorReturn(this, (NCAutoSuggest.__proto__ || Object.getPrototypeOf(NCAutoSuggest)).call(this, props));

    _this.state = {
      matches: [], // {id, label}
      higlightedLine: -1,
      isValidNode: true,
      uShowMatchlist: false,
      uNodeOrEdgeBeingEdited: false
    };

    _this.urstate_LOCKSTATE = _this.urstate_LOCKSTATE.bind(_this);
    _this.m_UIInputFocus = _this.m_UIInputFocus.bind(_this);
    _this.m_UIInputClick = _this.m_UIInputClick.bind(_this);
    _this.m_UIUpdate = _this.m_UIUpdate.bind(_this);
    _this.m_UISelectByLabel = _this.m_UISelectByLabel.bind(_this);
    _this.m_UISelectById = _this.m_UISelectById.bind(_this);
    _this.m_UIKeyDown = _this.m_UIKeyDown.bind(_this);
    _this.m_UIMouseHighlightLine = _this.m_UIMouseHighlightLine.bind(_this);
    _this.m_UIMouseUnhighlightLine = _this.m_UIMouseUnhighlightLine.bind(_this);
    _this.m_UIHighlightLine = _this.m_UIHighlightLine.bind(_this);
    _this.m_UIClickOutside = _this.m_UIClickOutside.bind(_this);

    document.addEventListener('click', _this.m_UIClickOutside);

    _this.OnAppStateChange('LOCKSTATE', _this.urstate_LOCKSTATE);
    return _this;
  }

  _createClass(NCAutoSuggest, [{
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      this.AppStateChangeOff('LOCKSTATE', this.urstate_LOCKSTATE);
      document.removeEventListener('click', this.m_UIClickOutside);
    }
  }, {
    key: 'urstate_LOCKSTATE',
    value: function urstate_LOCKSTATE(LOCKSTATE) {
      this.setState({ uNodeOrEdgeBeingEdited: LOCKSTATE.nodeOrEdgeBeingEdited });
    }

    /**
     * User has clicked inside the input field to set selection point
     * This is needed to restore the selection point after a blur
     * `focus` fires before `click`
     */

  }, {
    key: 'm_UIInputFocus',
    value: function m_UIInputFocus(event) {
      event.target.select();
      this.m_UIUpdate(event);
    }

    /**
     * User has clicked in the input field, so update and show the matchlist
     * and catch the event to prevent the document click handler from firing other actions
     */

  }, {
    key: 'm_UIInputClick',
    value: function m_UIInputClick(event) {
      event.preventDefault(); // this prevents the document click handler from closing the matchlist
      event.stopPropagation();
      this.setState({ uShowMatchlist: true });
    }

    /**
     * User has typed in the input field, or the field is getting focus again.
     * This processes the form data before passing it on to the parent handler.
     * The callback function is generally an input state update method in
     * NCNode or NCEdge
     * @param {Object} event
     */

  }, {
    key: 'm_UIUpdate',
    value: function m_UIUpdate(event) {
      var _this2 = this;

      var onChange = this.props.onChange;

      var key = event.target.id;
      var value = event.target.value;
      // save the selection cursor position
      var selstart = event.target.selectionStart;
      var inputEl = event.target;

      var isValidNode = false;
      this.AppCall('FIND_MATCHING_NODES', { searchString: value }).then(function (data) {
        var matches = data.nodes && data.nodes.length > 0 ? data.nodes.map(function (d) {
          if (d.label === value) isValidNode = true;
          return { id: d.id, label: d.label };
        }) : undefined;
        _this2.setState({ matches: matches, isValidNode: isValidNode, uShowMatchlist: true });
        if (typeof onChange === 'function') onChange(key, value, function () {
          // restore  selection cursor position
          inputEl.selectionStart = selstart;
          inputEl.selectionEnd = selstart;
        });
      });
    }
    /**
     * User has clicked an item in the matchlist,
     * or selected an item by typing ENTER
     * selecting one of the autosuggest items
     * @param {Object} event
     * @param {string} parentKey Either `search`, `source` or `target`
     * @param {string} value The autosuggest input value
     */

  }, {
    key: 'm_UISelectByLabel',
    value: function m_UISelectByLabel(event, parentKey, value) {
      event.preventDefault(); // catch click to close matchlist
      event.stopPropagation();
      var onSelect = this.props.onSelect;
      var matches = this.state.matches;

      var matchedNodeViaID = matches ? matches.find(function (n) {
        return n.id === value;
      }) : undefined;
      this.setState({
        isValidNode: matchedNodeViaID,
        matches: [],
        higlightedLine: -1,
        uShowMatchlist: false
      }); // clear matches
      if (typeof onSelect === 'function') {
        onSelect(parentKey, value, matchedNodeViaID ? matchedNodeViaID.id : undefined // ...or id, not both
        ); // callback function NCEdge.uiSourceTargetInputUpdate
      }
    }
  }, {
    key: 'm_UISelectById',
    value: function m_UISelectById(event, parentKey, id) {
      event.preventDefault(); // catch click to close matchlist
      event.stopPropagation();
      var _props = this.props,
          onSelect = _props.onSelect,
          value = _props.value;
      var matches = this.state.matches;

      var matchedNodeViaID = matches ? matches.find(function (n) {
        return n.id === id;
      }) : undefined;
      this.setState({
        isValidNode: matchedNodeViaID,
        matches: [],
        higlightedLine: -1,
        uShowMatchlist: false
      }); // clear matches
      if (typeof onSelect === 'function') {
        onSelect(parentKey, value, // show the current input field value
        matchedNodeViaID ? matchedNodeViaID.id : undefined // ...or `id`, not both
        ); // callback function NCEdge.uiSourceTargetInputUpdate
      }
    }

    /**
     * Handle key strokes
     * --  Typing UP/DOWN arrow will select the higlight
     * --  Typing ESC will cancel the autosuggest, also hitting Tab will prevent selecting the next field
     * --  Typing ENTER will select the item
     * @param {Object} event
     */

  }, {
    key: 'm_UIKeyDown',
    value: function m_UIKeyDown(event) {
      var _state = this.state,
          matches = _state.matches,
          higlightedLine = _state.higlightedLine,
          uNodeOrEdgeBeingEdited = _state.uNodeOrEdgeBeingEdited;
      var _props2 = this.props,
          parentKey = _props2.parentKey,
          value = _props2.value,
          onSelect = _props2.onSelect;

      var keystroke = event.key;
      var lastLine = matches ? matches.length : -1;
      var newHighlightedLine = higlightedLine;
      if (keystroke === 'Enter') {
        if (higlightedLine > -1 && matches) {
          // make sure matches exists, b/c hitting Enter with a typo can end up with bad match
          // there is highlight, so select that using the id in the matchlist
          var id = matches[higlightedLine].id;
          this.m_UISelectById(event, parentKey, id); // user selects current highlight
        } else if (value !== '') {
          if (!uNodeOrEdgeBeingEdited) {
            // Create a new node -- see also NCSearch
            document.activeElement.blur(); // allow new node to receive focus
            this.m_UISelectByLabel(event, parentKey, value); // user selects current highlight
          }
        }
      }
      if (keystroke === 'Escape') {
        // close autosuggest
        event.preventDefault();
        event.stopPropagation();
        this.setState({ matches: [], higlightedLine: -1 });
      }
      if (keystroke === 'ArrowUp') newHighlightedLine--;
      if (keystroke === 'ArrowDown') newHighlightedLine++;
      if (higlightedLine !== newHighlightedLine && newHighlightedLine > -1 && lastLine > 0) {
        this.m_UIHighlightLine(newHighlightedLine);
      }
    }
  }, {
    key: 'm_UIMouseHighlightLine',
    value: function m_UIMouseHighlightLine(event, line) {
      this.m_UIHighlightLine(line);
    }
  }, {
    key: 'm_UIMouseUnhighlightLine',
    value: function m_UIMouseUnhighlightLine(event) {
      // Placeholder for future functionality
      // Catch the event, but don't do anything.
      // We want to keep the matchlist open even if you move the mouse
      // outside of the line.
    }
  }, {
    key: 'm_UIHighlightLine',
    value: function m_UIHighlightLine(line) {
      var matches = this.state.matches;

      var lastLine = matches ? matches.length : -1;
      line = Math.min(lastLine - 1, Math.max(0, line));
      this.setState({ higlightedLine: line, uShowMatchlist: true });
      var highlightedNode = matches[line];
      this.AppCall('AUTOSUGGEST_HILITE_NODE', { nodeId: highlightedNode.id });
    }

    // Clicking outside of the matchlist should close the autosuggest

  }, {
    key: 'm_UIClickOutside',
    value: function m_UIClickOutside(event) {
      if (event.defaultPrevented) return; // clicking on the input field or the matchlist catches the click and prevents inadvertently closing the matchlist
      else this.setState({ matches: [], higlightedLine: -1, uShowMatchlist: false }); // close matchlist
    }
  }, {
    key: 'render',
    value: function render() {
      var _this3 = this;

      var _state2 = this.state,
          matches = _state2.matches,
          higlightedLine = _state2.higlightedLine,
          isValidNode = _state2.isValidNode,
          uShowMatchlist = _state2.uShowMatchlist;
      var _props3 = this.props,
          parentKey = _props3.parentKey,
          value = _props3.value,
          onSelect = _props3.onSelect;

      var matchList = matches && matches.length > 0 ? matches.map(function (n, i) {
        return React.createElement(
          'div',
          {
            key: '' + n.label + i,
            value: n.label,
            className: higlightedLine === i ? 'highlighted' : '',
            onClick: function onClick(event) {
              return _this3.m_UISelectById(event, parentKey, n.id);
            },
            onMouseEnter: function onMouseEnter(event) {
              return _this3.m_UIMouseHighlightLine(event, i);
            }
          },
          n.label,
          ' ',
          React.createElement(
            'span',
            { className: 'id' },
            '#',
            n.id
          )
        );
      }) : undefined;
      return React.createElement(
        'div',
        { className: 'NCAutoSuggest' },
        React.createElement(
          'label',
          { className: 'helptop', htmlFor: parentKey },
          'Click on a node, or type a node name'
        ),
        React.createElement('input', {
          id: parentKey,
          key: parentKey + 'input',
          value: value,
          type: 'string',
          autoFocus: true,
          className: !isValidNode ? 'invalid' : '',
          onChange: this.m_UIUpdate,
          onKeyDown: this.m_UIKeyDown,
          onFocus: this.m_UIInputFocus,
          onClick: this.m_UIInputClick,
          placeholder: SEARCH_PLACEHOLDER,
          autoComplete: 'off' // turn off Chrome's default autocomplete, which conflicts
        }),
        uShowMatchlist && matchList && React.createElement(
          'div',
          { style: { position: 'relative' } },
          React.createElement(
            'div',
            {
              id: 'matchlist',
              className: 'matchlist',
              onMouseLeave: this.m_UIMouseUnhighlightLine
            },
            matchList
          )
        )
      );
    }
  }]);

  return NCAutoSuggest;
}(UNISYS.Component);

/// EXPORT REACT COMPONENT ////////////////////////////////////////////////////
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -


module.exports = NCAutoSuggest;
});

require.register("view/netcreate/components/NCDialog.jsx", function(exports, require, module) {
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/*//////////////////////////////// ABOUT \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\*\

  Generic Dialog

  USE:

    <NCDialog
      statekey={key}
      value={value}
      onChange={this.handleInputUpdate}
      onSelect={this.handleSelection}
    />

\*\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ * //////////////////////////////////////*/

var React = require('react');
var Draggable = require('react-draggable');

/// CONSTANTS & DECLARATIONS //////////////////////////////////////////////////
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
var DBG = false;
var PR = 'NCDialog';

/// REACT COMPONENT ///////////////////////////////////////////////////////////
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

var NCDialog = function (_React$Component) {
  _inherits(NCDialog, _React$Component);

  function NCDialog(props) {
    _classCallCheck(this, NCDialog);

    return _possibleConstructorReturn(this, (NCDialog.__proto__ || Object.getPrototypeOf(NCDialog)).call(this, props));
  }

  _createClass(NCDialog, [{
    key: 'render',
    value: function render() {
      var _props = this.props,
          _props$message = _props.message,
          message = _props$message === undefined ? 'Are you sure?' : _props$message,
          _props$okmessage = _props.okmessage,
          okmessage = _props$okmessage === undefined ? 'OK' : _props$okmessage,
          _props$cancelmessage = _props.cancelmessage,
          cancelmessage = _props$cancelmessage === undefined ? 'Cancel' : _props$cancelmessage,
          onOK = _props.onOK,
          onCancel = _props.onCancel;

      var OKBtn = React.createElement(
        'button',
        { onClick: onOK, autoFocus: true },
        okmessage
      );
      var CancelBtn = onCancel ? React.createElement(
        'button',
        { onClick: onCancel, type: 'button' },
        cancelmessage
      ) : '';
      return React.createElement(
        'div',
        { className: 'dialog' },
        React.createElement('div', { className: 'screen' }),
        React.createElement(
          Draggable,
          null,
          React.createElement(
            'div',
            { className: 'dialogwindow' },
            React.createElement(
              'div',
              { className: 'dialogmessage' },
              message
            ),
            React.createElement(
              'div',
              { className: 'dialogcontrolbar' },
              CancelBtn,
              '\xA0',
              OKBtn
            )
          )
        )
      );
    }
  }]);

  return NCDialog;
}(React.Component);

/// EXPORT REACT COMPONENT ////////////////////////////////////////////////////
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -


module.exports = NCDialog;
});

require.register("view/netcreate/components/NCDialogCitation.jsx", function(exports, require, module) {
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/*//////////////////////////////// ABOUT \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\*\

  Citation Dialog

  USE:

    <NCDialogCitation
      message={message}
      copymessage={'Copy to Clipboard"}
      onClose={this.UIHandleClose}
    />

  This display citation text with a "Copy to Clipboard" button.

\*\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ * //////////////////////////////////////*/

var React = require('react');

/// CONSTANTS & DECLARATIONS //////////////////////////////////////////////////
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
var DBG = false;
var PR = 'NCDialogCitation';

/// REACT COMPONENT ///////////////////////////////////////////////////////////
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

var NCDialogCitation = function (_React$Component) {
  _inherits(NCDialogCitation, _React$Component);

  function NCDialogCitation(props) {
    _classCallCheck(this, NCDialogCitation);

    var _this = _possibleConstructorReturn(this, (NCDialogCitation.__proto__ || Object.getPrototypeOf(NCDialogCitation)).call(this, props));

    _this.state = { copiedMessage: '' };
    _this.m_UIOnCopy = _this.m_UIOnCopy.bind(_this);
    return _this;
  }

  _createClass(NCDialogCitation, [{
    key: 'm_UIOnCopy',
    value: function m_UIOnCopy() {
      var onClose = this.props.onClose;

      var messageEl = document.querySelector('#citationMessage');
      messageEl.select();
      document.execCommand('copy'); // deprecated, but other techniques require HTTPS
      if (typeof onClose === 'function') {
        this.setState({ copiedMessage: 'Copied to Clipboard!' }, function () {
          return setTimeout(onClose, 500);
        });
      }
    }
  }, {
    key: 'render',
    value: function render() {
      var copiedMessage = this.state.copiedMessage;
      var _props = this.props,
          _props$message = _props.message,
          message = _props$message === undefined ? 'message' : _props$message,
          _props$copymessage = _props.copymessage,
          copymessage = _props$copymessage === undefined ? 'Copy to Clipboard' : _props$copymessage,
          onClose = _props.onClose;

      var CopyBtn = React.createElement(
        'button',
        { onClick: this.m_UIOnCopy, autoFocus: true },
        copymessage
      );
      return React.createElement(
        'div',
        { className: 'dialog' },
        React.createElement('div', { className: 'screen' }),
        React.createElement(
          'div',
          { className: 'dialogwindow' },
          React.createElement(
            'div',
            { className: 'dialogmessage' },
            React.createElement('textarea', {
              id: 'citationMessage',
              defaultValue: message,
              rows: '5',
              cols: '60',
              readOnly: true,
              style: {
                fontSize: '12px',
                fontStyle: 'italic',
                padding: '5px 10px',
                border: 'none',
                color: '#333',
                background: '#eef'
              }
            })
          ),
          React.createElement(
            'div',
            { className: 'dialogcontrolbar' },
            copiedMessage,
            ' ',
            CopyBtn
          )
        )
      );
    }
  }]);

  return NCDialogCitation;
}(React.Component);

/// EXPORT REACT COMPONENT ////////////////////////////////////////////////////
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -


module.exports = NCDialogCitation;
});

require.register("view/netcreate/components/NCDialogInsertImageURL.jsx", function(exports, require, module) {
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/*//////////////////////////////// ABOUT \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\*\

  Image URL Input Dialog

  Dialog that shows an input field for pasting an image URL into a Node or Edge.
  If the URL is correct, the image will be previewed.

  USE:

    <NCDialogInput
      message="Paste image URL:"
      okmessage="Insert"
      onOK={event => m_UIPasteImageURL(event, key, cb)}
      cancelMessage="Cancel"
      onSCancel={m_UICancleInsertImageURL}
    />

  TO OPEN the DIALOG:

    UDATA.LocalCall("IMAGE_URL_DIALOG_OPEN")

  This will look up matching nodes via FIND_MATCHING_NODES nc-logic request.

\*\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ * //////////////////////////////////////*/

var React = require('react');
var UNISYS = require('unisys/client');

/// CONSTANTS & DECLARATIONS //////////////////////////////////////////////////
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
var DBG = false;
var PR = 'NCDialogInput';
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
var UDATA = void 0;

/// REACT COMPONENT ///////////////////////////////////////////////////////////
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

var NCDialogInsertImageURL = function (_React$Component) {
  _inherits(NCDialogInsertImageURL, _React$Component);

  function NCDialogInsertImageURL(props) {
    _classCallCheck(this, NCDialogInsertImageURL);

    var _this = _possibleConstructorReturn(this, (NCDialogInsertImageURL.__proto__ || Object.getPrototypeOf(NCDialogInsertImageURL)).call(this, props));

    _this.state = {
      isOpen: false,
      url: ''
    };
    _this.m_UIOpenDialog = _this.m_UIOpenDialog.bind(_this);
    _this.m_UIInputChange = _this.m_UIInputChange.bind(_this);
    _this.m_UIOnOK = _this.m_UIOnOK.bind(_this);
    _this.m_UIOnCancel = _this.m_UIOnCancel.bind(_this);

    /// Initialize UNISYS DATA LINK for REACT
    UDATA = UNISYS.NewDataLink(_this);
    UDATA.HandleMessage('IMAGE_URL_DIALOG_OPEN', _this.m_UIOpenDialog);
    return _this;
  }

  _createClass(NCDialogInsertImageURL, [{
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      UDATA.UnhandleMessage('IMAGE_URL_DIALOG_OPEN', this.m_UIOpenDialog);
    }
  }, {
    key: 'm_UIOpenDialog',
    value: function m_UIOpenDialog(data) {
      var id = this.props.id;

      if (id === data.id) this.setState({ isOpen: true });
    }
  }, {
    key: 'm_UIInputChange',
    value: function m_UIInputChange(event) {
      this.setState({ url: event.target.value });
    }
  }, {
    key: 'm_UIOnOK',
    value: function m_UIOnOK() {
      var url = this.state.url;
      var onOK = this.props.onOK;

      this.setState({ isOpen: false }, function () {
        return onOK && onOK(url);
      });
    }
  }, {
    key: 'm_UIOnCancel',
    value: function m_UIOnCancel() {
      var onCancel = this.props.onCancel;

      this.setState({ isOpen: false }, function () {
        return onCancel && onCancel();
      });
    }
  }, {
    key: 'render',
    value: function render() {
      var _state = this.state,
          isOpen = _state.isOpen,
          url = _state.url;
      var _props = this.props,
          id = _props.id,
          _props$message = _props.message,
          message = _props$message === undefined ? 'Are you sure?' : _props$message,
          _props$okmessage = _props.okmessage,
          okmessage = _props$okmessage === undefined ? 'OK' : _props$okmessage,
          _props$cancelmessage = _props.cancelmessage,
          cancelmessage = _props$cancelmessage === undefined ? 'Cancel' : _props$cancelmessage,
          onOK = _props.onOK,
          onCancel = _props.onCancel;

      var OKBtn = React.createElement(
        'button',
        { onClick: this.m_UIOnOK, autoFocus: true },
        okmessage
      );
      var CancelBtn = React.createElement(
        'button',
        { onClick: this.m_UIOnCancel, type: 'button' },
        cancelmessage
      );

      return !isOpen ? '' : React.createElement(
        'div',
        { className: 'dialog' },
        React.createElement('div', { className: 'screen' }),
        React.createElement(
          'div',
          { className: 'dialogwindow' },
          React.createElement(
            'div',
            { className: 'dialogcontent' },
            React.createElement(
              'h1',
              { className: 'dialogtitle' },
              'ADD IMAGE URL'
            ),
            React.createElement(
              'div',
              { className: 'dialogmessage' },
              React.createElement(
                'div',
                { className: 'dialogpreview' },
                React.createElement(
                  'div',
                  { className: 'label' },
                  'PREVIEW:'
                ),
                React.createElement('img', { src: url, alt: 'Pasted Image URL Preview' })
              ),
              React.createElement(
                'div',
                null,
                message
              ),
              React.createElement('input', { onChange: this.m_UIInputChange })
            ),
            React.createElement(
              'div',
              { className: 'dialogcontrolbar' },
              CancelBtn,
              '\xA0',
              OKBtn
            )
          )
        )
      );
    }
  }]);

  return NCDialogInsertImageURL;
}(React.Component);

/// EXPORT REACT COMPONENT ////////////////////////////////////////////////////
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -


module.exports = NCDialogInsertImageURL;
});

require.register("view/netcreate/components/NCEdge.jsx", function(exports, require, module) {
'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _URCommentVBtn = require('./URCommentVBtn');

var _URCommentVBtn2 = _interopRequireDefault(_URCommentVBtn);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/*//////////////////////////////// ABOUT \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\*\

    Prototype Simple NetCreate Edge Editor

    Built for Version 2.0 ITEST.

    Provides a viewer and editor for the currently selected edge.

    USAGE

      <NCNEdge edgeId={edgeId} parentNodeId={nodeId} key={e.id} />

    This is designed to be embedded in an <NCNode> object.
    There should only be one open NCEdge component at a time.

    PERMISSIONS
    Editting is restricted by:
    * User must be logged in
    * Template is not being edited
    * Data is not being imported
    * Someone else is not editing the edge (and has placed a lock on it)

\*\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ * //////////////////////////////////////*/

var React = require('react');
var UNISYS = require('unisys/client');

var _require = require('system/util/enum'),
    BUILTIN_FIELDS_EDGE = _require.BUILTIN_FIELDS_EDGE;

var _require2 = require('system/util/constant'),
    EDGE_NOT_SET_LABEL = _require2.EDGE_NOT_SET_LABEL,
    ARROW_DOWN = _require2.ARROW_DOWN,
    ARROW_UPDOWN = _require2.ARROW_UPDOWN,
    ARROW_RIGHT = _require2.ARROW_RIGHT;

var LOCKMGR = require('../lock-mgr');
var CMTMGR = require('../comment-mgr');
var NCLOGIC = require('../nc-logic');
var NCUI = require('../nc-ui');
var NCAutoSuggest = require('./NCAutoSuggest');
var NCDialog = require('./NCDialog');
var NCDialogCitation = require('./NCDialogCitation');
var SETTINGS = require('settings');


/// CONSTANTS & DECLARATIONS //////////////////////////////////////////////////
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
var DBG = false;
var PR = 'NCEdge';
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
// const isAdmin = SETTINGS.IsAdmin();
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
var TABS = {
  // Also used as labels
  ATTRIBUTES: 'ATTRIBUTES',
  PROVENANCE: 'PROVENANCE'
};

/// REACT COMPONENT ///////////////////////////////////////////////////////////
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/// export a class object for consumption by brunch/require

var NCEdge = function (_UNISYS$Component) {
  _inherits(NCEdge, _UNISYS$Component);

  function NCEdge(props) {
    _classCallCheck(this, NCEdge);

    var _this = _possibleConstructorReturn(this, (NCEdge.__proto__ || Object.getPrototypeOf(NCEdge)).call(this, props));

    _this.state = {
      isLoggedIn: false,
      isAdmin: false,
      animateHeight: 0
    }; // initialized on componentDidMount and clearSelection

    // STATE MANAGEMENT
    _this.ResetState = _this.ResetState.bind(_this);
    _this.urstate_SESSION = _this.urstate_SESSION.bind(_this);
    _this.urstate_LOCKSTATE = _this.urstate_LOCKSTATE.bind(_this);
    _this.urstate_NCDATA = _this.urstate_NCDATA.bind(_this);
    _this.urstate_PERMISSIONS = _this.urstate_PERMISSIONS.bind(_this);
    _this.IsLoggedIn = _this.IsLoggedIn.bind(_this);
    _this.DerivePermissions = _this.DerivePermissions.bind(_this);

    // EVENT HANDLERS
    _this.CheckUnload = _this.CheckUnload.bind(_this);
    _this.DoUnload = _this.DoUnload.bind(_this);
    _this.ClearSelection = _this.ClearSelection.bind(_this);
    _this.urstate_SELECTION = _this.urstate_SELECTION.bind(_this);
    _this.ReqLoadEdge = _this.ReqLoadEdge.bind(_this);
    // DATA LOADING
    _this.LoadEdge = _this.LoadEdge.bind(_this);
    _this.DeleteEdge = _this.DeleteEdge.bind(_this);
    _this.LoadAttributes = _this.LoadAttributes.bind(_this);
    _this.LoadProvenance = _this.LoadProvenance.bind(_this);
    _this.UnlockEdge = _this.UnlockEdge.bind(_this);
    _this.EditEdge = _this.EditEdge.bind(_this);
    _this.ValidateSourceTarget = _this.ValidateSourceTarget.bind(_this);
    _this.OfferToCreateNewNode = _this.OfferToCreateNewNode.bind(_this);
    _this.CreateNode = _this.CreateNode.bind(_this);
    _this.BackToEditing = _this.BackToEditing.bind(_this);
    _this.SetSourceTarget = _this.SetSourceTarget.bind(_this);
    _this.ThenSaveSourceTarget = _this.ThenSaveSourceTarget.bind(_this);
    // DATA SAVING
    _this.SaveEdge = _this.SaveEdge.bind(_this);
    // HELPER METHODS
    _this.LookupBackgroundColor = _this.LookupBackgroundColor.bind(_this);
    _this.LookupSourceTargetNodeColor = _this.LookupSourceTargetNodeColor.bind(_this);
    _this.SwapSourceAndTarget = _this.SwapSourceAndTarget.bind(_this);
    _this.EdgeDisplayName = _this.EdgeDisplayName.bind(_this);
    // UI MANIPULATION METHODS
    _this.EnableEditMode = _this.UIEnableEditMode.bind(_this);
    // UI EVENT HANDLERS
    _this.UISelectTab = _this.UISelectTab.bind(_this);
    _this.UIRequestEditEdge = _this.UIRequestEditEdge.bind(_this);
    _this.UIDeselectEdge = _this.UIDeselectEdge.bind(_this);
    _this.UICancelEditMode = _this.UICancelEditMode.bind(_this);
    _this.UIDisableEditMode = _this.UIDisableEditMode.bind(_this);
    _this.UIDeleteEdge = _this.UIDeleteEdge.bind(_this);
    _this.UIInputUpdate = _this.UIInputUpdate.bind(_this);
    _this.UIProvenanceInputUpdate = _this.UIProvenanceInputUpdate.bind(_this);
    _this.UIEnableSourceTargetSelect = _this.UIEnableSourceTargetSelect.bind(_this);
    _this.UISourceTargetInputUpdate = _this.UISourceTargetInputUpdate.bind(_this);
    _this.UISourceTargetInputSelect = _this.UISourceTargetInputSelect.bind(_this);
    _this.UICitationShow = _this.UICitationShow.bind(_this);
    _this.UICitationClose = _this.UICitationClose.bind(_this);
    // RENDERERS -- Main
    _this.RenderView = _this.RenderView.bind(_this);
    _this.RenderEdit = _this.RenderEdit.bind(_this);
    // FORM RENDERERS
    _this.RenderSourceTargetButton = _this.RenderSourceTargetButton.bind(_this);

    /// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    /// REGISTER LISTENERS
    _this.OnAppStateChange('SESSION', _this.urstate_SESSION);
    _this.OnAppStateChange('NCDATA', _this.urstate_NCDATA);
    _this.OnAppStateChange('SELECTION', _this.urstate_SELECTION);
    _this.OnAppStateChange('LOCKSTATE', _this.urstate_LOCKSTATE);
    _this.OnAppStateChange('PERMISSIONS', _this.urstate_PERMISSIONS);
    _this.HandleMessage('EDGE_OPEN', _this.ReqLoadEdge);
    _this.HandleMessage('EDGE_DESELECT', _this.ClearSelection);
    _this.HandleMessage('EDGE_EDIT', _this.EditEdge); // EdgeTable request
    _this.HandleMessage('SELECT_SOURCETARGET', _this.SetSourceTarget);
    return _this;
  }

  _createClass(NCEdge, [{
    key: 'componentDidMount',
    value: function componentDidMount() {
      this.ResetState(); // Initialize State

      var edgeId = this.props.edgeId;

      var edge = this.AppState('NCDATA').edges.find(function (e) {
        return e.id === edgeId;
      });
      this.LoadEdge(edge);

      window.addEventListener('beforeunload', this.CheckUnload);
      window.addEventListener('unload', this.DoUnload);
    }
  }, {
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      this.AppStateChangeOff('SESSION', this.urstate_SESSION);
      this.AppStateChangeOff('NCDATA', this.urstate_NCDATA);
      this.AppStateChangeOff('SELECTION', this.urstate_SELECTION);
      this.AppStateChangeOff('LOCKSTATE', this.urstate_LOCKSTATE);
      this.AppStateChangeOff('PERMISSIONS', this.urstate_PERMISSIONS);
      this.DropMessage('EDGE_OPEN', this.ReqLoadEdge);
      this.DropMessage('EDGE_DESELECT', this.ClearSelection);
      this.DropMessage('EDGE_EDIT', this.EditEdge);
      this.DropMessage('SELECT_SOURCETARGET', this.SetSourceTarget);
      window.removeEventListener('beforeunload', this.CheckUnload);
      window.removeEventListener('unload', this.DoUnload);
    }

    /// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    /// STATE MANAGEMENT
    ///

  }, {
    key: 'ResetState',
    value: function ResetState() {
      this.setState({
        // EDGE DEFS 'core state data'
        id: null,
        // source: null, // avoid ambiguous keys, use sourceId instead
        // target: null, // avoid ambiguous keys, use targetId instead
        sourceId: null,
        targetId: null,
        type: '',
        attributes: {},
        provenance: {},
        weight: 0,
        size: 0,
        created: undefined,
        updated: undefined,
        revision: 0,

        // SYSTEM STATE
        // isLoggedIn: false, // don't clear session state!
        isAdmin: false,
        // previousState: {},

        // UI State 'u'
        uEditBtnDisable: false,
        uEditBtnHide: false,
        uViewMode: NCUI.VIEWMODE.VIEW,
        uSelectedTab: TABS.ATTRIBUTES,
        uSelectSourceTarget: undefined,
        uBackgroundColor: '#ccc', // edge component bgcolor determined by type/COLORMAP
        uIsLockedByDB: false, // shows db lock message next to Edit Node button
        uIsLockedByTemplate: false,
        uIsLockedByImport: false,
        uEditLockMessage: '',
        uNewNodeKey: undefined,
        uNewNodeLabel: undefined,
        uShowCitationDialog: false,

        // DERIVED VALUES 'd'
        dSourceNode: undefined,
        dSourceNodeColor: null,
        dTargetNode: undefined,
        dTargetNodeColor: null
      });
    }
    /// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    /// SYSTEM/NETWORK EVENT HANDLERS
    ///

  }, {
    key: 'CheckUnload',
    value: function CheckUnload(event) {
      event.preventDefault();
      if (this.state.uViewMode === NCUI.VIEWMODE.EDIT) {
        (event || window.event).returnValue = null;
      } else {
        Reflect.deleteProperty(event, 'returnValue');
      }
      return event;
    }
  }, {
    key: 'DoUnload',
    value: function DoUnload(event) {
      if (this.state.uViewMode === NCUI.VIEWMODE.EDIT) {
        LOCKMGR.RequestUnlockEdge(this.state.id);
      }
    }
    /**
     * Handle change in SESSION data
     * SESSION is called by SessionShell when the ID changes
     * set system-wide. data: { classId, projId, hashedId, groupId, isValid }
     * Called both by componentWillMount() and AppStateChange handler.
     * The 'SESSION' state change is triggered in two places in SessionShell during
     * its handleChange() when active typing is occuring, and also during
     * SessionShell.componentWillMount()
     */

  }, {
    key: 'urstate_SESSION',
    value: function urstate_SESSION(decoded) {
      this.urstate_LOCKSTATE();
    }
  }, {
    key: 'urstate_LOCKSTATE',
    value: function urstate_LOCKSTATE() {
      var permissionsState = this.DerivePermissions(this.state.id);
      this.setState(_extends({}, permissionsState));
    }
  }, {
    key: 'urstate_PERMISSIONS',
    value: function urstate_PERMISSIONS(PERMISSIONS) {
      this.setState({ isAdmin: PERMISSIONS.isAdmin });
    }

    /*
        Called by NCDATA AppState updates
    */

  }, {
    key: 'urstate_NCDATA',
    value: function urstate_NCDATA(data) {
      var _this2 = this;

      // If NCDATA is updated, reload the edge b/c db has changed
      var updatedEdge = data.edges.find(function (e) {
        return e.id === _this2.props.edgeId;
      });
      this.LoadEdge(updatedEdge);
    }
    /**
     * Checks current SESSION state to see if user is logged in.
     * Since NCEdge is dynamically created and closed, we can't rely on
     * SESSION AppState updates messages.
     * NOTE updates state.
     * @returns {boolean} True if user is logged in
     */

  }, {
    key: 'IsLoggedIn',
    value: function IsLoggedIn() {
      var SESSION = this.AppState('SESSION');
      var isLoggedIn = SESSION.isValid;
      return isLoggedIn;
    }

    // 1. Read the LOCKSTATE
    // 2. Derive the permissions state (hide/disable the edit button)
    // 3. Look up any lock messages

  }, {
    key: 'DerivePermissions',
    value: function DerivePermissions(edgeId) {
      var isLoggedIn = this.IsLoggedIn();

      var LOCKSTATE = this.AppState('LOCKSTATE');
      var uIsLockedByDB = LOCKSTATE.lockedEdges.includes(edgeId);
      var uIsLockedByTemplate = LOCKSTATE.templateBeingEdited;
      var uIsLockedByImport = LOCKSTATE.importActive;
      // NOT IMPLEMENTED
      // FUTURE: We may want to lock the edge if a comment is being edited
      //         but currently there isn't an easy way to do this
      //         because while we know that a comment is being edited (via LOCKSTATE.lockedComments)
      //         we don't know if the comment is being edited by the current user or someone else.
      //         So for now, we allow the edge to be edited while a comment is being edited.
      //         If we wanted to implement this, we probably need to introduce a new parameter
      //         or properly implement commentBeingEditedByMe.
      // const uIsLockedByComment = LOCKSTATE.commentBeingEditedByMe;

      // Derive new message and EditBtn status
      var uEditLockMessage = '';
      var uEditBtnDisable = false;
      var uEditBtnHide = true;
      var TEMPLATE = this.AppState('TEMPLATE');
      if (isLoggedIn) uEditBtnHide = false;
      if (uIsLockedByDB) {
        uEditBtnDisable = true;
        uEditLockMessage += TEMPLATE.edgeIsLockedMessage;
      }
      if (uIsLockedByTemplate) {
        uEditBtnDisable = true;
        uEditLockMessage += TEMPLATE.templateIsLockedMessage;
      }
      if (uIsLockedByImport) {
        uEditBtnDisable = true;
        uEditLockMessage += TEMPLATE.importIsLockedMessage;
      }
      // NOT IMPLEMENTED
      // if (uIsLockedByComment) {
      //   uEditBtnDisable = true;
      //   // no change to lock message for comments
      // }

      // return all state values
      return {
        // User Permissions
        isLoggedIn: isLoggedIn,
        uIsLockedByDB: uIsLockedByDB,
        uIsLockedByTemplate: uIsLockedByTemplate,
        uIsLockedByImport: uIsLockedByImport,
        // uIsLockedByComment, // NOT IMPLEMENTED
        // UI State
        uEditBtnDisable: uEditBtnDisable,
        uEditBtnHide: uEditBtnHide,
        uEditLockMessage: uEditLockMessage
      };
    }
  }, {
    key: 'ClearSelection',
    value: function ClearSelection() {
      this.ResetState();
    }
  }, {
    key: 'urstate_SELECTION',
    value: function urstate_SELECTION(data) {
      var sourceTargetSelect = this.state.sourceTargetSelect;

      var selectedNode = data.nodes[0]; // select the first node
      if (sourceTargetSelect === 'source') {
        this.setState({
          sourceId: selectedNode.id,
          dSourceNode: selectedNode
        });
      } else if (sourceTargetSelect === 'target') {
        this.setState({
          targetId: selectedNode.id,
          dTargetNode: selectedNode
        });
      } else {
        // ignore the selection
      }
    }
  }, {
    key: 'ReqLoadEdge',
    value: function ReqLoadEdge(data) {
      // handler for UDATA call, interprets the net `data`
      this.LoadEdge(data.edge);
    }

    /// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    /// DATA LOADING
    ///

  }, {
    key: 'LoadEdge',
    value: function LoadEdge(edge) {
      var uViewMode = this.state.uViewMode;

      // If we're editing, ignore the select!

      if (uViewMode === NCUI.VIEWMODE.EDIT) return;

      // If no edge was selected, deselect
      if (!edge) {
        this.ClearSelection();
        return;
      }

      // Load the edge
      //  - Look up source/target nodes
      //  - convert edge.source/target to sourceId/targetId to disambiguate id vs object
      var sourceId = edge.source;
      var targetId = edge.target;
      var NCDATA = this.AppState('NCDATA');
      var dSourceNode = NCDATA.nodes.find(function (n) {
        return n.id === sourceId;
      }) || {
        label: ''
      };
      var dTargetNode = NCDATA.nodes.find(function (n) {
        return n.id === targetId;
      }) || {
        label: ''
      };

      var _LookupSourceTargetNo = this.LookupSourceTargetNodeColor(),
          dSourceNodeColor = _LookupSourceTargetNo.dSourceNodeColor,
          dTargetNodeColor = _LookupSourceTargetNo.dTargetNodeColor;
      //  - Load attributes and provenance


      var attributes = this.LoadAttributes(edge);
      var provenance = this.LoadProvenance(edge);
      //  - Load derived values
      var uBackgroundColor = this.LookupBackgroundColor(edge.type);
      var permissionsState = this.DerivePermissions(edge.id);

      this.setState(_extends({
        id: edge.id,
        sourceId: sourceId,
        targetId: targetId,
        type: edge.type,
        attributes: attributes,
        provenance: provenance,
        weight: edge.weight,
        size: edge.size, // `size` is the sum of all weights
        created: edge.meta ? new Date(edge.meta.created).toLocaleString() : '',
        createdBy: edge.createdBy,
        updated: edge.meta ? new Date(edge.meta.updated).toLocaleString() : '',
        updatedBy: edge.updatedBy,
        revision: edge.meta ? edge.meta.revision : '',
        // Derived Values
        dSourceNode: dSourceNode,
        dTargetNode: dTargetNode,
        dSourceNodeColor: dSourceNodeColor,
        dTargetNodeColor: dTargetNodeColor,
        // UI parameters
        uBackgroundColor: uBackgroundColor,
        animateHeight: 'fullheight'
      }, permissionsState));
    }
    /**
     * Loads up the `attributes` object defined by the TEMPLATE
     * Will skip
     *   * BUILTIN fields
     *   * attributes that are `hidden` by the template
     * REVIEW: Currently the parameters will show up in random object order.
     * @param {Object} edge
     * @returns {Object} { ...attr-key: attr-value }
     */

  }, {
    key: 'LoadAttributes',
    value: function LoadAttributes(edge) {
      var EDGEDEFS = this.AppState('TEMPLATE').edgeDefs;
      var attributes = {};
      Object.keys(EDGEDEFS).forEach(function (k) {
        if (BUILTIN_FIELDS_EDGE.includes(k)) return; // skip built-in fields
        var attr_def = EDGEDEFS[k];
        if (attr_def.hidden) return; // skip hidden fields
        if (attr_def.isProvenance) return; // skip fields that are marked as provenance
        attributes[k] = edge[k];
      });
      return attributes;
    }
    /**
     * Loads up the `provenance` object defined by the TEMPLATE
     * Will skip
     *   * BUILTIN fields
     *   * attributes that are `hidden` by the template
     * REVIEW: Currently the parameters will show up in random object order.
     * @param {Object} edge
     * @returns {Object} { ...attr-key: attr-value }
     */

  }, {
    key: 'LoadProvenance',
    value: function LoadProvenance(edge) {
      var EDGEDEFS = this.AppState('TEMPLATE').edgeDefs;
      var provenance = {};
      Object.keys(EDGEDEFS).forEach(function (k) {
        if (BUILTIN_FIELDS_EDGE.includes(k)) return; // skip built-in fields
        var provenance_def = EDGEDEFS[k];
        if (provenance_def.hidden) return; // skip hidden fields
        if (!provenance_def.isProvenance) return; // skip fields that are not marked as provenance
        provenance[k] = edge[k];
      });
      return provenance;
    }

    /**
     * Returns whether the unlock is successful
     * @param {function} cb Callback function to handle cleanup after unlock
     */

  }, {
    key: 'UnlockEdge',
    value: function UnlockEdge(cb) {
      LOCKMGR.RequestUnlockEdge(this.state.id, cb);
    }

    /**
     * If `lockEdge` is not successful, then that means the edge was
     * already locked, so we can't edit.
     */

  }, {
    key: 'EditEdge',
    value: function EditEdge() {
      var _this3 = this;

      var isLoggedIn = this.state.isLoggedIn;

      if (!isLoggedIn) return;
      LOCKMGR.RequestLockEdge(this.state.id, function (lockSuccess) {
        _this3.setState({ uIsLockedByDB: !lockSuccess }, function () {
          if (lockSuccess) _this3.UIEnableEditMode();
        });
      });
    }

    /// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    /// SET SOURCE / TARGET
    ///
    /// Selecting a source or target node is a multi-step process.
    /// 1. First, you need to Enable editing
    /// 2. Then, you need to click on a Source or Target node to activate
    ///    the source or target for selection
    /// 3. Once you enable source or target editing, you need to decide
    ///    how you want to select the node...
    ///    A. Click on the node on the d3 graph to select the node, or...
    ///    B. Type the full node name, or...
    ///    C. Type a partial name, and..
    ///       and arrow up/down to highlight
    ///       and hit Enter to select
    ///       or click name to select
    ///    D. Type a new node name and
    ///       and hit Enter to add a new node
    ///       and show dialog confirm creating a new node
    /// 5. Click "Save" to exit edit mode
    ///
    /**
     * User has selected a new source or target
     * validate it to make sure it exists
     * if it doesn't, offer to create a new one
     * Uses either `id` or `value` to find the node
     *
     * @param {string} key 'source' or 'target'
     * @param {string} label
     * @param {number} id
     */

  }, {
    key: 'ValidateSourceTarget',
    value: function ValidateSourceTarget(key, label, id) {
      var _this4 = this;

      // if we have an id, then the selected source/target is an existing node
      // but we should probably validate it anyway?
      var keyType = void 0,
          searchString = void 0;
      if (id) {
        // find node by 'id'
        keyType = 'id';
        searchString = id;
      } else {
        // find node by 'label'
        keyType = 'label';
        searchString = label;
      }
      this.AppCall('FIND_NODE_BY_PROP', {
        key: keyType,
        searchString: searchString
      }).then(function (data) {
        if (data.nodes.length > 0) {
          var node = data.nodes[0];
          _this4.ThenSaveSourceTarget(key, node);
        } else {
          _this4.OfferToCreateNewNode(key, label);
        }
      });
    }
    /**
     * User has input a new node name that doesn't match an existing node
     * so offer to create a new node
     * @param {string} key 'source' or 'target'
     * @param {string} value
     */

  }, {
    key: 'OfferToCreateNewNode',
    value: function OfferToCreateNewNode(key, value) {
      this.setState({
        uNewNodeKey: key,
        uNewNodeLabel: value
      });
    }
    /**
     * NCDialog offer to create a new node -- user decided to create a new
     * new node, so add it.
     */

  }, {
    key: 'CreateNode',
    value: function CreateNode() {
      var _this5 = this;

      var _state = this.state,
          uNewNodeKey = _state.uNewNodeKey,
          uNewNodeLabel = _state.uNewNodeLabel;

      this.AppCall('NODE_CREATE', { label: uNewNodeLabel }).then(function (node) {
        _this5.setState({ uNewNodeKey: undefined, uNewNodeLabel: undefined }, function () {
          return _this5.ThenSaveSourceTarget(uNewNodeKey, node);
        });
      });
    }
    /**
     * NCDialog offer to create a new node -- user clicked Cancel so
     * go back to editing the node
     */

  }, {
    key: 'BackToEditing',
    value: function BackToEditing() {
      this.setState({ uNewNodeKey: undefined, uNewNodeLabel: undefined });
    }
    /**
     * User has selected a source or target node by clicking on D3 graph
     * Called by Selection Manager via SELECT_SOURCETARGET
     * @param {Object} data
     * @param {Object} data.node
     */

  }, {
    key: 'SetSourceTarget',
    value: function SetSourceTarget(data) {
      var uSelectSourceTarget = this.state.uSelectSourceTarget;

      // The source/target has been set already, so return to edge edit mode

      this.AppCall('SELECTMGR_SET_MODE', { mode: 'edge_edit' });

      // Clear the secondary selection
      this.AppCall('SELECTMGR_DESELECT_SECONDARY');

      this.ThenSaveSourceTarget(uSelectSourceTarget, data.node);
    }
    /**
     * Save the source or target after either creating new node or selecting
     * an existing ndoe.
     * Runs after validateSourceTarget
     * @param {string} key 'source' or 'target'
     * @param {Object} node {id, label}
     */

  }, {
    key: 'ThenSaveSourceTarget',
    value: function ThenSaveSourceTarget(key, node) {
      // MUST save sourceId or targetId to determine source/target
      // but ideally set all three?  because that's what loadEdge does?
      var state = {
        uSelectSourceTarget: undefined,
        uNewNodeKey: undefined, // clear NCDialog
        uNewNodeLabel: undefined // clear NCDialog
      };
      var NCDATA = this.AppState('NCDATA');
      if (key === 'source') {
        state.sourceId = node.id;
        state.dSourceNode = NCDATA.nodes.find(function (n) {
          return n.id === node.id;
        }) || {
          label: ''
        };
      } else {
        // 'target'
        state.targetId = node.id;
        state.dTargetNode = NCDATA.nodes.find(function (n) {
          return n.id === node.id;
        }) || {
          label: ''
        };
      }

      // show secondary selection
      this.AppCall('SELECTMGR_SELECT_SECONDARY', { node: node });
      this.setState(state);
    }

    /// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    /// DATA SAVING
    ///

  }, {
    key: 'SaveEdge',
    value: function SaveEdge() {
      var _this6 = this;

      var _state2 = this.state,
          id = _state2.id,
          sourceId = _state2.sourceId,
          targetId = _state2.targetId,
          type = _state2.type,
          weight = _state2.weight,
          size = _state2.size,
          attributes = _state2.attributes,
          provenance = _state2.provenance;

      var uid = NCLOGIC.GetCurrentUserId();
      var edge = {
        id: id,
        source: sourceId,
        target: targetId,
        type: type,
        weight: weight,
        size: size,
        updatedBy: uid
      };
      Object.keys(attributes).forEach(function (k) {
        return edge[k] = attributes[k];
      });
      Object.keys(provenance).forEach(function (k) {
        return edge[k] = provenance[k];
      });

      this.setState({
        uViewMode: NCUI.VIEWMODE.VIEW
      }, function () {
        _this6.AppCall('DB_UPDATE', { edge: edge }).then(function () {
          _this6.UnlockEdge(function () {
            // Clear the secondary selection
            _this6.AppCall('SELECTMGR_DESELECT_SECONDARY');

            _this6.AppCall('SELECTMGR_SET_MODE', { mode: 'normal' });
            _this6.setState({
              uIsLockedByDB: false,
              uSelectSourceTarget: undefined
            });
          });
        });
      });
      UNISYS.Log('click save edge', id, this.EdgeDisplayName(), JSON.stringify(edge));
    }
  }, {
    key: 'DeleteEdge',
    value: function DeleteEdge() {
      var id = this.state.id;

      this.AppCall('DB_UPDATE', { edgeID: id }); // Calling DB_UPDATE with `edgeID` will remove the edge
    }

    /// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    /// HELPER METHODS
    ///
    /**
     * Sets the background color of the node editor via `uBackgroundColor` state.
     * Currently the background color is determined by the template edge type
     * color mapping.  This will eventually be replaced with a color manager.
     */

  }, {
    key: 'LookupBackgroundColor',
    value: function LookupBackgroundColor(type) {
      var COLORMAP = this.AppState('COLORMAP');
      var uBackgroundColor = COLORMAP.edgeColorMap[type] || '#555555';
      return uBackgroundColor;
    }
  }, {
    key: 'LookupSourceTargetNodeColor',
    value: function LookupSourceTargetNodeColor() {
      var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.state,
          dSourceNode = _ref.dSourceNode,
          dTargetNode = _ref.dTargetNode;

      var COLORMAP = this.AppState('COLORMAP');
      var dSourceNodeColor = COLORMAP.nodeColorMap[dSourceNode ? dSourceNode.type : ''];
      var dTargetNodeColor = COLORMAP.nodeColorMap[dTargetNode ? dTargetNode.type : ''];
      return { dSourceNodeColor: dSourceNodeColor, dTargetNodeColor: dTargetNodeColor };
    }
  }, {
    key: 'SwapSourceAndTarget',
    value: function SwapSourceAndTarget() {
      var _state3 = this.state,
          sourceId = _state3.sourceId,
          dSourceNode = _state3.dSourceNode,
          dSourceNodeColor = _state3.dSourceNodeColor,
          targetId = _state3.targetId,
          dTargetNode = _state3.dTargetNode,
          dTargetNodeColor = _state3.dTargetNodeColor;

      // swap

      var swappedTargetId = sourceId;
      var swappedSourceId = targetId;
      var swappedTargetNode = dSourceNode;
      var swappedSourceNode = dTargetNode;
      var swappedTargetNodeColor = dSourceNodeColor;
      var swappedSourceNodeColor = dTargetNodeColor;

      this.setState({
        sourceId: swappedSourceId,
        dSourceNode: swappedSourceNode,
        dSourceNodeColor: swappedSourceNodeColor,
        targetId: swappedTargetId,
        dTargetNode: swappedTargetNode,
        dTargetNodeColor: swappedTargetNodeColor
      });
    }
  }, {
    key: 'EdgeDisplayName',
    value: function EdgeDisplayName() {
      var _state4 = this.state,
          dSourceNode = _state4.dSourceNode,
          dTargetNode = _state4.dTargetNode;

      return '' + dSourceNode.label + ARROW_RIGHT + dTargetNode.label;
    }

    /// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    /// UI MANIPULATION METHODS
    ///
    /**
     * Save `previousState` so that we can undo/restore data if user cancels
     */

  }, {
    key: 'UIEnableEditMode',
    value: function UIEnableEditMode() {
      var _state5 = this.state,
          uSelectedTab = _state5.uSelectedTab,
          id = _state5.id,
          sourceId = _state5.sourceId,
          targetId = _state5.targetId,
          type = _state5.type,
          weight = _state5.weight,
          size = _state5.size,
          attributes = _state5.attributes,
          provenance = _state5.provenance;

      var previousState = {
        sourceId: sourceId,
        targetId: targetId,
        type: type,
        weight: weight,
        size: size,
        attributes: Object.assign({}, attributes),
        provenance: Object.assign({}, provenance)
      };
      this.setState({
        uViewMode: NCUI.VIEWMODE.EDIT,
        uSelectedTab: uSelectedTab,
        previousState: previousState
      });
      this.AppCall('SELECTMGR_SET_MODE', { mode: 'edge_edit' });

      var edge = {
        id: id,
        source: sourceId,
        target: targetId,
        type: type,
        weight: weight,
        size: size,
        provenance: provenance
      };
      Object.keys(attributes).forEach(function (k) {
        return edge[k] = attributes[k];
      });
      Object.keys(provenance).forEach(function (k) {
        return edge[k] = provenance[k];
      });
      UNISYS.Log('edit edge', id, this.EdgeDisplayName(), JSON.stringify(edge));
    }

    /// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    /// UI EVENT HANDLERS
    ///

  }, {
    key: 'UISelectTab',
    value: function UISelectTab(event) {
      event.stopPropagation();
      var id = this.state.id;

      this.setState({ uSelectedTab: event.target.value });
      UNISYS.Log('select edge tab', id, this.EdgeDisplayName(), event.target.value);
    }
  }, {
    key: 'UIRequestEditEdge',
    value: function UIRequestEditEdge(event) {
      event.stopPropagation();
      this.EditEdge();
    }
  }, {
    key: 'UIDeselectEdge',
    value: function UIDeselectEdge() {
      this.AppCall('EDGE_DESELECT');
    }
  }, {
    key: 'UICancelEditMode',
    value: function UICancelEditMode() {
      var _this7 = this;

      var _state6 = this.state,
          id = _state6.id,
          revision = _state6.revision,
          previousState = _state6.previousState;
      // if user is cancelling a newly created unsaved edge, delete the edge instead

      if (revision < 1) {
        this.UIDisableEditMode();
        this.DeleteEdge();
        return;
      }

      // restore previous state
      this.setState({
        sourceId: previousState.sourceId,
        targetId: previousState.targetId,
        type: previousState.type,
        weight: previousState.weight,
        size: previousState.size,
        attributes: previousState.attributes,
        provenance: previousState.provenance,
        uSelectSourceTarget: undefined
      }, function () {
        return _this7.UIDisableEditMode();
      });
      UNISYS.Log('cancel edit edge', id, this.EdgeDisplayName());
    }
  }, {
    key: 'UIDisableEditMode',
    value: function UIDisableEditMode() {
      var _this8 = this;

      this.UnlockEdge(function () {
        _this8.setState({
          uViewMode: NCUI.VIEWMODE.VIEW
        });

        // Clear the secondary selection
        _this8.AppCall('SELECTMGR_DESELECT_SECONDARY');
        _this8.AppCall('SELECTMGR_SET_MODE', { mode: 'normal' });
      });
    }
  }, {
    key: 'UIDeleteEdge',
    value: function UIDeleteEdge() {
      this.UIDisableEditMode();
      this.DeleteEdge();
    }
  }, {
    key: 'UIInputUpdate',
    value: function UIInputUpdate(key, value) {
      var state = {};
      if (BUILTIN_FIELDS_EDGE.includes(key)) {
        var data = {};
        data[key] = value;
        state = data;
      } else {
        var attributes = this.state.attributes;

        attributes[key] = value;
        state = attributes;
      }
      // HACK Allow any field to be used to specify color
      //      Eventually this needs to be built into the template.
      var COLORFIELDS = ['type'];
      // special handling to update the background color immediately if `type` is changed
      var type = COLORFIELDS.includes(key) ? value : this.state.type;
      var uBackgroundColor = this.LookupBackgroundColor(type);
      this.setState(_extends({}, state, { uBackgroundColor: uBackgroundColor }));
    }
  }, {
    key: 'UIProvenanceInputUpdate',
    value: function UIProvenanceInputUpdate(key, value) {
      if (BUILTIN_FIELDS_EDGE.includes(key)) {
        var data = {};
        data[key] = value;
        this.setState(data);
      } else {
        var provenance = this.state.provenance;

        provenance[key] = value;
        this.setState({ provenance: provenance });
      }
    }
  }, {
    key: 'UIEnableSourceTargetSelect',
    value: function UIEnableSourceTargetSelect(event) {
      var key = event.target.id;
      this.setState({ uSelectSourceTarget: key });
      this.AppCall('SELECTMGR_SET_MODE', { mode: 'sourcetarget' });
    }

    /**
     * Handles keystrokes as user inputs new node in form
     * @param {string} key
     * @param {string} value
     */

  }, {
    key: 'UISourceTargetInputUpdate',
    value: function UISourceTargetInputUpdate(key, value) {
      var updatedState = {};
      if (key === 'source') {
        updatedState.dSourceNode = { label: value };
      } else {
        updatedState.dTargetNode = { label: value };
      }
      this.setState(updatedState);
    }

    /**
     * User has selected a node with NCAutoSuggest, either
     * - Clicking on a suggested node
     * - Hitting Enter with the form field showing either a valid node or a new node
     * @param {string} key is 'id' or 'label'
     * @param {string} label
     * @param {number} id
     */

  }, {
    key: 'UISourceTargetInputSelect',
    value: function UISourceTargetInputSelect(key, label, id) {
      this.ValidateSourceTarget(key, label, id);
    }
  }, {
    key: 'UICitationShow',
    value: function UICitationShow(event) {
      event.stopPropagation();
      this.setState({ uShowCitationDialog: true });
    }
  }, {
    key: 'UICitationClose',
    value: function UICitationClose() {
      this.setState({ uShowCitationDialog: false });
    }

    /// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    /// RENDER METHODS

  }, {
    key: 'RenderView',
    value: function RenderView() {
      var _state7 = this.state,
          uSelectedTab = _state7.uSelectedTab,
          uBackgroundColor = _state7.uBackgroundColor,
          animateHeight = _state7.animateHeight,
          uEditBtnDisable = _state7.uEditBtnDisable,
          uEditBtnHide = _state7.uEditBtnHide,
          uEditLockMessage = _state7.uEditLockMessage,
          uShowCitationDialog = _state7.uShowCitationDialog,
          id = _state7.id,
          _state7$dSourceNode = _state7.dSourceNode,
          dSourceNode = _state7$dSourceNode === undefined ? { label: undefined } : _state7$dSourceNode,
          _state7$dTargetNode = _state7.dTargetNode,
          dTargetNode = _state7$dTargetNode === undefined ? { label: undefined } : _state7$dTargetNode,
          type = _state7.type,
          isAdmin = _state7.isAdmin;

      var bgcolor = uBackgroundColor + '66'; // hack opacity
      var TEMPLATE = this.AppState('TEMPLATE');
      var defs = TEMPLATE.edgeDefs;
      var uShowCitationButton = TEMPLATE.citation && !TEMPLATE.citation.hidden;
      var disableSourceTargetInView = true;
      var citation = 'NetCreate ' + TEMPLATE.name + ' network, ' + ('Edge: (ID ' + id + '), ') + ('from "' + dSourceNode.label + '" to "' + dTargetNode.label + '". ') + (TEMPLATE.citation && TEMPLATE.citation.text ? TEMPLATE.citation.text + '. ' : '') + ('Last accessed at ' + NCUI.DateFormatted() + '.');
      var collection_ref = CMTMGR.GetEdgeCREF(id);

      return React.createElement(
        'div',
        { className: 'nccomponent ncedge ' + animateHeight },
        React.createElement(
          'div',
          {
            className: 'view',
            style: { backgroundColor: bgcolor },
            onClick: this.UIDeselectEdge
          },
          React.createElement(
            'div',
            { className: 'titlebar', style: { marginBottom: '3px' } },
            React.createElement(
              'div',
              { className: 'nodenumber' },
              'EDGE ',
              id,
              ' '
            ),
            React.createElement('div', null),
            React.createElement(_URCommentVBtn2.default, { cref: collection_ref, key: collection_ref })
          ),
          React.createElement(
            'div',
            { className: 'formview' },
            NCUI.RenderLabel('source', defs['source'].displayLabel),
            this.RenderSourceTargetButton('source', dSourceNode.label, disableSourceTargetInView),
            React.createElement('div', null),
            React.createElement(
              'div',
              { className: 'edgetypeRow' },
              React.createElement(
                'div',
                { className: 'targetarrow' },
                ARROW_DOWN
              ),
              defs['type'] && !defs['type'].hidden ? React.createElement(
                'div',
                { className: 'formview typeview' },
                NCUI.RenderLabel('type', defs['type'].displayLabel, defs['type'].help),
                NCUI.RenderStringValue('type', type)
              ) : React.createElement('div', null)
            ),
            NCUI.RenderLabel('target', defs['target'].displayLabel),
            this.RenderSourceTargetButton('target', dTargetNode.label, disableSourceTargetInView)
          ),
          React.createElement(
            'div',
            { className: 'tabcontainer' },
            NCUI.RenderTabSelectors(TABS, this.state, this.UISelectTab),
            React.createElement(
              'div',
              { className: 'tabview' },
              uSelectedTab === TABS.ATTRIBUTES && NCUI.RenderAttributesTabView(this.state, defs, BUILTIN_FIELDS_EDGE),
              uSelectedTab === TABS.PROVENANCE && NCUI.RenderProvenanceTabView(this.state, defs, BUILTIN_FIELDS_EDGE)
            )
          ),
          React.createElement(
            'div',
            { className: 'controlbar' },
            uShowCitationButton && React.createElement(
              'button',
              {
                id: 'citationbtn',
                className: 'citationbutton',
                onClick: this.UICitationShow,
                type: 'button'
              },
              'Cite Edge'
            ),
            React.createElement('div', { style: { flexGrow: 1 } }),
            !uEditBtnHide && uSelectedTab !== TABS.EDGES && React.createElement(
              'button',
              {
                id: 'editbtn',
                onClick: this.UIRequestEditEdge,
                disabled: uEditBtnDisable,
                type: 'button'
              },
              'Edit'
            )
          ),
          !uEditBtnHide && uEditLockMessage && React.createElement(
            'div',
            { className: 'message warning', style: { marginTop: '1em' } },
            React.createElement(
              'p',
              null,
              uEditLockMessage
            ),
            React.createElement(
              'p',
              { hidden: !isAdmin },
              React.createElement(
                'b',
                null,
                'ADMINISTRATOR ONLY'
              ),
              ': If you are absolutely sure this is an error, you can force the unlock.',
              React.createElement(
                'button',
                {
                  onClick: this.UIDisableEditMode,
                  style: { marginLeft: 0 },
                  type: 'button'
                },
                'Force Unlock'
              )
            )
          )
        ),
        uShowCitationDialog && React.createElement(NCDialogCitation, { message: citation, onClose: this.UICitationClose })
      );
    }
  }, {
    key: 'RenderEdit',
    value: function RenderEdit() {
      var parentNodeId = this.props.parentNodeId;
      var _state8 = this.state,
          sourceId = _state8.sourceId,
          targetId = _state8.targetId,
          type = _state8.type,
          revision = _state8.revision,
          uSelectedTab = _state8.uSelectedTab,
          uSelectSourceTarget = _state8.uSelectSourceTarget,
          uBackgroundColor = _state8.uBackgroundColor,
          uNewNodeLabel = _state8.uNewNodeLabel,
          animateHeight = _state8.animateHeight,
          dSourceNode = _state8.dSourceNode,
          dTargetNode = _state8.dTargetNode;

      var bgcolor = uBackgroundColor + '99'; // hack opacity
      var defs = this.AppState('TEMPLATE').edgeDefs;
      var AskNodeDialog = uNewNodeLabel ? React.createElement(NCDialog, {
        message: 'Node "' + uNewNodeLabel + '" does not exist.  Do you want to create it?',
        okmessage: 'Create "' + uNewNodeLabel + '" node',
        onOK: this.CreateNode,
        cancelmessage: 'Back to Edge Edit',
        onCancel: this.BackToEditing
      }) : '';
      var saveIsDisabled = uSelectSourceTarget || isNaN(sourceId) || isNaN(targetId);
      return React.createElement(
        'div',
        null,
        React.createElement('div', { className: 'screen' }),
        React.createElement(
          'div',
          { className: 'nccomponent ncedge ' + animateHeight },
          React.createElement(
            'div',
            {
              className: 'edit',
              style: {
                background: bgcolor,
                borderColor: uBackgroundColor
              }
            },
            React.createElement(
              'div',
              { className: 'formview' },
              NCUI.RenderLabel('source', defs['source'].displayLabel),
              this.RenderSourceTargetButton('source', dSourceNode.label, parentNodeId === sourceId),
              React.createElement('div', null),
              React.createElement(
                'div',
                { className: 'edgetypeRow' },
                React.createElement(
                  'div',
                  { className: 'targetarrow' },
                  React.createElement(
                    'button',
                    {
                      className: 'swapbtn',
                      onClick: this.SwapSourceAndTarget,
                      title: 'Swap \'Source\' and \'Target\' nodes',
                      type: 'button'
                    },
                    ARROW_UPDOWN
                  )
                ),
                defs['type'] && !defs['type'].hidden && React.createElement(
                  'div',
                  { className: 'formview typeview' },
                  NCUI.RenderLabel('type', defs['type'].displayLabel, defs['type'].help),
                  NCUI.RenderOptionsInput('type', type, defs, this.UIInputUpdate, defs['type'].help)
                )
              ),
              NCUI.RenderLabel('target', defs['target'].displayLabel),
              this.RenderSourceTargetButton('target', dTargetNode.label, parentNodeId === targetId)
            ),
            React.createElement(
              'div',
              { className: 'tabcontainer' },
              NCUI.RenderTabSelectors(TABS, this.state, this.UISelectTab),
              React.createElement(
                'div',
                { className: 'tabview' },
                uSelectedTab === TABS.ATTRIBUTES && NCUI.RenderAttributesTabEdit(this.state, defs, this.UIInputUpdate, BUILTIN_FIELDS_EDGE),
                uSelectedTab === TABS.PROVENANCE && NCUI.RenderProvenanceTabEdit(this.state, defs, this.UIProvenanceInputUpdate, BUILTIN_FIELDS_EDGE)
              )
            ),
            React.createElement(
              'div',
              { className: 'controlbar', style: { justifyContent: 'space-between' } },
              revision > 0 && React.createElement(
                'button',
                {
                  className: 'cancelbtn',
                  onClick: this.UIDeleteEdge,
                  type: 'button'
                },
                'Delete'
              ),
              React.createElement(
                'button',
                {
                  className: 'cancelbtn',
                  onClick: this.UICancelEditMode,
                  type: 'button'
                },
                'Cancel'
              ),
              React.createElement(
                'button',
                { onClick: this.SaveEdge, disabled: saveIsDisabled, type: 'button' },
                'Save'
              )
            )
          )
        ),
        AskNodeDialog
      );
    }

    /// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    /// FORM RENDERERS
    ///

    /**
     * The Source and Target Buttons are used for
     * - Displaying the source / target name in the view/edit panel
     * - Click on Source or Target to select a new one
     * - Showing a focus ring (outline) after having secondarily selected a source/target
     * @param {string} key 'source' or 'target'
     * @param {string} value
     * @param {boolean} disabled Used by renderView to disable source/target selection buttons
     *                           when it isn't being edited
     * @returns {jsx}
     */

  }, {
    key: 'RenderSourceTargetButton',
    value: function RenderSourceTargetButton(key, value, disabled) {
      var _state9 = this.state,
          sourceId = _state9.sourceId,
          targetId = _state9.targetId,
          uSelectSourceTarget = _state9.uSelectSourceTarget,
          dSourceNodeColor = _state9.dSourceNodeColor,
          dTargetNodeColor = _state9.dTargetNodeColor;

      var color = void 0;
      if (!disabled && (uSelectSourceTarget === key || value === undefined)) {
        return React.createElement(NCAutoSuggest, {
          parentKey: key,
          value: value,
          onChange: this.UISourceTargetInputUpdate,
          onSelect: this.UISourceTargetInputSelect
        });
      } else {
        color = key === 'source' ? dSourceNodeColor : dTargetNodeColor;
        // Secondary selection?
        var SELECTION = this.AppState('SELECTION');
        var isSecondarySelection = false;
        if (key === 'source') {
          isSecondarySelection = SELECTION.selectedSecondary === sourceId;
        } else {
          // key === 'target'
          isSecondarySelection = SELECTION.selectedSecondary === targetId;
        }
        var selected = isSecondarySelection ? 'selected' : '';
        return React.createElement(
          'button',
          {
            id: key,
            key: key + 'value',
            className: 'sourcetargetbtn ' + selected,
            onClick: this.UIEnableSourceTargetSelect,
            style: { backgroundColor: color + '55', borderColor: color },
            disabled: disabled,
            autoFocus: !disabled,
            type: 'button'
          },
          value || EDGE_NOT_SET_LABEL
        );
      }
    }

    /// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    /// MAIN RENDER
    ///

  }, {
    key: 'render',
    value: function render() {
      var _state10 = this.state,
          id = _state10.id,
          uViewMode = _state10.uViewMode;

      if (!id) return ''; // nothing selected
      if (uViewMode === NCUI.VIEWMODE.VIEW) {
        return this.RenderView();
      } else {
        return this.RenderEdit();
      }
    }
  }]);

  return NCEdge;
}(UNISYS.Component);

/// EXPORT REACT COMPONENT ////////////////////////////////////////////////////
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -


module.exports = NCEdge;
});

require.register("view/netcreate/components/NCEdgeTable.jsx", function(exports, require, module) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }(); /*//////////////////////////////// ABOUT \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\*\


                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         
dgeTable is used to to display a table of edges for review.

t checks FILTEREDNCDATA to show highlight/filtered state

t uses URTable for rendering and sorting.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         


tableHeight -- sets height based on InfoPanel dragger
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             * isOpen -- whether the table is visible



dgeTable is self contained and relies on global NCDATA to load.

dgeTable tableHeight isOpen />



var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _client = require('unisys/client');

var _client2 = _interopRequireDefault(_client);

var _ncUi = require('../nc-ui');

var _ncUi2 = _interopRequireDefault(_ncUi);

var _ncUtils = require('../nc-utils');

var _ncUtils2 = _interopRequireDefault(_ncUtils);

var _FilterEnums = require('./filter/FilterEnums');

var _FilterEnums2 = _interopRequireDefault(_FilterEnums);

var _commentMgr = require('../comment-mgr');

var _commentMgr2 = _interopRequireDefault(_commentMgr);

var _URTable = require('./URTable');

var _URTable2 = _interopRequireDefault(_URTable);

var _URCommentVBtn = require('./URCommentVBtn');

var _URCommentVBtn2 = _interopRequireDefault(_URCommentVBtn);

var _enum = require('system/util/enum');

var _constant = require('system/util/constant');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

/// CONSTANTS & DECLARATIONS //////////////////////////////////////////////////
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/// Initialize UNISYS DATA LINK for functional react component
var UDATAOwner = { name: 'NCEdgeTable' };
var UDATA = _client2.default.NewDataLink(UDATAOwner);

var DBG = false;

/// REACT FUNCTIONAL COMPONENT ////////////////////////////////////////////////
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
function NCEdgeTable(_ref) {
  var isOpen = _ref.isOpen;

  var isOpenRef = (0, _react.useRef)(isOpen);

  var _useState = (0, _react.useState)({}),
      _useState2 = _slicedToArray(_useState, 2),
      state = _useState2[0],
      setState = _useState2[1];

  /// USEEFFECT ///////////////////////////////////////////////////////////////
  /// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -


  (0, _react.useEffect)(function () {
    var TEMPLATE = UDATA.AppState('TEMPLATE');
    var SESSION = UDATA.AppState('SESSION');
    var NCDATA = UDATA.AppState('NCDATA');
    setState({
      edgeDefs: TEMPLATE.edgeDefs,
      edges: NCDATA.edges,
      nodes: [], // needed for dereferencing source/target
      disableEdit: false,
      isLocked: !SESSION.isValid
    });

    UDATA.OnAppStateChange('FILTEREDNCDATA', urstate_FILTEREDNCDATA);
    UDATA.OnAppStateChange('SESSION', urstate_SESSION);
    UDATA.OnAppStateChange('TEMPLATE', urstate_TEMPLATE);
    return function () {
      UDATA.AppStateChangeOff('FILTEREDNCDATA', urstate_FILTEREDNCDATA);
      UDATA.AppStateChangeOff('SESSION', urstate_SESSION);
      UDATA.AppStateChangeOff('TEMPLATE', urstate_TEMPLATE);
    };
  }, []);

  (0, _react.useEffect)(function () {
    isOpenRef.current = isOpen;
  }, [isOpen]);

  /// UR HANDLERS /////////////////////////////////////////////////////////////
  /// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  /// FILTEREDNCDATA is the reduced list of nodes, not ALL edges
  function urstate_FILTEREDNCDATA(data) {
    // skip update if not open
    if (!isOpenRef.current) return;

    if (data.edges) {
      // If we're transitioning from "COLLAPSE" or "FOCUS" to "HILIGHT/FADE", then we
      // also need to add back in edges that are not in filteredEdges
      // (because "COLLAPSE" and "FOCUS" removes edges that are not matched)
      var FILTERDEFS = UDATA.AppState('FILTERDEFS');
      if (FILTERDEFS.filterAction === _FilterEnums2.default.ACTION.FADE) {
        var NCDATA = UDATA.AppState('NCDATA');
        setState(function (prevState) {
          return _extends({}, prevState, { edges: NCDATA.edges });
        });
      } else {
        setState(function (prevState) {
          return _extends({}, prevState, { edges: data.edges });
        });
      }
    }
  }
  /// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  function urstate_SESSION(decoded) {
    var isLocked = !decoded.isValid;
    if (isLocked === state.isLocked) {
      return;
    }
    setState(function (prevState) {
      return _extends({}, prevState, { isLocked: isLocked });
    });
  }
  /// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  function urstate_TEMPLATE(data) {
    setState(function (prevState) {
      return _extends({}, prevState, {
        edgeDefs: data.edgeDefs,
        selectedEdgeColor: data.sourceColor
      });
    });
  }

  /// COLUMN DEFINTION GENERATION /////////////////////////////////////////////
  /// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  function DeriveColumnDefs(incomingEdgeDefs) {
    var edges = state.edges,
        edgeDefs = state.edgeDefs,
        disableEdit = state.disableEdit,
        isLocked = state.isLocked;

    var defs = incomingEdgeDefs || edgeDefs;

    // Only include built in fields
    // Only include non-hidden fields
    // Only include non-provenance fields
    var attributeDefs = Object.keys(defs).filter(function (k) {
      return !_enum.BUILTIN_FIELDS_EDGE.includes(k) && !defs[k].isProvenance && !defs[k].hidden;
    });
    var provenanceDefs = Object.keys(defs).filter(function (k) {
      return !_enum.BUILTIN_FIELDS_EDGE.includes(k) && defs[k].isProvenance && !defs[k].hidden;
    });

    /// CLICK HANDLERS
    /// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    function ui_ClickViewEdge(event, value) {
      event.preventDefault();
      event.stopPropagation();
      var edgeId = value.edgeId,
          sourceId = value.sourceId;
      // Load Source Node then Edge

      UDATA.LocalCall('SOURCE_SELECT', { nodeIDs: [sourceId] }).then(function () {
        UDATA.LocalCall('EDGE_SELECT', { edgeId: edgeId });
      });
    }
    /// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    function ui_ClickEditEdge(event, value) {
      event.preventDefault();
      event.stopPropagation();
      var edgeId = value.edgeId,
          sourceId = value.sourceId;
      // Load Source Node then Edge

      UDATA.LocalCall('SOURCE_SELECT', { nodeIDs: [sourceId] }).then(function () {
        UDATA.LocalCall('EDGE_SELECT_AND_EDIT', { edgeId: edgeId });
      });
    }
    /// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    function ui_ClickViewNode(event, nodeId) {
      event.preventDefault();
      event.stopPropagation();
      UDATA.LocalCall('SOURCE_SELECT', { nodeIDs: [parseInt(nodeId)] });
    }
    /// RENDERERS
    /// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    function col_RenderViewOrEdit(key, tdata, coldef) {
      var value = tdata[key];
      return _react2.default.createElement(
        'div',
        null,
        !disableEdit && _react2.default.createElement(
          'button',
          {
            className: 'outline',
            type: 'button',
            'aria-label': 'View Edge',
            onClick: function onClick(event) {
              return ui_ClickViewEdge(event, value);
            }
          },
          _constant.ICON_VIEW
        ),
        !disableEdit && !isLocked && _react2.default.createElement(
          'button',
          {
            className: 'outline',
            type: 'button',
            'aria-label': 'Edge Edge',
            onClick: function onClick(event) {
              return ui_ClickEditEdge(event, value);
            }
          },
          _constant.ICON_PENCIL
        )
      );
    }
    /// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    // interface TTblNodeObject {
    //   id: String;
    //   label: String;
    // }
    function col_RenderNode(key, tdata, coldef) {
      var value = tdata[key];
      if (!value) return; // skip if not defined yet
      if (tdata.id === undefined) throw new Error('RenderNode: id is undefined. tdata=' + tdata);
      if (value === undefined) throw new Error('RenderNode: label is undefined. value=' + value);
      return _react2.default.createElement(
        'button',
        {
          className: 'outline',
          type: 'button',
          'aria-label': 'View Edge',
          onClick: function onClick(event) {
            return ui_ClickViewNode(event, value.id);
          }
        },
        _react2.default.createElement(
          'span',
          null,
          value.label
        )
      );
    }
    /// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    function col_RenderCommentBtn(key, tdata, coldef) {
      var value = tdata[key];
      return _react2.default.createElement(_URCommentVBtn2.default, { cref: value.cref });
    }
    /// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    /// tdata = { weight: Number, size: Number }
    function col_RenderWeight(key, tdata, coldef) {
      var value = tdata[key];
      return value.weight + ' (' + value.size + ')';
    }
    /// CUSTOM SORTERS
    /// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    /// tdata = TTblNodeObject[] = { id: String, label: String }
    function col_SortNodes(key, tdata, order) {
      var sortedData = [].concat(_toConsumableArray(tdata)).sort(function (a, b) {
        if (String(a[key].label).toLowerCase() < String(b[key].label).toLowerCase()) return order;
        if (String(a[key].label).toLowerCase() > String(b[key].label).toLowerCase()) return order * -1;
        return 0;
      });
      return sortedData;
    }
    /// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    function col_SortCommentsByCount(key, tdata, order) {
      var sortedData = [].concat(_toConsumableArray(tdata)).sort(function (a, b) {
        if (!a[key].count) return 1; // Move undefined or '' to the bottom regardless of sort order
        if (!b[key].count) return -1; // Move undefined or '' the bottom regardless of sort order
        if (a[key].count < b[key].count) return order;
        if (a[key].count > b[key].count) return order * -1;
        return 0;
      });
      return sortedData;
    }
    /// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    /// tdata = { weight: Number, size: Number }
    function col_SortWeight(key, tdata, order) {
      var sortedData = [].concat(_toConsumableArray(tdata)).sort(function (a, b) {
        if (a[key].weight < b[key].weight) return order;
        if (a[key].weight > b[key].weight) return order * -1;
        return 0;
      });
      return sortedData;
    }
    /// COLUMN DEFINITIONS
    /// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    // column definitions for custom attributes
    // (built in columns are: view, degrees, label)
    var ATTRIBUTE_COLUMNDEFS = attributeDefs.map(function (key) {
      return {
        title: defs[key].displayLabel,
        type: defs[key].type,
        data: key
      };
    });
    var PROVENANCE_COLUMNDEFS = provenanceDefs.map(function (key) {
      return {
        title: defs[key].displayLabel,
        type: defs[key].type,
        data: key
      };
    });
    var COLUMNDEFS = [{
      title: '', // View/Edit
      data: 'id',
      type: defs['id'].type,
      width: 45, // in px
      renderer: col_RenderViewOrEdit,
      sortDisabled: true,
      tipDisabled: true
    }, {
      title: defs['source'].displayLabel,
      width: 130, // in px
      data: 'sourceDef',
      renderer: col_RenderNode,
      sorter: col_SortNodes
    }];
    if (defs['type'] && !defs['type'].hidden) {
      COLUMNDEFS.push({
        title: defs['type'].displayLabel,
        type: 'text-case-insensitive',
        width: 130, // in px
        data: 'type'
      });
    }
    COLUMNDEFS.push.apply(COLUMNDEFS, [{
      title: defs['target'].displayLabel,
      width: 130, // in px
      data: 'targetDef',
      renderer: col_RenderNode,
      sorter: col_SortNodes
    }].concat(_toConsumableArray(ATTRIBUTE_COLUMNDEFS)));
    if (defs['weight'] && !defs['weight'].hidden) COLUMNDEFS.push({
      title: defs['weight'].displayLabel,
      type: 'number',
      width: 45, // in px
      data: 'weightDef',
      renderer: col_RenderWeight,
      sorter: col_SortWeight
    });
    COLUMNDEFS.push.apply(COLUMNDEFS, _toConsumableArray(PROVENANCE_COLUMNDEFS));
    // History
    if (defs['createdBy'] && !defs['createdBy'].hidden) COLUMNDEFS.push({
      title: defs['createdBy'].displayLabel,
      type: 'text-case-insensitive',
      width: 60, // in px
      data: 'createdBy'
    });
    if (defs['created'] && !defs['created'].hidden) COLUMNDEFS.push({
      title: defs['created'].displayLabel,
      type: 'timestamp-short',
      width: 60, // in px
      data: 'created'
    });
    if (defs['updatedBy'] && !defs['updatedBy'].hidden) COLUMNDEFS.push({
      title: defs['updatedBy'].displayLabel,
      type: 'text-case-insensitive',
      width: 60, // in px
      data: 'updatedBy'
    });
    if (defs['updated'] && !defs['updated'].hidden) COLUMNDEFS.push({
      title: defs['updated'].displayLabel,
      type: 'timestamp-short',
      width: 60, // in px
      data: 'updated'
    }); // Comment is last
    COLUMNDEFS.push({
      title: ' ',
      data: 'commentVBtnDef',
      type: 'text',
      width: 40, // in px
      renderer: col_RenderCommentBtn,
      sorter: col_SortCommentsByCount,
      tipDisabled: true
    });
    return COLUMNDEFS;
  }

  /// TABLE DATA GENERATION ///////////////////////////////////////////////////
  /// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  function DeriveTableData(_ref2) {
    var edgeDefs = _ref2.edgeDefs,
        edges = _ref2.edges;

    // Only include built in fields
    // Only include non-hidden fields
    // Only include non-provenance fields
    var attributeDefs = Object.keys(edgeDefs).filter(function (k) {
      return !_enum.BUILTIN_FIELDS_EDGE.includes(k) && !edgeDefs[k].hidden && !edgeDefs[k].isProvenance;
    });
    var provenanceDefs = Object.keys(edgeDefs).filter(function (k) {
      return edgeDefs[k].isProvenance;
    });

    return edges.map(function (edge, i) {
      var id = edge.id,
          source = edge.source,
          target = edge.target,
          sourceLabel = edge.sourceLabel,
          targetLabel = edge.targetLabel,
          type = edge.type,
          weight = edge.weight,
          size = edge.size;

      var sourceDef = { id: source, label: sourceLabel };
      var targetDef = { id: target, label: targetLabel };

      // weightDef
      var weightDef = { weight: weight, size: size };

      // custom attributes
      var attributes = {};
      attributeDefs.forEach(function (key, i) {
        var data = {};
        if (edgeDefs[key].type === 'markdown') {
          // for markdown:
          // a. provide the raw markdown string
          // b. provide the HTML string
          data.html = _ncUi2.default.Markdownify(edge[key]);
          data.raw = edge[key];
        } else if (edgeDefs[key].type === 'hdate') {
          data = edge[key] && edge[key].formattedDateString;
        } else if (edgeDefs[key].type === 'infoOrigin') {
          data = edge[key] === undefined || edge[key] === '' ? _ncUtils2.default.DeriveInfoOriginString(edge.createdBy, edge.meta ? edge.meta.created : '') : edge[key];
        } else data = edge[key];
        attributes[key] = data;
      });

      // comment button definition
      var cref = _commentMgr2.default.GetEdgeCREF(id);
      var commentCount = _commentMgr2.default.GetCommentCollectionCount(cref);
      var ccol = _commentMgr2.default.GetCommentCollection(cref) || {};
      var hasUnreadComments = ccol.hasUnreadComments;
      var selected = _commentMgr2.default.GetOpenComments(cref);
      var commentVBtnDef = {
        cref: cref,
        count: commentCount,
        hasUnreadComments: hasUnreadComments,
        selected: selected
      };

      // provenance
      var provenance = {};
      provenanceDefs.forEach(function (key, i) {
        var data = {};
        if (edgeDefs[key].type === 'markdown') {
          // for markdown:
          // a. provide the raw markdown string
          // b. provide the HTML string
          data.html = _ncUi2.default.Markdownify(edge[key]);
          data.raw = edge[key];
        } else if (edgeDefs[key].type === 'hdate') {
          data = edge[key] && edge[key].formattedDateString;
        } else if (edgeDefs[key].type === 'infoOrigin') {
          data = edge[key] === undefined || edge[key] === '' ? _ncUtils2.default.DeriveInfoOriginString(edge.createdBy, edge.meta ? edge.meta.created : '') : edge[key];
        } else data = edge[key] || '';
        provenance[key] = data;
      });

      // history
      var history = {
        createdBy: edge.createdBy,
        created: edge.meta ? edge.meta.created : '', // meta may not be defined when a new node is creatd
        updatedBy: edge.updatedBy,
        updated: edge.meta ? edge.meta.updated : '' // meta may not be defined when a new node is creatd
      };

      return _extends({
        id: { edgeId: id, sourceId: source }, // { edgeId, sourceId} for click handler
        sourceDef: sourceDef, // { id: String, label: String }
        targetDef: targetDef, // { id: String, label: String }
        type: type,
        weightDef: weightDef, // { weight: Number, size: Number }
        weight: weight,
        size: size
      }, attributes, {
        commentVBtnDef: commentVBtnDef
      }, provenance, history, {
        meta: {
          filteredTransparency: edge.filteredTransparency
        }
      });
    });
  }

  /// COMPONENT RENDER ////////////////////////////////////////////////////////
  /// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  if (state.edges === undefined) return 'loading...waiting for edges ' + state.edges;
  if (state.edgeDefs === undefined) return 'loading...waiting for nodeDefs ' + state.edgeDefs;

  var COLUMNDEFS = DeriveColumnDefs();
  var TABLEDATA = DeriveTableData({ edgeDefs: state.edgeDefs, edges: state.edges });
  return _react2.default.createElement(
    'div',
    { id: 'NCEdgeTable' },
    _react2.default.createElement(_URTable2.default, { isOpen: isOpenRef.current, data: TABLEDATA, columns: COLUMNDEFS })
  );
}

/// EXPORT REACT COMPONENT ////////////////////////////////////////////////////
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
exports.default = NCEdgeTable;
});

require.register("view/netcreate/components/NCFiltersSummary.jsx", function(exports, require, module) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }(); /*//////////////////////////////// ABOUT \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\*\



iltersSummary displays:
f no filters are active, the count of nodes and edges in the graph
f filters are active...
the summary of filters applied and
the count of nodes and edges active in the graph



var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _client = require('unisys/client');

var _client2 = _interopRequireDefault(_client);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/// CONSTANTS & DECLARATIONS //////////////////////////////////////////////////
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/// Initialize UNISYS DATA LINK for react component
var UDATAOwner = { name: 'NCFiltersSummary' };
var UDATA = _client2.default.NewDataLink(UDATAOwner);
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
var DBG = false;
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

/// REACT FUNCTIONAL COMPONENT ////////////////////////////////////////////////
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
function NCFiltersSummary() {
  var _useState = (0, _react.useState)({
    filtersSummary: '',
    graphStats: ''
  }),
      _useState2 = _slicedToArray(_useState, 2),
      state = _useState2[0],
      setState = _useState2[1];
  /// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -


  (0, _react.useEffect)(function () {
    UDATA.OnAppStateChange('FILTEREDNCDATA', urmsg_UpdateFilterSummary);
    return function () {
      UDATA.AppStateChangeOff('FILTEREDNCDATA', urmsg_UpdateFilterSummary);
    };
  }, []);

  function urmsg_UpdateFilterSummary(data) {
    // If there is no change in filtersSummary or graphStats, skip the state update
    // This prevents unnecessary re-renders and improves performance

    var _data$stats = data.stats,
        filtersSummary = _data$stats.filtersSummary,
        graphStats = _data$stats.graphStats;


    if (filtersSummary === state.filtersSummary && graphStats === state.graphStats) {
      console.warn('FILTER_SUMMARY_UPDATE...urmsg_UpdateFilterSummary... no data skipping state update');
      return;
    }

    if (filtersSummary && filtersSummary !== state.filtersSummary || graphStats && graphStats !== state.graphStats) {
      setState(function (prevState) {
        return _extends({}, prevState, {
          filtersSummary: filtersSummary,
          graphStats: graphStats
        });
      });
    }
  }
  /// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  function evt_ClearFilters() {
    UDATA.LocalCall('FILTER_CLEAR');
  }

  /// COMPONENT RENDER ////////////////////////////////////////////////////////
  /// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  return _react2.default.createElement(
    'div',
    { id: 'filters-summary' },
    !state.filtersSummary && state.graphStats,
    state.filtersSummary,
    state.filtersSummary && _react2.default.createElement(
      'button',
      { className: 'cat', onClick: evt_ClearFilters },
      'Clear Filters'
    )
  );
}

/// EXPORT REACT COMPONENT ////////////////////////////////////////////////////
exports.default = NCFiltersSummary;
});

require.register("view/netcreate/components/NCGraph.jsx", function(exports, require, module) {
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/*//////////////////////////////// ABOUT \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\*\

  NetGraph is a React wrapper for a D3 network graph component.

  This component uses React to create the base dom element, but ncGraphRenderer
  handles the data updates, rendering and animation updates.

  React is explicitly prevented from updating the component (see
  shouldComponentUpdate)

  ## TO USE

          <NCGraph/>

  ## Why not use FauxDom?

  https://lab.oli.me.uk/react-faux-dom-state/
  This article suggests that maybe using force graphs with react-faux-dom
  not quite work.
      "If you want to animate things, use a React animation library (they’re
        great and work fine with faux DOM), you have to find the React way to
        do things, sadly some D3 concepts just don’t translate. If you want
        some physics based graph full of state then you’re probably better
        off keeping to the original way of embedding D3 in React, dropping
        out of React and letting D3 mutate that element."
  Indeed, in our testing, the animation updates were not optimal.

\*\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ * //////////////////////////////////////*/

var React = require('react');
var NCGraphRenderer = require('./NCGraphRenderer');
var UNISYS = require('unisys/client');
var RENDERMGR = require('../render-mgr');

/// CONSTANTS & DECLARATIONS //////////////////////////////////////////////////
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
var DBG = false;
var PR = 'NCGraph';

/// REACT COMPONENT ///////////////////////////////////////////////////////////
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/// export a class object for consumption by brunch/require

var NCGraph = function (_UNISYS$Component) {
  _inherits(NCGraph, _UNISYS$Component);

  function NCGraph(props) {
    _classCallCheck(this, NCGraph);

    var _this = _possibleConstructorReturn(this, (NCGraph.__proto__ || Object.getPrototypeOf(NCGraph)).call(this, props));

    _this.state = {
      ncGraphRenderer: undefined,
      d3data: {},
      nodeTypes: [],
      edgeTypes: []
    };

    _this.updateVData = _this.updateVData.bind(_this);
    _this.updateTemplate = _this.updateTemplate.bind(_this);
    _this.updateColorMap = _this.updateColorMap.bind(_this);
    _this.updateSelection = _this.updateSelection.bind(_this);
    _this.onZoomReset = _this.onZoomReset.bind(_this);
    _this.onZoomIn = _this.onZoomIn.bind(_this);
    _this.onZoomOut = _this.onZoomOut.bind(_this);
    _this.constructGraph = _this.constructGraph.bind(_this);

    _this.OnAppStateChange('VDATA', _this.updateVData);
    _this.OnAppStateChange('TEMPLATE', _this.updateTemplate);
    _this.OnAppStateChange('COLORMAP', _this.updateColorMap);
    _this.OnAppStateChange('SELECTION', _this.updateSelection);
    _this.OnAppStateChange('HILITE', _this.updateSelection);
    _this.HandleMessage('CONSTRUCT_GRAPH', _this.constructGraph);
    return _this;
  } // constructor

  /// CLASS PRIVATE METHODS /////////////////////////////////////////////////////
  /// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  /// DATA METHODS
  /**
   *
   * @param {object} data
   * @param {array} data.nodes
   * @param {array} data.edges
   */


  _createClass(NCGraph, [{
    key: 'updateVData',
    value: function updateVData(data) {
      if (DBG) console.log(PR, 'got state D3DATA', data, RENDERMGR);
      if (!this.state.ncGraphRenderer) return;
      var d3data = RENDERMGR.ProcessNCData(data);
      this.state.ncGraphRenderer.SetData(d3data);
    }
    /**
     * Update default values when template has changed
     * @param {object} data TEMPLATE
     */

  }, {
    key: 'updateTemplate',
    value: function updateTemplate(data) {
      var _this2 = this;

      if (DBG) console.log(PR, 'got state TEMPLATE', data);
      var TEMPLATE = this.AppState('TEMPLATE');
      // Update Legends
      var nodeTypes = TEMPLATE.nodeDefs.type.options;
      var edgeTypes = TEMPLATE.edgeDefs.type.options;
      // Update
      this.setState({ nodeTypes: nodeTypes, edgeTypes: edgeTypes }, function () {
        _this2.forceUpdate(); // just once, needed to overcome shouldComponentUpdate override
      });
    }
    /**
     * Node/Edge Colors in Template have been changed.
     * The template may be loaded or changed after NCDATA is loaded.
     * So we need to explicitly update the colors if the color
     * definitions have changed.
     */

  }, {
    key: 'updateColorMap',
    value: function updateColorMap(data) {
      if (DBG) console.log(PR, 'got state COLORMAP', data);
      this.state.ncGraphRenderer.UpdateGraph();
    }
    /**
     *
     * @param {*} data
     */

  }, {
    key: 'updateSelection',
    value: function updateSelection(data) {
      if (DBG) console.log(PR, 'updateSelection', data);
      var d3data = RENDERMGR.UpdateSelection(data);
      this.state.ncGraphRenderer.SetData(d3data, { skipForceUpdate: true });
    }

    /// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    /// UI METHODS

    /**
     */

  }, {
    key: 'onZoomReset',
    value: function onZoomReset() {
      this.state.ncGraphRenderer.ZoomReset();
    }
    /**
     */

  }, {
    key: 'onZoomIn',
    value: function onZoomIn() {
      this.state.ncGraphRenderer.ZoomIn();
    }
    /**
     */

  }, {
    key: 'onZoomOut',
    value: function onZoomOut() {
      this.state.ncGraphRenderer.ZoomOut();
    }

    /// REACT LIFECYCLE ///////////////////////////////////////////////////////////
    /// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    /**
     */

  }, {
    key: 'constructGraph',
    value: function constructGraph() {
      // first destroy any existing SVG graph elements
      var netgraph = document.getElementById('netgraph');
      if (netgraph) netgraph.remove();

      // ncGraphRenderer Constructor
      var TEMPLATE = this.AppState('TEMPLATE');
      if (this.state.ncGraphRenderer && this.state.ncGraphRenderer.Deregister) {
        // if ncGraphRenderer was previously created, deregister it so it stops receiving data updates
        this.state.ncGraphRenderer.Deregister();
      }
      var ncGraphRenderer = new NCGraphRenderer(this.dom); // this.dom defined in render via ref
      try {
        var nodeTypes = TEMPLATE.nodeDefs.type.options;
        var edgeTypes = TEMPLATE.edgeDefs.type.options;
        this.setState({ ncGraphRenderer: ncGraphRenderer, nodeTypes: nodeTypes, edgeTypes: edgeTypes });
        this.forceUpdate(); // just once, needed to overcome shouldComponentUpdate override
      } catch (err) {
        console.warn('constructGraph error', err);
      }
    }

    /// REACT LIFECYCLE ///////////////////////////////////////////////////////////
    /// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    /**
     */

  }, {
    key: 'componentDidMount',
    value: function componentDidMount() {
      this.constructGraph();
    }
    /// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    /**
     */

  }, {
    key: 'componentWillUnMount',
    value: function componentWillUnMount() {
      this.AppStateChangeOff('VDATA', this.updateVData);
      this.AppStateChangeOff('TEMPLATE', this.updateTemplate);
      this.AppStateChangeOff('COLORMAP', this.updateColorMap);
      this.AppStateChangeOff('SELECTION', this.updateSelection);
      this.AppStateChangeOff('HILITE', this.updateSelection);
      this.DropMessage('CONSTRUCT_GRAPH', this.constructGraph);
    }
    /// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    /**
     */

  }, {
    key: 'shouldComponentUpdate',
    value: function shouldComponentUpdate() {
      // This prevents React from updating the component,
      // allowing D3 to handle the simulation animation updates
      // This is also necessary for D3 to handle the
      // drag events.
      return false;
    }
    /// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    /**
     */

  }, {
    key: 'render',
    value: function render() {
      var _this3 = this;

      var _state = this.state,
          nodeTypes = _state.nodeTypes,
          edgeTypes = _state.edgeTypes;

      return React.createElement(
        'div',
        { className: 'NCGraph', ref: function ref(dom) {
            return _this3.dom = dom;
          } },
        React.createElement(
          'div',
          { className: 'zoom-buttons' },
          React.createElement(
            'button',
            { onClick: this.onZoomIn, role: 'button', 'aria-label': 'Zoom In' },
            React.createElement('img', { src: '/images/icn_plus.svg', alt: '' })
          ),
          '\xA0',
          React.createElement(
            'button',
            { onClick: this.onZoomReset, role: 'button', 'aria-label': 'Zoom Reset' },
            React.createElement('img', { src: '/images/icn_circle.svg', alt: '' })
          ),
          '\xA0',
          React.createElement(
            'button',
            { onClick: this.onZoomOut, role: 'button', 'aria-label': 'Zoom Out' },
            React.createElement('img', { src: '/images/icn_minus.svg', alt: '' })
          )
        ),
        React.createElement(
          'div',
          { className: 'legend' },
          React.createElement(
            'h1',
            null,
            'Node Types:'
          ),
          nodeTypes.map(function (type, i) {
            return React.createElement(
              'div',
              { key: i, className: 'tooltipAnchor' },
              React.createElement(
                'div',
                { className: 'legend-item' },
                React.createElement('div', { className: 'swatch', style: { backgroundColor: type.color } }),
                '\xA0',
                type.label === '' ? 'No Type Selected' : type.label
              ),
              React.createElement(
                'span',
                { className: 'tooltiptextabove' },
                type.label === '' ? 'No Type Selected' : type.help || type.label
              )
            );
          }),
          React.createElement('br', null),
          React.createElement(
            'h1',
            null,
            'Edge Types:'
          ),
          edgeTypes.map(function (type, i) {
            return React.createElement(
              'div',
              { key: i, className: 'tooltipAnchor' },
              React.createElement(
                'div',
                { className: 'legend-item' },
                React.createElement('div', { className: 'swatch', style: { backgroundColor: type.color } }),
                '\xA0',
                type.label === '' ? 'No Type Selected' : type.label
              ),
              React.createElement(
                'span',
                { className: 'tooltiptextabove' },
                type.label === '' ? 'No Type Selected' : type.help || type.label
              )
            );
          })
        )
      );
    }
  }]);

  return NCGraph;
}(UNISYS.Component); // class NetGraph

/// EXPORT REACT COMPONENT ////////////////////////////////////////////////////
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -


module.exports = NCGraph;
});

require.register("view/netcreate/components/NCGraphRenderer.js", function(exports, require, module) {
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/* eslint-disable prefer-reflect */
/* d3.call() is false-triggering the above rule */
/*//////////////////////////////// ABOUT \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\*\

  NCGraphRenderer

  This uses D3 Version 4.0.

  This is a pure data renderer based on d3-simplenetgraph.
  It does not rely on any outside data sources/dependencies or UNISYS calls.

  The one exception is that `mouseover` and `node click` events are
  broadcast through UNISYS calls.

  This is designed to work with the NCGraph React component.

  NCGraph calls NCGraphRenderer.SetData whenever it receives an updated data object.
  This triggers NCGraphRenderer to redraw itself.

  VDATA
  -----
  The data for display is generally referred to as VDATA, for visual
  rendering data.

    VDATA = { nodes:Object, edges:Object }
    nodes = [ ...{ id :number,
                    label :string,
                    selected :boolean,
                    selectedSecondary :boolean,  // for selected source/target node
                    size :number,
                    color :string(css),
                    opacity :number(0-1),
                    strokeColor :string(css),
                    strokeWidth :number,
                    textColor :string(css),
                    help :string
                  }],
    edges = [ ...{ id :number,
                    sourceId :number,
                    targetId :number,
                    size: number,
                    color: string(css),
                    opacity: number(0-1)
                  }]


  Using NCGraphRenderer
  ---------------------
  Embed NCGraphRender in a parent component.  See NCGraph for an example of use.
  1. const graph = NCGraphRender(this.dom) -- Root element to attach the SVG graph to
  2. graph.SetData(VDATA) -- Define data to draw
      graph.UpdateGraph()   -- Force a redraw using the loaded data set

  External Controls
  * graph.ZoomReset()
  * graph.ZoomIn()
  * graph.ZoomOut()


  Zoom/Pan
  --------
  Zooming/panning is handled via D3's zoom() function.  Basically it
  involves creating a `g` element that wraps the node and link elements
  and applying transforms on that wrapper.


  Provenance
  ----------
  d3-simplenetgraph was based on:
  *  rdpoor's commented version of mbostock's original code
      https://gist.github.com/rdpoor/3a66b3e082ffeaeb5e6e79961192f7d8
  *  danilo's v4 update
      https://bl.ocks.org/tezzutezzu/cd04b3f1efee4186ff42aae66c87d1a7
  *  mbostock's general update pattern
      https://bl.ocks.org/mbostock/3808218
  *  Coderwall's zoom and pan method
      https://coderwall.com/p/psogia/simplest-way-to-add-zoom-pan-on-d3-js
  *  Vladyslav Babenko's zoom buttons example
      https://jsfiddle.net/vbabenko/jcsqqu6j/9/

\*\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ * //////////////////////////////////////*/

var d3 = require('d3');
var UNISYS = require('unisys/client');
var UDATA = null;

/// CONSTANTS & DECLARATIONS //////////////////////////////////////////////////
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
var DBG = false;
var PR = 'NCGraphRenderer';
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
var m_width = 800;
var m_height = 800;
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
var M_FORCEPROPERTIES = {
  // values for all forces
  center: {
    x: 0.5,
    y: 0.5
  },
  charge: {
    // 'charge' provides a repelling force against other nodes
    enabled: true,
    // -50 works well for small networks with no links
    strength: -200, // during _UpdateForces, 'strength' is multipled by the size of the node (degrees+1)
    // -50 close < -1000 pushes nodes far apart
    distanceMin: 1, // use 'collide' to keep nodes from intersecting, not distance
    distanceMax: 750 // max keeps large clusters from pushing unattached nodes too far away
    // 250 close < 500 med < 1000 spacious < 10000 far away
  },
  collide: {
    // 'collide' keeps nodes from overlapping each other
    // collide's `radius` value maintains a minimum distance between nodes
    enabled: true,
    strength: 0.75, // 1 keeps nodes from intersecting during drag so nodes feel more solid
    // 0.75 softens the collisions so they don't feel so jarring
    // 0.3 will allow nodes to intersect, then iterations will push them out
    iterations: 5, // need at least 3 iterations to stabilize
    // at 1 graph takes a long time to reach equilibrium
    radius: 7 // `radius` is added to node.degrees + defaultSize during _UpdateForces with the node radius
  },
  forceX: {
    // 'forceX' pushes nodes towards a normalized x position
    // x is calculated relative to the m_width
    // e.g. x=0.5 is the center
    // higher strength will push harder towards the x point
    // e.g. to create a narrow tall graph, use strength: 2
    enabled: true,
    strength: 0.25, // 1 clumped < 0.3 med  < 0.2 loose < 0.1 very loose
    x: 0.5
  },
  forceY: {
    // 'forceY' pushes nodes towards a normalized y position
    // y is calculated relative to the m_height
    // e.g. y=0.5 is the center
    // higher strength will push harder towards the y point
    // e.g. to create a wide short graph, use strength: 2
    enabled: true,
    strength: 0.25, // 1 clumped < 0.3 med  < 0.2 loose < 0.1 very loose
    y: 0.5
  },
  link: {
    enabled: true,
    distance: 50, // sets the basic link distance between nodes
    // 10 is a little too close
    // 25 is cozy
    // 50 is spacious
    // 100 leaves everything too far apart
    iterations: 5 // Orig val = 1.  More iterations will give graph time to settle
  }
}; // M_FORCEPROPERTIES

/// NCGraphRenderer CLASS //////////////////////////////////////////////////////////
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

var NCGraphRenderer = function () {
  function NCGraphRenderer(rootElement) {
    _classCallCheck(this, NCGraphRenderer);

    this.rootElement = rootElement;
    this.d3svg = {};
    this.zoom = {};
    this.zoomWrapper = {};
    this.simulation = {};
    this.data = { nodes: [], edges: [] };

    this.clickFn = {};

    /// Initialize UNISYS DATA LINK for REACT
    UDATA = UNISYS.NewDataLink(this);

    /// D3 CODE ///////////////////////////////////////////////////////////////////
    /// note: this is all inside the class constructor function!
    /// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

    // this.UpdateDefaultValues(); // needs TEMPLATE

    // Set up Zoom
    this.zoom = d3.zoom().on('zoom', this.m_HandleZoom);

    /** Create svg element which will contain our D3 DOM elements.
        Add default click handler so when clicking empty space, deselect all.
        NOTE: the svg element is actualy d3.selection object, not an svg obj.
     */
    this.d3svg = d3.select(rootElement).append('svg').attr('id', 'netgraph').attr('width', '100%') // maximize width and height
    .attr('height', '100%') // then set center dynamically below
    .on('click', function (e, event) {
      // Deselect
      UDATA.LocalCall('D3_SELECT_NODE', { nodeLabels: [] });
      // DEPRECATED for now 7/2023 -- use D3_SELECT_NODE instead
      // UDATA.LocalCall('SOURCE_SELECT', { nodeLabels: [] });
    }).on('mouseover', function (d) {
      UDATA.LocalCall('USER_HILITE_NODE', { nodeId: undefined });
      // Deselect edges
      d3.selectAll('.edge').transition().duration(1500).style('stroke-width', function (e) {
        return e.width;
      });
      d3.event.stopPropagation();
    }).call(this.zoom);

    this.zoomWrapper = this.d3svg.append('g').attr('class', 'zoomer');

    // Set SVG size and centering.
    var svg = document.getElementById('netgraph');
    m_width = svg.clientWidth;
    m_height = svg.clientHeight;

    this.simulation = d3.forceSimulation();

    /// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    /// END D3 CODE ///////////////////////////////////////////////////////////////

    this.ClearSVG = this.ClearSVG.bind(this);
    this.SetData = this.SetData.bind(this);
    this.m_Initialize = this.m_Initialize.bind(this);
    this.UpdateGraph = this.UpdateGraph.bind(this);
    this.m_UpdateForces = this.m_UpdateForces.bind(this);
    this.m_Tick = this.m_Tick.bind(this);
    this.ZoomReset = this.ZoomReset.bind(this);
    this.ZoomIn = this.ZoomIn.bind(this);
    this.ZoomOut = this.ZoomOut.bind(this);
    this.ZoomPanReset = this.ZoomPanReset.bind(this);
    this.m_HandleZoom = this.m_HandleZoom.bind(this);
    this.m_Transition = this.m_Transition.bind(this);
    this.m_Dragstarted = this.m_Dragstarted.bind(this);
    this.m_Dragged = this.m_Dragged.bind(this);
    this.m_Dragended = this.m_Dragended.bind(this);
  }

  /// CLASS PUBLIC METHODS //////////////////////////////////////////////////////
  /// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -


  _createClass(NCGraphRenderer, [{
    key: 'Deregister',
    value: function Deregister() {
      if (DBG) console.log(PR, 'NCGraphRenderer.DESTRUCT!!!');
      // Take care of any de-registration of listeners...
      // ...there aren't any at the moment...
    }

    /// CLASS PRIVATE METHODS /////////////////////////////////////////////////////
    /// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

    /** Clear the SVG data
        Currently not used because we just deconstruct d3-simplenetgraph insead.
        Was thought to be needed during imports otherwise _UpdateGraph reads data from existing
        SVG elements rather than the new data.
     */

  }, {
    key: 'ClearSVG',
    value: function ClearSVG() {
      this.zoomWrapper.selectAll('.edge').remove();
      this.zoomWrapper.selectAll('.node').remove();
    }

    /** The parent container passes data to the d3 graph via this SetData call
     *  which then triggers all the internal updates
     *
     *  When a SELECTION is updated, we use skipForceUpdate to preven the
     *  simulation from re-applying forces, causing nodes to move.  Without this
     *  as you mouseover a node, ALL the nodes move and it becomes impossible to
     *  select the node.
     *  @param {Object} newData VDATA { nodes, edges }
     *  @param {Object} options
     *  @param {boolean} options.skipForceUpdate skip force updates during selection updates
     */

  }, {
    key: 'SetData',
    value: function SetData(newData) {
      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

      if (newData) {
        // Make a shallow copy to protect against mutation, while
        // recycling old nodes to preserve position and velocity.
        // From https://observablehq.com/@d3/modifying-a-force-directed-graph?collection=@d3/d3-force
        // grab the SVG nodes
        var svgNodes = this.zoomWrapper.selectAll('.node');
        var oldNodes = new Map(svgNodes.data().map(function (d) {
          return [d.id, d];
        }));

        this.data.nodes = newData.nodes.map(function (d) {
          return Object.assign(oldNodes.get(d.id) || {}, d);
        });
        this.data.edges = newData.edges.map(function (d) {
          return Object.assign({}, d);
        });

        // FIXME: REVIEW: is this not necessary?  Just check initialize once?
        if (!options.skipForceUpdate) this.m_Initialize();
        if (!options.skipForceUpdate) this.m_UpdateForces();
        this.UpdateGraph(options.skipForceUpdate);

        // updates ignored until this is run restarts the simulation
        // (important if simulation has already slowed down)
        // skipForceUpdate here is helpful for preventing force updates when hovering
        // or tryng to select an object.
        if (!options.skipForceUpdate) this.simulation.alpha(0.1).restart(); // was 1 - JD
      }
    }

    /** This sets up the force properties for the simulation and tick handler.
     */

  }, {
    key: 'm_Initialize',
    value: function m_Initialize() {
      // Create the force layout.  After a call to force.start(), the tick
      // method will be called repeatedly until the layout "gels" in a stable
      // configuration.
      this.simulation.force('link', d3.forceLink()).force('charge', d3.forceManyBody()).force('collide', d3.forceCollide()).force('center', d3.forceCenter()).force('forceX', d3.forceX()).force('forceY', d3.forceY()).on('tick', this.m_Tick);
    }
    /// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    /**
     * Call UpdateGraph() after new data has been loaded. This creates link and node
        svg objects and sets their forceProperties.
        The component `node` structure:
            <g class="node">  // node group object
              <circle>
              <text>         // label
              <title>        // tooltip
            </g>
         This method implements the unified enter/exit/update pattern described
        here: http://d3indepth.com/enterexit/#general-update-pattern
         By convention, selection methods that return the current selection use
        four spaces of indent, while methods that return a new selection use only two.
        This helps reveal changes of context by making them stick out of the chain.
         This method actually does more than just "update" an existing graph; in D3
        you can write code that initializes AND updates data.
     */

  }, {
    key: 'UpdateGraph',
    value: function UpdateGraph() {
      var _this = this;

      // DATA JOIN
      // select all elemnts with class .node in d3svg
      // bind selected elements with elements in this.data.nodes,
      // assigning each one an id using the key function.

      // nodeElements is a d3.selection object
      var nodeElements = this.zoomWrapper.selectAll('.node').data(this.data.nodes, function (d) {
        return d.id;
      }); // fn returns the calculated key for the data object

      // linkElements is a d3.selection object
      var linkElements = this.zoomWrapper.selectAll('.edge').data(this.data.edges, function (d) {
        return d.id;
      }); // fn returns the calculated key for the data object

      // TELL D3 HOW TO HANDLE NEW NODE DATA
      // the d3.selection.enter() method sets the operational scope for
      // subsequent calls
      var elementG = nodeElements.enter().append('g').classed('node', true);

      // enter node: append 'g' (group) element and click behavior
      elementG.call(d3.drag().on('start', function (d) {
        _this.m_Dragstarted(d, _this);
      }).on('drag', this.m_Dragged).on('end', function (d) {
        _this.m_Dragended(d, _this);
      })).on('click', function (d) {
        if (DBG) console.log('clicked on', d.label, d.id);
        UDATA.LocalCall('D3_SELECT_NODE', { nodeIDs: [d.id] });
        // DEPRECATED for now 7/2023 -- use D3_SELECT_NODE instead
        // UDATA.LocalCall('SOURCE_SELECT', { nodeIDs: [d.id] });
        d3.event.stopPropagation();
      }).on('mouseover', function (d) {
        UDATA.LocalCall('USER_HILITE_NODE', { nodeId: d.id });
        d3.selectAll('.edge').transition().duration(500).style('stroke-width', function (e) {
          return e.width;
        });
        d3.event.stopPropagation();
      });

      // enter node: also append 'circle' element of a calculated size
      elementG.append('circle').attr('r', function (d) {
        return d.size;
      }) // "r" has to be set here or circles don't draw.
      .attr('fill', function (d) {
        return d.color;
      }).style('opacity', function (d) {
        return d.opacity;
      });

      // EXPERIMENTAL: Show rectangle shapes
      // REVIEW: Is there a way not to create this if it's not needed?
      // elementG
      //   .append('rect')
      //   .attr('width', d => d.size * 2)
      //   .attr('height', d => d.size * 2)
      //   .attr('x', d => -d.size)
      //   .attr('y', d => -d.size)
      //   .attr('fill', d => d.color)
      //   .style('opacity', 0);

      // enter node: also append 'text' element
      elementG.append('text').classed('noselect', true).attr('font-size', 10).attr('dx', function (d) {
        return d.size + 5;
      }).attr('dy', '0.35em') // ".15em")
      .text(function (d) {
        return d.label;
      }).style('opacity', function (d) {
        return d.opacity;
      });

      // enter node: also append a 'title' tag
      // we should move this to our tooltip functions, but it works for now
      elementG.append('title') // node tooltip
      .text(function (d) {
        return d.help;
      });

      /** TRICKY D3 CODE CONCEPTS AHEAD
           CONTEXT: The author of this code has assumed that NCDATA may
          completely changed, so his update code is written with this in mind.
           At this point in the code, nodeElements is operating on the enter()
          selection set (remember: nodeElements is a REFERENCE to the
          original d3 selection object, which is being transmutted by every
          operation).
           Given the above, .merge() will combine the current active d3
          selection (enter()) with all the nodes (nodeEntry in its entirety).
           It may seem weird because:
           (1) the d3.selection() context isn't always obvious unless you
              know that d3.selections and key ops like .enter(), .update(),
              and .exit() affect certain other ops.
          (2) this code reads like it's executing immediately on nodeElements,
              but it actually is a PROGRAM being defined for a d3.selection
              event that runs later. The value of the parameter nodeElements
              will have a different value in the future than it does at the
              time of definition here.
           In effect, the merge() operation is used to use the same
          initialization code for both enter() and manual refresh.
           ASIDE: There is an d3.selection.update() operation, but that  is
          called when d3 detects that data node bound to an existing DOM
          element has changed. This code doesn't use update(), and instead
          relies on manual event detection to force a full data refresh and
          update. D3 doesn't die because it is aware of the persistent SVG
          elements  it created, and checks data binding through the id. This
          is fast, and the SVG elements do not have to be recreated.
        */

      // UPDATE circles in each node for all nodes
      nodeElements.merge(nodeElements).selectAll('circle').attr('stroke', function (d) {
        return d.strokeColor;
      }).attr('stroke-width', function (d) {
        return d.strokeWidth;
      }).attr('fill', function (d) {
        return d.color;
      }).attr('r', function (d) {
        return d.size;
      }).transition().duration(500).style('opacity', function (d) {
        return d.opacity;
      });

      // UPDATE text in each node for all nodes
      // (technically this could have proceeded from the previous operation,
      // but this makes it a little easier to findthe text-specific code as
      // a block
      nodeElements.merge(nodeElements).selectAll('text').attr('fill', function (d) {
        return d.textColor;
      })
      // .attr('stroke', d => d.strokeColor) // stroke overlaps on text
      // .attr('stroke-width', '0.5px') // stroke overlaps on text
      .attr('font-weight', function (d) {
        return d.strokeColor ? 'bold' : undefined;
      }).text(function (d) {
        return d.label;
      }) // in case text is updated
      .transition().duration(500).style('opacity', function (d) {
        return d.opacity;
      });

      nodeElements.merge(nodeElements).selectAll('title') // node tooltip
      .text(function (d) {
        return d.help;
      });

      // EXPERIMENTAL: Show rectangle shapes
      // nodeElements
      //   .merge(nodeElements)
      //   .selectAll('rect')
      //   .attr('stroke', d => d.strokeColor)
      //   .attr('stroke-width', d => d.strokeWidth)
      //   .style('opacity', d => d.shape === 'rectangle' ? 1 : 0);

      // TELL D3 what to do when a data node goes away
      nodeElements.exit().remove();

      // NOW TELL D3 HOW TO HANDLE NEW EDGE DATA
      // .insert will add an svg `line` before the objects classed `.node`
      // .enter() sets the initial state of links as they are created
      linkElements.enter().insert('line', '.node').classed('edge', true).style('stroke', function (e) {
        return e.color;
      }).style('stroke-width', function (e) {
        return e.width;
      }).style('stroke-linecap', 'round')
      // Edge selection disabled.
      // .on("click",   (d) => {
      //   if (DBG) console.log('clicked on',d.label,d.id)
      //   this.edgeClickFn( d )
      // })
      .style('opacity', function (e) {
        return e.opacity;
      });

      // .merge() updates the visuals whenever the data is updated.
      linkElements.merge(linkElements)
      // .classed("selected", e => e.selected) // is this used?
      .style('stroke', function (e) {
        return e.color;
      }).style('stroke-width', function (e) {
        return e.width;
      }).style('stroke-linecap', 'round').transition().duration(500).style('opacity', function (e) {
        return e.opacity;
      });

      linkElements.exit().remove();

      // UPDATE ANIMATED SIMULATION
      // this is a plugin
      this.simulation.nodes(this.data.nodes);
      if (this.data.edges) {
        this.simulation.force('link').links(this.data.edges);
      }

      // SELECTION ARROW
      this.d3svg.selectAll('#selectorArrow').remove();
      this.d3svg.selectAll('#secondarySelectorArrow').remove();

      // SINGLE ARROW APPROACH
      // nodeElements
      //   .merge(nodeElements)
      //   .filter(d => d.selected)
      //   .append('g')
      //   .attr('id', 'selectorArrow')
      //   .attr('transform', d => `translate(${- d.size - 5},0)`)
      //   .append('polygon')
      //   .attr('points', '0,0 -10,5 -10,-5 ')
      //   .attr('fill', 'red')
      //   .append('animateTransform')
      //   .attr('attributeName', 'transform')
      //   .attr('attributeType', 'XML')
      //   .attr('type', 'rotate')
      //   .attr('from', d => `0 ${d.size + 5} 0`)
      //   .attr('to', d => `360 ${d.size + 5} 0`)
      //   .attr('dur', '2s')
      //   .attr('repeatCount', 'indefinite')

      // MULTIPLE ARROW APPROACH
      this.selectorArrows = nodeElements.merge(nodeElements).filter(function (d) {
        return d.selected;
      }).append('g').attr('id', 'selectorArrow').attr('transform', function (d) {
        return 'translate(' + (-d.size - 5) + ',0)';
      });
      this.selectorArrows.append('polygon').attr('points', '0,0 -10,5 -10,-5 ').attr('fill', function (d) {
        return d.strokeColor;
      }).append('animateTransform').attr('attributeName', 'transform').attr('attributeType', 'XML').attr('type', 'rotate').attr('from', function (d) {
        return '0 ' + (d.size + 5) + ' 0';
      }).attr('to', function (d) {
        return '360 ' + (d.size + 5) + ' 0';
      }).attr('dur', '6s').attr('repeatCount', 'indefinite');
      this.selectorArrows.append('polygon').attr('transform', function (d) {
        return 'translate(' + (d.size + 5) + ',0)';
      }).attr('points', '0,0 -10,5 -10,-5 ').attr('fill', function (d) {
        return d.strokeColor;
      }).append('animateTransform').attr('attributeName', 'transform').attr('attributeType', 'XML').attr('type', 'rotate').attr('from', function (d) {
        return '120 ' + (d.size + 5) + ' 0';
      }) // different rotation start
      .attr('to', function (d) {
        return '480 ' + (d.size + 5) + ' 0';
      }) // different rotation end
      .attr('dur', '6s').attr('repeatCount', 'indefinite');
      this.selectorArrows.append('polygon').attr('transform', function (d) {
        return 'translate(' + (d.size + 5) + ',0)';
      }).attr('points', '0,0 -10,5 -10,-5 ').attr('fill', function (d) {
        return d.strokeColor;
      }).append('animateTransform').attr('attributeName', 'transform').attr('attributeType', 'XML').attr('type', 'rotate').attr('from', function (d) {
        return '240 ' + (d.size + 5) + ' 0';
      }) // different rotation start
      .attr('to', function (d) {
        return '600 ' + (d.size + 5) + ' 0';
      }) // different rotation end
      .attr('dur', '6s').attr('repeatCount', 'indefinite');

      // SECONDARY SELECTOR ARROW
      nodeElements.merge(nodeElements).filter(function (d) {
        return d.selectedSecondary;
      }).append('g').attr('id', 'secondarySelectorArrow').attr('transform', function (d) {
        return 'translate(' + (-d.size - 5) + ',0)';
      }).append('polygon').attr('points', '0,0 -10,5 -10,-5 ').attr('fill', 'blue')
      // .attr('fill', d => d.strokeColor)
      .append('animateTransform').attr('attributeName', 'transform').attr('attributeType', 'XML').attr('type', 'rotate').attr('from', function (d) {
        return '0 ' + (d.size + 5) + ' 0';
      }).attr('to', function (d) {
        return '360 ' + (d.size + 5) + ' 0';
      }).attr('dur', '2s').attr('repeatCount', 'indefinite');
    }

    /// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    /** Apply new force properties
        Call this on construct and if forceProperties have changed.
     */

  }, {
    key: 'm_UpdateForces',
    value: function m_UpdateForces() {
      this.simulation.force('link', d3.forceLink().id(function (d) {
        return d.id;
      }) // note `d` is an edge, not a node
      // all edges use the same link distance, charge is what pushes them apart
      .distance(M_FORCEPROPERTIES.link.distance).iterations(M_FORCEPROPERTIES.link.iterations)).force('charge', d3.forceManyBody()
      // the larger the node, the harder it pushes
      .strength(function (d) {
        return d.size * M_FORCEPROPERTIES.charge.strength * M_FORCEPROPERTIES.charge.enabled;
      }).distanceMin(M_FORCEPROPERTIES.charge.distanceMin).distanceMax(M_FORCEPROPERTIES.charge.distanceMax)).force('collide', d3.forceCollide().strength(M_FORCEPROPERTIES.collide.strength * M_FORCEPROPERTIES.collide.enabled)
      // node radius (defaultSize+degrees) + preset radius keeps nodes separated
      // from each other like bouncing balls
      .radius(function (d) {
        return d.size + M_FORCEPROPERTIES.collide.radius;
      }).iterations(M_FORCEPROPERTIES.collide.iterations)).force('center', d3.forceCenter().x(m_width * M_FORCEPROPERTIES.center.x).y(m_height * M_FORCEPROPERTIES.center.y)).force('forceX', d3.forceX().strength(M_FORCEPROPERTIES.forceX.strength * M_FORCEPROPERTIES.forceX.enabled).x(m_width * M_FORCEPROPERTIES.forceX.x)).force('forceY', d3.forceY().strength(M_FORCEPROPERTIES.forceY.strength * M_FORCEPROPERTIES.forceY.enabled).y(m_height * M_FORCEPROPERTIES.forceY.y));
    }
    /// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    /** Update the display positions after each simulation tick
       This tick method is called repeatedly until the layout stabilizes.
       NOTE: the order in which we update nodes and links does NOT determine which
      gets drawn first -- the drawing order is determined by the ordering in the
      DOM.  See the notes under link_update.enter() above for one technique for
      setting the ordering in the DOM.
     */

  }, {
    key: 'm_Tick',
    value: function m_Tick() {
      // Drawing the nodes: Update the location of each node group element
      // from the x, y fields of the corresponding node object.
      this.zoomWrapper.selectAll('.node').attr('transform', function (d) {
        return 'translate(' + d.x + ',' + d.y + ')';
      });

      // Drawing the links: Update the start and end points of each line element
      // from the x, y fields of the corresponding source and target node objects.
      this.zoomWrapper.selectAll('.edge').attr('x1', function (d) {
        return d.source.x;
      }).attr('y1', function (d) {
        return d.source.y;
      }).attr('x2', function (d) {
        return d.target.x;
      }).attr('y2', function (d) {
        return d.target.y;
      });
    }

    /// UI EVENT HANDLERS /////////////////////////////////////////////////////////
    /// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  }, {
    key: 'ZoomReset',
    value: function ZoomReset(data) {
      if (DBG) console.log(PR, 'ZOOM_RESET got state NCDATA', data);
      // NOTE: The transition/duration call means _HandleZoom will be called multiple times
      this.d3svg.transition().duration(200).call(this.zoom.scaleTo, 1);
    }
  }, {
    key: 'ZoomIn',
    value: function ZoomIn(data) {
      if (DBG) console.log(PR, 'ZOOM_IN got state NCDATA', data);
      this.m_Transition(1.2);
    }
  }, {
    key: 'ZoomOut',
    value: function ZoomOut(data) {
      if (DBG) console.log(PR, 'ZOOM_OUT got state NCDATA', data);
      this.m_Transition(0.8);
    }

    // Pan to 0,0 and zoom scale to 1
    // (Currently not used)

  }, {
    key: 'ZoomPanReset',
    value: function ZoomPanReset(data) {
      if (DBG) console.log(PR, 'ZOOM_PAN_RESET got state NCDATA', data);
      var transform = d3.zoomIdentity.translate(0, 0).scale(1);
      this.d3svg.call(this.zoom.transform, transform);
    }

    /** This primarily handles mousewheel zooms
     */

  }, {
    key: 'm_HandleZoom',
    value: function m_HandleZoom() {
      if (DBG) console.log(PR, 'HandleZoom');
      d3.select('.zoomer').attr('transform', d3.event.transform);
    }
    /** This handles zoom button zooms.
     */

  }, {
    key: 'm_Transition',
    value: function m_Transition(zoomLevel) {
      if (DBG) console.log(PR, 'Transition');
      this.d3svg.transition()
      //.delay(100)
      .duration(200).call(this.zoom.scaleBy, zoomLevel);
    }

    /// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    /**
     */

  }, {
    key: 'm_Dragstarted',
    value: function m_Dragstarted(d, self) {
      if (DBG) console.log(PR, 'Dragstarted', d.x, d.y);
      // if (!d3.event.active) self.simulation.alphaTarget(0.3).restart(); // orig value results in a lot of movement after selection
      if (!d3.event.active) self.simulation.alphaTarget(0.01).restart(); // minimize shift after selection
      d.fx = d.x;
      d.fy = d.y;
    }
    /// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    /**
     */

  }, {
    key: 'm_Dragged',
    value: function m_Dragged(d) {
      if (DBG) console.log(PR, 'Dragged');
      d.fx = d3.event.x;
      d.fy = d3.event.y;
    }
    /// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    /**
     */

  }, {
    key: 'm_Dragended',
    value: function m_Dragended(d, self) {
      if (DBG) console.log(PR, 'Dragended');
      if (!d3.event.active) self.simulation.alphaTarget(0.0001);
      d.fx = null;
      d.fy = null;
    }
    // update window size-related forces
    // d3.select(window).on("resize", (){ =>
    //     width = +svg.node().getBoundingClientRect().width;
    //     height = +svg.node().getBoundingClientRect().height;
    //     updateForces();
    // });

  }]);

  return NCGraphRenderer;
}(); // class NCGraphRenderer

/// EXPORT MODULE /////////////////////////////////////////////////////////////
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -


module.exports = NCGraphRenderer;
/* Exports should be

Deregister,
ClearSVG,
SetData,
UpdateGraph,
ZoomReset
ZoomIn
ZoomOut
ZoomPanReset

*/
});

;require.register("view/netcreate/components/NCHelpPanel.jsx", function(exports, require, module) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }(); /* eslint-disable react/no-unescaped-entities */
/*//////////////////////////////// ABOUT \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\*\

  ## OVERVIEW

    Vocabulary displays a list of common terms

\*\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ * //////////////////////////////////////*/

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _client = require('unisys/client');

var _client2 = _interopRequireDefault(_client);

var _NCHelpVocabulary = require('./NCHelpVocabulary');

var _NCHelpVocabulary2 = _interopRequireDefault(_NCHelpVocabulary);

var _NCHelpText = require('./NCHelpText');

var _NCHelpText2 = _interopRequireDefault(_NCHelpText);

var _URPopover = require('./URPopover');

var _URPopover2 = _interopRequireDefault(_URPopover);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/// CONSTANTS & DECLARATIONS //////////////////////////////////////////////////
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/// Initialize UNISYS DATA LINK for react component
var UDATAOwner = { name: 'NCHelpPanel' };
var UDATA = _client2.default.NewDataLink(UDATAOwner);
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
var DBG = false;
var VIEWS = {
  help: 'Help',
  vocabulary: 'Vocabulary'
};

/// REACT COMPONENT ///////////////////////////////////////////////////////////
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/// export a class object for consumption by brunch/require
function NCHelpPanel() {
  var _useState = (0, _react.useState)(false),
      _useState2 = _slicedToArray(_useState, 2),
      isOpen = _useState2[0],
      setIsOpen = _useState2[1];

  var _useState3 = (0, _react.useState)('help'),
      _useState4 = _slicedToArray(_useState3, 2),
      openTab = _useState4[0],
      setOpenTab = _useState4[1];

  (0, _react.useEffect)(function () {
    UDATA.OnAppStateChange('PANELSTATE', evt_ToggleHelp);
    return function () {
      UDATA.AppStateChangeOff('PANELSTATE', evt_ToggleHelp);
    };
  }, []);

  /// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  function evt_ToggleHelp(PANELSTATE) {
    setIsOpen(PANELSTATE.helpIsOpen);
  }
  /// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  function ui_CloseHelp() {
    var PANELSTATE = UDATA.AppState('PANELSTATE');
    UDATA.SetAppState('PANELSTATE', _extends({}, PANELSTATE, { helpIsOpen: false }));
  }
  /// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  function ui_SelectTab(tab) {
    setOpenTab(tab);
  }

  // COMPONENT RENDER ////////////////////////////////////////////////////////
  /// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  var jsx = void 0;
  if (openTab === 'help') {
    jsx = _react2.default.createElement(_NCHelpText2.default, null);
  } else {
    jsx = _react2.default.createElement(_NCHelpVocabulary2.default, null);
  }

  if (!isOpen) return null;
  return _react2.default.createElement(
    _URPopover2.default,
    { title: '?', onClose: ui_CloseHelp },
    _react2.default.createElement(
      'div',
      { id: 'NCTabPanel' },
      _react2.default.createElement(
        'div',
        { className: 'tabs', role: 'tablist' },
        Object.keys(VIEWS).map(function (k) {
          return _react2.default.createElement(
            'button',
            {
              key: k,
              role: 'tab',
              className: openTab === k ? 'selected' : '',
              'aria-selected': openTab === k,
              'aria-controls': k,
              tabIndex: openTab === k ? '0' : '-1',
              onClick: function onClick() {
                return ui_SelectTab(k);
              }
            },
            VIEWS[k]
          );
        })
      ),
      _react2.default.createElement(
        'div',
        { className: 'tabpanels' },
        jsx
      )
    )
  );
}

/// EXPORT REACT COMPONENT ////////////////////////////////////////////////////
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
exports.default = NCHelpPanel;
});

require.register("view/netcreate/components/NCHelpText.jsx", function(exports, require, module) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/// CONSTANTS & DECLARATIONS //////////////////////////////////////////////////
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
var DBG = false;

/// REACT COMPONENT ///////////////////////////////////////////////////////////
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/// export a class object for consumption by brunch/require
/* eslint-disable react/no-unescaped-entities */
/*//////////////////////////////// ABOUT \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\*\

  ## OVERVIEW

    Help displays a hideable generic help screen.

\*\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ * //////////////////////////////////////*/

function NCHelpText() {
  return _react2.default.createElement(
    'div',
    { id: 'NCHelpText' },
    _react2.default.createElement(
      'h1',
      null,
      'Why Net.Create'
    ),
    _react2.default.createElement(
      'p',
      null,
      'In Net.Create, users can simultaneously do data entry on nodes and the edges between them.'
    ),
    _react2.default.createElement(
      'h1',
      null,
      'Navigation'
    ),
    _react2.default.createElement(
      'ul',
      null,
      _react2.default.createElement(
        'li',
        null,
        'Recenter the graph -- press the * button'
      ),
      _react2.default.createElement(
        'li',
        null,
        'Zoom --',
        _react2.default.createElement(
          'ul',
          null,
          _react2.default.createElement(
            'li',
            null,
            'on screen -- use the +/- buttons'
          ),
          _react2.default.createElement(
            'li',
            null,
            'mouse -- use mousewheel'
          ),
          _react2.default.createElement(
            'li',
            null,
            'trackpad -- two fingers up/down'
          ),
          _react2.default.createElement(
            'li',
            null,
            'tablet -- two fingers pinch'
          )
        )
      ),
      _react2.default.createElement(
        'li',
        null,
        'Pan -- drag empty space'
      )
    ),
    _react2.default.createElement(
      'h1',
      null,
      'Nodes'
    ),
    _react2.default.createElement(
      'ul',
      null,
      _react2.default.createElement(
        'li',
        null,
        'Select -- Click on a node, or start typing the node label in the Label field and select a node from the suggestions.\''
      )
    ),
    _react2.default.createElement(
      'h1',
      null,
      'Edges'
    ),
    _react2.default.createElement(
      'ul',
      null,
      _react2.default.createElement(
        'li',
        null,
        'Create -- To create an edge, first select the source node, then click "Add New Edge".'
      ),
      _react2.default.createElement(
        'li',
        null,
        'Select -- To select an edge, select either of the nodes it is attached to.'
      ),
      _react2.default.createElement(
        'li',
        null,
        'Editing -- To change the source or target of an existing edge, delete it and create a new one.'
      ),
      _react2.default.createElement(
        'li',
        null,
        'View Full List -- Click on "Show Edge Table" to view a table of all the edges. Click on a column header to sort the table by that parameter.'
      )
    ),
    _react2.default.createElement(
      'h1',
      null,
      'About Net.Create'
    ),
    _react2.default.createElement(
      'p',
      null,
      'Net.Create is funded through the',
      ' ',
      _react2.default.createElement(
        'a',
        {
          href: 'https://www.nsf.gov/pubs/policydocs/pappguide/nsf09_1/gpg_2.jsp#IID2',
          target: 'NSF'
        },
        'EAGER program'
      ),
      ' ',
      'at',
      ' ',
      _react2.default.createElement(
        'a',
        { href: 'https://www.nsf.gov/', target: 'NSF' },
        'NSF'
      ),
      ' ',
      'under award #',
      _react2.default.createElement(
        'a',
        {
          href: 'https://www.nsf.gov/awardsearch/showAward?AWD_ID=1848655',
          target: 'NSF'
        },
        '1848655'
      ),
      '.',
      ' ',
      _react2.default.createElement(
        'a',
        { href: 'http://www.kalanicraig.com', target: 'Craig' },
        'Kalani Craig'
      ),
      ' ',
      'is the PI, with Co-PIs',
      ' ',
      _react2.default.createElement(
        'a',
        { href: 'http://www.joshuadanish.com', target: 'Danish' },
        'Joshua Danish'
      ),
      ' ',
      'and',
      ' ',
      _react2.default.createElement(
        'a',
        {
          href: 'https://education.indiana.edu/about/directory/profiles/hmelo-silver-cindy.html',
          target: 'Hmelo-Silver'
        },
        'Cindy Hmelo-Silver'
      ),
      '. Software development provided by',
      ' ',
      _react2.default.createElement(
        'a',
        { href: 'http://inquirium.net', target: 'Inquirium' },
        'Inquirium'
      ),
      '. For more information, see',
      ' ',
      _react2.default.createElement(
        'a',
        { href: 'http://netcreate.org', target: 'NetCreateOrg' },
        'Net.Create.org'
      )
    )
  );
} // class Help

/// EXPORT REACT COMPONENT ////////////////////////////////////////////////////
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
exports.default = NCHelpText;
});

require.register("view/netcreate/components/NCHelpVocabulary.jsx", function(exports, require, module) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/// CONSTANTS & DECLARATIONS //////////////////////////////////////////////////
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
var DBG = false;

/// REACT COMPONENT ///////////////////////////////////////////////////////////
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/// export a class object for consumption by brunch/require
/* eslint-disable react/no-unescaped-entities */
/*//////////////////////////////// ABOUT \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\*\

  ## OVERVIEW

    Vocabulary displays a list of common terms

\*\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ * //////////////////////////////////////*/

function NCVocabulary() {
  /// COMPONENT RENDER ////////////////////////////////////////////////////////
  /// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  return _react2.default.createElement(
    'div',
    { id: 'NCVocabulary' },
    _react2.default.createElement(
      'dl',
      null,
      _react2.default.createElement(
        'dt',
        null,
        'Network'
      ),
      _react2.default.createElement(
        'dd',
        null,
        'This is a collection of nodes and the edges between them. '
      ),
      _react2.default.createElement(
        'dt',
        null,
        'Graph'
      ),
      _react2.default.createElement(
        'dd',
        null,
        'a graphic representation of a network and its components.',
        ' ',
        _react2.default.createElement(
          'em',
          null,
          _react2.default.createElement(
            'strong',
            null,
            'Similar terms include:'
          ),
          ' sociogram, visualization'
        )
      ),
      _react2.default.createElement(
        'dt',
        null,
        'Node'
      ),
      _react2.default.createElement(
        'dd',
        null,
        'The thing or ',
        _react2.default.createElement(
          'em',
          null,
          'entity'
        ),
        ' (shown as circles) that is connected through relationships. This could be individual people, groups of people, institutions (like churches, organizations, schools). One way of thinking about this is that nodes are nouns and edges are verbs - nodes are things that are connected through edges.',
        ' ',
        _react2.default.createElement(
          'em',
          null,
          _react2.default.createElement(
            'strong',
            null,
            'Similar terms include:'
          ),
          ' actor, vertex'
        )
      ),
      _react2.default.createElement(
        'ul',
        null,
        _react2.default.createElement(
          'dl',
          null,
          _react2.default.createElement(
            'dt',
            null,
            'Ego'
          ),
          _react2.default.createElement(
            'dd',
            null,
            'This refers to the node you are focused on at the moment and the connections that they have.',
            ' '
          )
        )
      ),
      _react2.default.createElement(
        'dt',
        null,
        'Edge'
      ),
      _react2.default.createElement(
        'dd',
        null,
        'The relationships between nodes you are considering (shown as lines). Relationships can take on many forms: nodes could be connected through somewhat intangible relationships, such as friendship or not liking one another. Edges can be based on interactions, such as talking to one another or being in conflict. They could also be defined by sharing resources, such as money or information.',
        ' ',
        _react2.default.createElement(
          'em',
          null,
          _react2.default.createElement(
            'strong',
            null,
            'Similar terms include:'
          ),
          ' line, tie, arc'
        )
      ),
      _react2.default.createElement(
        'ul',
        null,
        _react2.default.createElement(
          'dl',
          null,
          _react2.default.createElement(
            'dt',
            null,
            'Edge weight'
          ),
          _react2.default.createElement(
            'dd',
            null,
            'Edges can have a value attached to them. So, for instance, an node could sent $10,000 to another actor. Or, they could share three interactions of the same type with one another. This value is referred to as a weight.',
            ' ',
            _react2.default.createElement(
              'em',
              null,
              _react2.default.createElement(
                'strong',
                null,
                'Similar terms include:'
              ),
              ' value'
            )
          ),
          _react2.default.createElement(
            'dt',
            null,
            'Directed or undirected edges'
          ),
          _react2.default.createElement(
            'dd',
            null,
            'Edges can either be directed or undirected. If a relationship is directed, it is being sent from (originating from) one node to another node. Node A may say they are friends with Node B, but Node B does not say Node A does this. Or Node A gives Node B something, such as resources, information, or an illness. However, in some cases, edges are defined as undirected. Two people who share a meal together or are married are both engaged share an undirected edge.',
            ' ',
            _react2.default.createElement(
              'em',
              null,
              'Note: in some academic literatures, the term "edge" is reserved for an undirected relationship, while the term "arc" is used to refer to directed ties.'
            )
          )
        )
      ),
      _react2.default.createElement(
        'dt',
        null,
        'Attributes'
      ),
      _react2.default.createElement(
        'dd',
        null,
        'Characteristics of the nodes or edges. A node could be designated by gender, for instance or the amount of wealth they possess. They could also be characteristics you find from the network itself - such as how many ties an node has (degree centrality).',
        ' '
      ),
      _react2.default.createElement(
        'dt',
        null,
        'Centrality'
      ),
      _react2.default.createElement(
        'dd',
        null,
        'This is a way of ranking the importance of individuals within a network. There are many different ways to measure importance, such as degree centrality, betweenness centrality, and eigenvector centrality.',
        ' '
      ),
      _react2.default.createElement(
        'ul',
        null,
        ' ',
        _react2.default.createElement(
          'dl',
          null,
          _react2.default.createElement(
            'dt',
            null,
            'Degree Centrality'
          ),
          _react2.default.createElement(
            'dd',
            null,
            'Degree centrality is a measure of how many connections a node has. An node with many ties that are being sent to them has a high in-degree centrality. In a friendship network, this can be easily recognized as popularity. Nodes sending many outgoing ties (high out-degree centrality) may be thought of as expansive in their relationship.'
          ),
          _react2.default.createElement(
            'dt',
            null,
            'Betweenness Centrality'
          ),
          _react2.default.createElement(
            'dd',
            null,
            'Nodes with high betweenness centrality serve as connectors between other individuals who wouldn\'t otherwise be directly connected. They may not be connected to a large number of people (that would be high degree centrality), but they are unique in their connections. If an actor with high betweenness centrality was removed from a network, the network would be more fragmented and less connected. Often researchers are interested in finding actors with high betweenness centrality because they can control whatever flows in the networks. For instance, military analysts often look for nodes with high betweenness in a terrorist network.'
          ),
          _react2.default.createElement(
            'dt',
            null,
            'Eigenvector Centrality'
          ),
          _react2.default.createElement(
            'dd',
            null,
            'Eigenvector centrality ranks actors based on their connection to other highly central nodes. So, a nodes importance as measured by eigenvector centrality are dependent on the other nodes with whom they share connections. Google\'s PageRank algorithm was a famous application of a version of this type of centrality, and allowed them to return highly relevant results in search for users.'
          )
        )
      ),
      _react2.default.createElement(
        'dt',
        null,
        'Communities'
      ),
      _react2.default.createElement(
        'dd',
        null,
        'A community in a network is a way of thinking about grouping, often by finding densely connected sets of nodes. A community within a network that is tightly connected to one another but not to an outside group might be seen as a faction, such as rival political groups. In this case, nodes with high betweenness centrality in a network with multiple factions might be some of the only points of contact between rival groups - a potentially powerful but also difficult position to be in.'
      )
    )
  );
}

/// EXPORT REACT COMPONENT ////////////////////////////////////////////////////
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
exports.default = NCVocabulary;
});

require.register("view/netcreate/components/NCImportExport.jsx", function(exports, require, module) {
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/*//////////////////////////////// ABOUT \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\*\

  ## OVERVIEW

  Provides tools to import and export node/edge data files.

  This also provides a "Force Unlock All" button that can be used by Admins
  to unlock all edit locks requested by node editors, edge editors, template
  editors, and importers on the network.

  This displays a subpanel on the "More..." tab.


  ## PRIVILEGES

  There are two levels of privileges for this panel:
  - Admins
  - Logged in users with "allowLoggedInUserToImport" set to true

  Only admins are allowed to
  - import data (nodes/edges)
  - export templates
  - import templates
  This is set via an `isAdmin` prop.

  Logged in users with "allowLoggedInUserToImport" set to true are allowed to
  - import data (nodes/edges)


  ## USAGE

    <NCImportExport isAdmin={isAdmin} />


  `importexport-mgr.js` (IMPORTEXPORT) handles all of the business logic for
  importing and exporting.  See that file for details.

\*\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ * //////////////////////////////////////*/

var React = require('react');
var SETTINGS = require('settings');
var NetMessage = require('unisys/common-netmessage-class');

var UNISYS = require('unisys/client');
var DATASTORE = require('system/datastore');

var _require = require('system/util/enum'),
    EDITORTYPE = _require.EDITORTYPE;

var IMPORTEXPORT = require('../importexport-mgr');

/// CONSTANTS & DECLARATIONS //////////////////////////////////////////////////
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
var DBG = false;
var PR = 'ImportExport';
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
var NODEFILESTATUS_DEFAULT = 'Select a node .csv file to import';
var EDGEFILESTATUS_DEFAULT = 'Select an edge .csv file to import';
var IMPORTTYPE = {
  MERGE: 'merge',
  REPLACE: 'replace'
};

/// REACT COMPONENT ///////////////////////////////////////////////////////////
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/// export a class object for consumption by brunch/require

var NCImportExport = function (_UNISYS$Component) {
  _inherits(NCImportExport, _UNISYS$Component);

  function NCImportExport(props) {
    _classCallCheck(this, NCImportExport);

    var _this = _possibleConstructorReturn(this, (NCImportExport.__proto__ || Object.getPrototypeOf(NCImportExport)).call(this, props));

    var TEMPLATE = _this.AppState('TEMPLATE');
    _this.state = {
      isExpanded: true,
      preventImport: false, // an external source has disabled import for us
      importIsActive: false, // internal source: keeps track of whether THIS panel has valid import files selected
      nodefileStatus: NODEFILESTATUS_DEFAULT,
      nodeValidationMsgs: undefined,
      nodeOkToImport: false,
      edgefileStatus: EDGEFILESTATUS_DEFAULT,
      edgeValidationMsgs: undefined,
      edgeOkToImport: false,
      okToImport: false,
      importMsgs: undefined,
      allowLoggedInUserToImport: TEMPLATE.allowLoggedInUserToImport
    };
    _this.checkUnload = _this.checkUnload.bind(_this);
    _this.doUnload = _this.doUnload.bind(_this);
    _this.urstate_LOCKSTATE = _this.urstate_LOCKSTATE.bind(_this);
    _this.updateEditState = _this.updateEditState.bind(_this);
    _this.onNodesExportSelect = _this.onNodesExportSelect.bind(_this);
    _this.onEdgesExportSelect = _this.onEdgesExportSelect.bind(_this);
    _this.onNodeImportFileSelect = _this.onNodeImportFileSelect.bind(_this);
    _this.onEdgeImportFileSelect = _this.onEdgeImportFileSelect.bind(_this);
    _this.clearNodefileSelect = _this.clearNodefileSelect.bind(_this);
    _this.clearEdgefileSelect = _this.clearEdgefileSelect.bind(_this);
    _this.clearFileSelect = _this.clearFileSelect.bind(_this);
    _this.onDoImport = _this.onDoImport.bind(_this);
    _this.unlockAll = _this.unlockAll.bind(_this);

    _this.OnAppStateChange('LOCKSTATE', _this.urstate_LOCKSTATE);
    return _this;
  } // constructor

  _createClass(NCImportExport, [{
    key: 'componentDidMount',
    value: function componentDidMount() {
      this.updateEditState();
      window.addEventListener('beforeunload', this.checkUnload);
      window.addEventListener('unload', this.doUnload);
    }
  }, {
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      this.NetSend('SRV_RELEASE_EDIT_LOCK', { editor: EDITORTYPE.IMPORTER });
      this.AppStateChangeOff('LOCKSTATE', this.urstate_LOCKSTATE);
      window.removeEventListener('beforeunload', this.checkUnload);
      window.removeEventListener('unload', this.doUnload);
    }
  }, {
    key: 'checkUnload',
    value: function checkUnload(e) {
      e.preventDefault();
      if (this.state.importIsActive) {
        (e || window.event).returnValue = null;
      } else {
        Reflect.deleteProperty(e, 'returnValue');
      }
      return e;
    }
  }, {
    key: 'doUnload',
    value: function doUnload(e) {
      if (this.state.importIsActive) {
        this.NetSignal('SRV_RELEASE_EDIT_LOCK', { editor: EDITORTYPE.IMPORTER });
      }
    }

    /// UI EVENT HANDLERS /////////////////////////////////////////////////////////
    /// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  }, {
    key: 'urstate_LOCKSTATE',
    value: function urstate_LOCKSTATE(LOCKSTATE) {
      var importIsActive = this.state.importIsActive;

      if (!importIsActive) {
        var preventImport = LOCKSTATE.templateBeingEdited || LOCKSTATE.importActive || LOCKSTATE.nodeOrEdgeBeingEdited || UNISYS.IsStandaloneMode();
        this.setState({ preventImport: preventImport });
      }
    }
  }, {
    key: 'updateEditState',
    value: function updateEditState() {
      var _this2 = this;

      // disable edit if someone else is editing a template, node, or edge
      this.urstate_LOCKSTATE(this.AppState('LOCKSTATE'));
      // REVIEW: Reduce setState calls?
      DATASTORE.PromiseCalculateMaxNodeId().then(function (data) {
        _this2.setState({ nextNodeId: data + 1 });
      });
      DATASTORE.PromiseCalculateMaxEdgeId().then(function (data) {
        _this2.setState({ nextEdgeId: data + 1 });
      });
    }
  }, {
    key: 'onNodesExportSelect',
    value: function onNodesExportSelect() {
      IMPORTEXPORT.ExportNodes();
    }
  }, {
    key: 'onEdgesExportSelect',
    value: function onEdgesExportSelect() {
      IMPORTEXPORT.ExportEdges();
    }
  }, {
    key: 'onNodeImportFileSelect',
    value: function onNodeImportFileSelect(e) {
      var _this3 = this;

      var nodefile = e.target.files[0];
      IMPORTEXPORT.NodefileValidate({ nodefile: nodefile }).then(function (result) {
        var msg = React.createElement(
          'div',
          null,
          React.createElement(
            'div',
            null,
            result.messageTitle
          ),
          result.messageJsx
        );
        // if edge file was already okToImport, then this remains OK.
        var okToImport = _this3.state.edgeOkToImport || result.isValid;
        _this3.setState({
          nodeOkToImport: result.isValid,
          okToImport: okToImport,
          nodefileStatus: result.isValid ? 'Ready to Import' : NODEFILESTATUS_DEFAULT,
          nodeValidationMsgs: msg,
          importMsgs: undefined
        });
        // Clear "Choose File"
        if (!result.isValid) document.getElementById('nodefileInput').value = '';
      });
    }
  }, {
    key: 'onEdgeImportFileSelect',
    value: function onEdgeImportFileSelect(e) {
      var _this4 = this;

      var edgefile = e.target.files[0];
      IMPORTEXPORT.EdgefileValidate({ edgefile: edgefile }).then(function (result) {
        var msg = React.createElement(
          'div',
          null,
          React.createElement(
            'div',
            null,
            result.messageTitle
          ),
          result.messageJsx
        );
        // if edge file was already okToImport, then this remains OK.
        var okToImport = _this4.state.nodeOkToImport || result.isValid;
        _this4.setState({
          edgeOkToImport: result.isValid,
          okToImport: okToImport,
          edgefileStatus: result.isValid ? 'Ready to Import' : EDGEFILESTATUS_DEFAULT,
          edgeValidationMsgs: msg,
          importMsgs: undefined
        });
        // Clear "Choose File"
        if (!result.isValid) document.getElementById('edgefileInput').value = '';
      });
    }
  }, {
    key: 'clearNodefileSelect',
    value: function clearNodefileSelect() {
      // User Cancelled, reset to default
      // If edge import is active, then import remains active
      var importIsActive = this.state.importIsActive || false;
      this.setState({
        importIsActive: importIsActive,
        nodefile: undefined,
        nodefileStatus: NODEFILESTATUS_DEFAULT,
        nodeValidationMsgs: undefined
      });
      // Clear validated data so it doesn't get imported
      if (!importIsActive) this.NetSend('SRV_RELEASE_EDIT_LOCK', { editor: EDITORTYPE.IMPORTER });
      IMPORTEXPORT.ResetNodeImportData();
    }
  }, {
    key: 'clearEdgefileSelect',
    value: function clearEdgefileSelect() {
      // User Cancelled, reset to default
      // If node import is active, then import remains active
      var importIsActive = this.state.importIsActive || false;
      this.setState({
        importIsActive: importIsActive,
        edgefile: undefined,
        edgefileStatus: EDGEFILESTATUS_DEFAULT,
        edgeValidationMsgs: undefined
      });
      // Clear validated data so it doesn't get imported
      if (!importIsActive) this.NetSend('SRV_RELEASE_EDIT_LOCK', { editor: EDITORTYPE.IMPORTER });
      IMPORTEXPORT.ResetEdgeImportData();
    }
  }, {
    key: 'clearFileSelect',
    value: function clearFileSelect() {
      // User Cancelled, reset to default
      this.NetSend('SRV_RELEASE_EDIT_LOCK', { editor: EDITORTYPE.IMPORTER });
      document.getElementById('nodefileInput').value = '';
      document.getElementById('edgefileInput').value = '';
      this.clearNodefileSelect();
      this.clearEdgefileSelect();

      IMPORTEXPORT.ResetImportData();
      this.setState({
        nodeValidationMsgs: undefined,
        edgeValidationMsgs: undefined,
        importMsgs: undefined
      });
    }
  }, {
    key: 'onDoImport',
    value: function onDoImport() {
      var _this5 = this;

      if (DBG) console.log(PR, 'onDoImport');
      var replace = document.getElementById('import-replace').checked;
      IMPORTEXPORT.Import(replace).then(function (result) {
        _this5.setState({
          okToImport: false, // imported, so hide "Import" button
          nodeOkToImport: false,
          edgeOkToImport: false,
          importMsgs: result.messageJsx || 'OK',
          nodeValidationMsgs: '',
          edgeValidationMsgs: '',
          nodefileStatus: NODEFILESTATUS_DEFAULT,
          edgefileStatus: EDGEFILESTATUS_DEFAULT
        });
        document.getElementById('nodefileInput').value = '';
        document.getElementById('edgefileInput').value = '';
      });
    }
  }, {
    key: 'unlockAll',
    value: function unlockAll() {
      this.NetCall('SRV_DBUNLOCKALL');
    }

    /// REACT LIFECYCLE METHODS ///////////////////////////////////////////////////
    /// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  }, {
    key: 'render',
    value: function render() {
      var _this6 = this;

      var _state = this.state,
          preventImport = _state.preventImport,
          importIsActive = _state.importIsActive,
          nodefileStatus = _state.nodefileStatus,
          edgefileStatus = _state.edgefileStatus,
          importMsgs = _state.importMsgs,
          allowLoggedInUserToImport = _state.allowLoggedInUserToImport,
          nextNodeId = _state.nextNodeId,
          nextEdgeId = _state.nextEdgeId,
          nodeValidationMsgs = _state.nodeValidationMsgs,
          edgeValidationMsgs = _state.edgeValidationMsgs,
          okToImport = _state.okToImport;
      var isAdmin = this.props.isAdmin;

      // Set Import Permissions
      // -- Admins can always import
      // -- If allowLoggedInUserToImport, logged in users can also import

      var isLoggedIn = NetMessage.GlobalGroupID();
      var importDisabled = !(isAdmin || allowLoggedInUserToImport && isLoggedIn);
      var importBtnDisabled = !okToImport;

      var exportjsx = React.createElement(
        'div',
        { className: 'panel' },
        React.createElement(
          'h1',
          null,
          'Export Data'
        ),
        React.createElement(
          'p',
          { className: 'system' },
          'Export data in .csv format.'
        ),
        React.createElement(
          'div',
          { className: 'buttonbar' },
          React.createElement(
            'button',
            { className: 'small', type: 'button', onClick: this.onNodesExportSelect },
            'Export Nodes'
          ),
          React.createElement(
            'button',
            { className: 'small', type: 'button', onClick: this.onEdgesExportSelect },
            'Export Edges'
          )
        )
      );

      var importjsx = void 0;
      if (preventImport && !importIsActive) {
        importjsx = React.createElement(
          'div',
          { className: 'panel' },
          React.createElement(
            'p',
            null,
            React.createElement(
              'i',
              null,
              'You cannot import data while someone is editing a node, edge, or template, or in standalone view.'
            )
          ),
          React.createElement(
            'p',
            null,
            React.createElement(
              'i',
              null,
              'Please finish editing and try again.'
            )
          )
        );
      } else {
        importjsx = React.createElement(
          'div',
          { className: 'panel', hidden: importDisabled },
          React.createElement(
            'h1',
            null,
            'Import Data'
          ),
          React.createElement(
            'p',
            { className: 'system' },
            'Import .csv data'
          ),
          React.createElement(
            'p',
            null,
            'To specify node and edge IDs in your import file, use the next unused ID:'
          ),
          React.createElement(
            'ul',
            null,
            React.createElement(
              'li',
              null,
              'Next unused NODE ID: ',
              nextNodeId
            ),
            React.createElement(
              'li',
              null,
              'Next unused EDGE ID: ',
              nextEdgeId
            )
          ),
          React.createElement(
            'p',
            null,
            ' '
          ),
          React.createElement(
            'h2',
            null,
            'Replace vs Merge'
          ),
          React.createElement(
            'fieldset',
            null,
            React.createElement(
              'label',
              null,
              React.createElement('input', {
                id: 'import-replace',
                type: 'radio',
                name: 'importtype',
                value: IMPORTTYPE.REPLACE,
                defaultChecked: true
              }),
              'Replace'
            ),
            React.createElement(
              'div',
              null,
              React.createElement(
                'p',
                null,
                ' ',
                React.createElement(
                  'b',
                  null,
                  'Replace'
                ),
                ' existing nodes and edges. Use this to ',
                React.createElement(
                  'b',
                  null,
                  'load'
                ),
                ' a new project'
              ),
              React.createElement(
                'ul',
                null,
                React.createElement(
                  'li',
                  null,
                  'Existing objects will be removed'
                )
              )
            ),
            React.createElement(
              'label',
              null,
              React.createElement('input', {
                id: 'import-merge',
                type: 'radio',
                name: 'importtype',
                value: IMPORTTYPE.MERGE
              }),
              'Merge'
            ),
            React.createElement(
              'div',
              null,
              React.createElement(
                'p',
                null,
                React.createElement(
                  'b',
                  null,
                  'Merge'
                ),
                ' the new nodes and edges into the existing nodes and edges. Use this to add additional data to an existing project.'
              ),
              React.createElement(
                'ul',
                null,
                React.createElement(
                  'li',
                  null,
                  'Imported nodes/edges with matching ids will replace existing objects'
                ),
                React.createElement(
                  'li',
                  null,
                  'Existing objects that do not match imported nodes/edges will not be modified or removed'
                )
              )
            )
          ),
          React.createElement('p', null),
          React.createElement(
            'h2',
            null,
            'Nodes'
          ),
          React.createElement(
            'div',
            { className: 'file-import' },
            React.createElement('input', {
              type: 'file',
              accept: 'text/csv',
              id: 'nodefileInput',
              onInput: this.onNodeImportFileSelect,
              onClick: function onClick(e) {
                // Clear the selected node file whenever "Choose File" is clicked so that if the user
                // cancels, the form is reset to a blank state.  This is necessary to clear out
                // validation errors after selecting a bad node file.
                _this6.clearNodefileSelect();
              }
            }),
            React.createElement(
              'label',
              { htmlFor: 'nodefileInput', className: 'system' },
              nodefileStatus
            )
          ),
          React.createElement(
            'h2',
            null,
            'Edges'
          ),
          React.createElement(
            'div',
            { className: 'file-import' },
            React.createElement('input', {
              type: 'file',
              accept: 'text/csv',
              id: 'edgefileInput',
              onInput: this.onEdgeImportFileSelect,
              onClick: function onClick(e) {
                // Clear the selected edge file whenever "Choose File" is clicked so that if the user
                // cancels, the form is reset to a blank state.  This is necessary to clear out
                // validation errors after selecting a bad edge file.
                _this6.clearEdgefileSelect();
              }
            }),
            React.createElement(
              'label',
              { htmlFor: 'edgefileInput', className: 'system' },
              edgefileStatus
            )
          ),
          okToImport && React.createElement(
            'div',
            { className: 'buttonbar importbuttons' },
            React.createElement(
              'button',
              {
                className: 'small ' + (importBtnDisabled ? '' : 'cat'),
                type: 'button',
                disabled: importBtnDisabled,
                onClick: this.onDoImport
              },
              'Import'
            ),
            React.createElement(
              'label',
              null,
              React.createElement(
                'button',
                {
                  className: 'small',
                  type: 'button',
                  onClick: this.clearFileSelect
                },
                'Clear File Selections'
              )
            )
          ),
          React.createElement(
            'fieldset',
            { className: 'validationMessages' },
            React.createElement(
              'legend',
              null,
              'Import Status'
            ),
            nodeValidationMsgs && React.createElement(
              'div',
              null,
              nodeValidationMsgs
            ),
            edgeValidationMsgs && React.createElement(
              'div',
              null,
              edgeValidationMsgs
            ),
            importMsgs && React.createElement(
              'div',
              null,
              importMsgs
            )
          )
        );
      }

      var unlockAlljsx = void 0;
      if (isAdmin) {
        unlockAlljsx = React.createElement(
          'div',
          { className: 'panel' },
          React.createElement(
            'h1',
            null,
            'Admin Tools'
          ),
          React.createElement(
            'p',
            null,
            'Unlock ALL Template, Import, Node, and Edge Editing.'
          ),
          React.createElement(
            'p',
            null,
            'When someone on the network is editing a template, importing data, or editing a node or edge, everyone else on the network is prevented from editing a template or importing data and editing nodes and edges.'
          ),
          React.createElement(
            'p',
            null,
            'ADMINS: Use this force the server to release the lock on editing if you know the lock was left on in error, e.g. you know that there is no one on the network actively editing a template, importing, editing a node or an edge.'
          ),
          React.createElement(
            'p',
            null,
            React.createElement(
              'b',
              null,
              'WARNING'
            ),
            ': Use this with utmost caution! If someone is actively editing or importing, you can delete their work, or even worse,',
            ' ',
            React.createElement(
              'b',
              null,
              'corrupt the database!'
            )
          ),
          React.createElement(
            'button',
            { className: 'small warning', type: 'button', onClick: this.unlockAll },
            'Force Unlock All'
          )
        );
      }

      return React.createElement(
        'div',
        { className: 'NCImportExport' },
        exportjsx,
        importjsx,
        unlockAlljsx
      );
    }
  }]);

  return NCImportExport;
}(UNISYS.Component); // class Help

/// EXPORT REACT COMPONENT ////////////////////////////////////////////////////
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -


module.exports = NCImportExport;
});

require.register("view/netcreate/components/NCInfoPanel.jsx", function(exports, require, module) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }(); /*//////////////////////////////// ABOUT \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\*\



nfoPanel shows a tab panel for selecting:
hiding (showing the Graph)
ilters
odes Table
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           * Edges Table

he panel itself can be resized vertically.




var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _client = require('unisys/client');

var _client2 = _interopRequireDefault(_client);

var _NCFiltersSummary = require('./NCFiltersSummary');

var _NCFiltersSummary2 = _interopRequireDefault(_NCFiltersSummary);

var _NCNodeTable = require('./NCNodeTable');

var _NCNodeTable2 = _interopRequireDefault(_NCNodeTable);

var _NCEdgeTable = require('./NCEdgeTable');

var _NCEdgeTable2 = _interopRequireDefault(_NCEdgeTable);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/// CONSTANTS & DECLARATIONS //////////////////////////////////////////////////
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/// Initialize UNISYS DATA LINK for react component
var UDATAOwner = { name: 'NCInfoPanel' };
var UDATA = _client2.default.NewDataLink(UDATAOwner);
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
var DBG = false;
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
var TABS = {
  GRAPH: { label: 'Graph', icon: 'images/icn_graph.svg' },
  NODESTABLE: { label: 'Nodes Table', icon: 'images/icn_attributes.svg' },
  EDGESTABLE: { label: 'Edges Table', icon: 'images/icn_edges.svg' }
};
var defaultClosedTabPanelHeight = 65; // show only tab buttons, no gap, max 2 lines
var defaultOpenTabPanelHeight = 350; // show tab buttons and table

/// REACT FUNCTIONAL COMPONENT ////////////////////////////////////////////////
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
function NCInfoPanel() {
  var _useState = (0, _react.useState)({
    activeTab: TABS.GRAPH.label,
    infoPanelTop: 0,
    tabpanelHeight: defaultClosedTabPanelHeight,
    prevNodeTableHeight: 0,
    prevEdgeTableHeight: 0,
    draggerIsHidden: true
  }),
      _useState2 = _slicedToArray(_useState, 2),
      state = _useState2[0],
      setState = _useState2[1];

  var ref_InfoPanel = (0, _react.useRef)(null);
  var ref_Dragger = (0, _react.useRef)(null);
  /// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  (0, _react.useEffect)(function () {
    if (ref_InfoPanel.current) {
      setState(function (prevState) {
        return _extends({}, prevState, {
          infoPanelTop: ref_InfoPanel.current.offsetTop
        });
      });
    }
  }, []);

  /// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  function evt_SelectTab(tabkey) {
    var tabpanelHeight = defaultClosedTabPanelHeight;
    var draggerIsHidden = true;

    if (tabkey === 'NODESTABLE') {
      tabpanelHeight = state.prevNodeTableHeight || defaultOpenTabPanelHeight;
      draggerIsHidden = false;
    } else if (tabkey === 'EDGESTABLE') {
      tabpanelHeight = state.prevEdgeTableHeight || defaultOpenTabPanelHeight;
      draggerIsHidden = false;
    }

    UpdateMaxTableHeight(TABS[tabkey].label);

    setState(function (prevState) {
      return _extends({}, prevState, {
        activeTab: TABS[tabkey].label,
        tabpanelHeight: tabpanelHeight,
        draggerIsHidden: draggerIsHidden
      });
    });
  }

  /// DRAGGER HANDLERS ////////////////////////////////////////////////////////
  /// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  /// Update max table height whenever the active tab changes
  function UpdateMaxTableHeight(activeTab) {
    var maxTableHeight = state.infoPanelTop + 80 + (activeTab === TABS.NODESTABLE.label ? document.querySelector('#NCNodeTable .URTable').offsetHeight : document.querySelector('#NCEdgeTable .URTable').offsetHeight);
    ref_Dragger.current = _extends({}, ref_Dragger.current, {
      maxTableHeight: maxTableHeight
    });
  }
  /// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  function ui_MouseDown(event) {
    event.preventDefault();
    event.stopPropagation();
    var draggerClickOffset = event.target.offsetTop - event.clientY;
    var maxTableHeight = state.infoPanelTop + draggerClickOffset + 80 + (state.activeTab === TABS.NODESTABLE.label ? document.querySelector('#NCNodeTable .URTable').offsetHeight : document.querySelector('#NCEdgeTable .URTable').offsetHeight);

    ref_Dragger.current = {
      startY: event.clientY,
      draggerTop: event.target.offsetTop,
      draggerClickOffset: draggerClickOffset,
      maxTableHeight: maxTableHeight
    };
    document.onmousemove = ui_MouseMove;
    document.onmouseup = ui_MouseUp;
  }
  /// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  function ui_MouseMove(event) {
    event.preventDefault();
    event.stopPropagation();
    if (ref_Dragger.current !== null) {
      var _ref_Dragger$current = ref_Dragger.current,
          startY = _ref_Dragger$current.startY,
          draggerTop = _ref_Dragger$current.draggerTop,
          draggerClickOffset = _ref_Dragger$current.draggerClickOffset,
          maxTableHeight = _ref_Dragger$current.maxTableHeight;

      var tabpanelHeight = Math.min(maxTableHeight, Math.max(120, // make sure one row is visible
      event.clientY - state.infoPanelTop - draggerClickOffset));
      var prevNodeTableHeight = state.prevNodeTableHeight,
          prevEdgeTableHeight = state.prevEdgeTableHeight;

      if (state.activeTab === TABS.NODESTABLE.label) {
        prevNodeTableHeight = tabpanelHeight;
      } else if (state.activeTab === TABS.EDGESTABLE.label) {
        prevEdgeTableHeight = tabpanelHeight;
      }
      setState(function (prevState) {
        return _extends({}, prevState, {
          tabpanelHeight: tabpanelHeight,
          prevNodeTableHeight: prevNodeTableHeight,
          prevEdgeTableHeight: prevEdgeTableHeight
        });
      });
    }
  }
  /// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  function ui_MouseUp() {
    ref_Dragger.current = null;
    document.onmouseup = null;
    document.onmousemove = null;
  }

  /// COMPONENT RENDER ////////////////////////////////////////////////////////
  /// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  /// NOTE: The `id=graph` tabpanel needs to be defined for wcag compliance
  ///       but it is hidden and not used.
  return _react2.default.createElement(
    'div',
    {
      id: 'InfoPanel',
      ref: ref_InfoPanel,
      style: state.activeTab === TABS.GRAPH.label ? {} : { height: state.tabpanelHeight + 'px' }
    },
    _react2.default.createElement(
      'div',
      { className: 'graphtitle' },
      _react2.default.createElement(
        'div',
        { className: 'tooltipAnchor' },
        'NETGRAPH for ',
        UDATA.AppState('TEMPLATE').name,
        '\xA0',
        _react2.default.createElement(
          'div',
          { className: 'badge' },
          'i'
        ),
        _react2.default.createElement(
          'span',
          { style: { fontSize: '12px' }, className: 'tooltiptext' },
          UDATA.AppState('TEMPLATE').description
        )
      )
    ),
    _react2.default.createElement(
      'div',
      { className: 'tabs', role: 'tablist' },
      Object.keys(TABS).map(function (k) {
        return _react2.default.createElement(
          'button',
          {
            key: k,
            id: k,
            className: state.activeTab === TABS[k].label ? 'selected' : '',
            onClick: function onClick() {
              return evt_SelectTab(k);
            },
            role: 'tab',
            type: 'button',
            'aria-selected': state.activeTab === TABS[k].label,
            'aria-controls': TABS[k].label
          },
          TABS[k].label,
          TABS[k].icon && _react2.default.createElement('img', { src: TABS[k].icon, role: 'presentation' })
        );
      })
    ),
    _react2.default.createElement(_NCFiltersSummary2.default, null),
    _react2.default.createElement(
      'div',
      { className: 'tabpanels' },
      _react2.default.createElement('section', { id: TABS.GRAPH.label, className: 'hidden', role: 'tabpanel' }),
      _react2.default.createElement(
        'section',
        {
          id: TABS.NODESTABLE.label,
          'aria-labelledby': 'NODESTABLE',
          role: 'tabpanel',
          className: state.activeTab !== TABS.NODESTABLE.label ? 'hidden' : ''
        },
        _react2.default.createElement(_NCNodeTable2.default, { isOpen: state.activeTab === TABS.NODESTABLE.label })
      ),
      _react2.default.createElement(
        'section',
        {
          id: TABS.EDGESTABLE.label,
          'aria-labelledby': 'EDGESTABLE',
          role: 'tabpanel',
          className: state.activeTab !== TABS.EDGESTABLE.label ? 'hidden' : ''
        },
        _react2.default.createElement(_NCEdgeTable2.default, { isOpen: state.activeTab === TABS.EDGESTABLE.label })
      )
    ),
    _react2.default.createElement(
      'div',
      { className: 'bottombar' },
      _react2.default.createElement('div', {
        id: 'dragger',
        hidden: state.draggerIsHidden,
        onMouseDown: ui_MouseDown
      })
    )
  );
}

/// EXPORT REACT COMPONENT ////////////////////////////////////////////////////
exports.default = NCInfoPanel;
});

require.register("view/netcreate/components/NCNode.jsx", function(exports, require, module) {
'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _URCommentVBtn = require('./URCommentVBtn');

var _URCommentVBtn2 = _interopRequireDefault(_URCommentVBtn);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/*//////////////////////////////// ABOUT \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\*\

  Prototype Simple NetCreate Node Editor

  Built for Version 2.0 ITEST.

  Provides a viewer and editor for the currently selected node.

  USAGE

    <NCNode />

  Main changes for 2.0:
  * Node data is made up of built-in parameters (e.g. label, provenance),
    and arbitrary custom parameters defined via the template.  This Node
    editor can support wide variety of data.

  DATA UPDATES
  * Updates are triggered mostly by:
    1.  SELECTION state updates when nodes and edges change
    2.  PERMISSION state updates when locks are set and released.

  Data is currently in a transitional state.
  Currently all properties are saved in a flat list.
  Eventually we might want to differentiate between
  built-in properties (e.g. id, created), and template-defined custom
  `attributes`.  There is an awkward translation between these two
  representations during data load, update, and save.


  PERMISSIONS
  Editting is restricted by:
  * User must be logged in
  * Template is not being edited
  * Data is not being imported
  * Someone else is not editing the node (and has placed a lock on it)

\*\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ * //////////////////////////////////////*/

var React = require('react');
var UNISYS = require('unisys/client');
var EDGEMGR = require('../edge-mgr'); // handles edge synthesis
var LOCKMGR = require('../lock-mgr');
var CMTMGR = require('../comment-mgr');

var _require = require('system/util/enum'),
    BUILTIN_FIELDS_NODE = _require.BUILTIN_FIELDS_NODE;

var _require2 = require('system/util/constant'),
    EDGE_NOT_SET_LABEL = _require2.EDGE_NOT_SET_LABEL,
    ARROW_RIGHT = _require2.ARROW_RIGHT;

var NCLOGIC = require('../nc-logic');
var NCUI = require('../nc-ui');
var NCEdge = require('./NCEdge');
var NCDialogCitation = require('./NCDialogCitation');
var SETTINGS = require('settings');


/// CONSTANTS & DECLARATIONS //////////////////////////////////////////////////
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
var DBG = false;
var PR = 'NCNode';
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
// const isAdmin = SETTINGS.IsAdmin();
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
var TABS = {
  // Also used as labels
  ATTRIBUTES: 'ATTRIBUTES',
  EDGES: 'EDGES',
  PROVENANCE: 'PROVENANCE'
};

/// REACT COMPONENT ///////////////////////////////////////////////////////////
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/// export a class object for consumption by brunch/require

var NCNode = function (_UNISYS$Component) {
  _inherits(NCNode, _UNISYS$Component);

  function NCNode(props) {
    _classCallCheck(this, NCNode);

    var _this = _possibleConstructorReturn(this, (NCNode.__proto__ || Object.getPrototypeOf(NCNode)).call(this, props));

    _this.state = {
      isLoggedIn: false,
      isAdmin: false
    }; // initialized on componentDidMount and clearSelection

    // STATE MANAGEMENT
    _this.ResetState = _this.ResetState.bind(_this);
    _this.urstate_SESSION = _this.urstate_SESSION.bind(_this);
    _this.urstate_LOCKSTATE = _this.urstate_LOCKSTATE.bind(_this);
    _this.urstate_NCDATA = _this.urstate_NCDATA.bind(_this);
    _this.urstate_PERMISSIONS = _this.urstate_PERMISSIONS.bind(_this);
    _this.IsLoggedIn = _this.IsLoggedIn.bind(_this);
    _this.DerivePermissions = _this.DerivePermissions.bind(_this);

    // EVENT HANDLERS
    _this.CheckUnload = _this.CheckUnload.bind(_this);
    _this.DoUnload = _this.DoUnload.bind(_this);
    _this.ClearSelection = _this.ClearSelection.bind(_this);
    _this.urstate_SELECTION = _this.urstate_SELECTION.bind(_this);
    _this.SelectEdgeAndEdit = _this.SelectEdgeAndEdit.bind(_this);
    _this.SelectEdge = _this.SelectEdge.bind(_this);
    _this.DeselectEdge = _this.DeselectEdge.bind(_this);
    // DATA LOADING
    _this.LoadNode = _this.LoadNode.bind(_this);
    _this.FindLinkedEdges = _this.FindLinkedEdges.bind(_this);
    _this.LoadAttributes = _this.LoadAttributes.bind(_this);
    _this.UnlockNode = _this.UnlockNode.bind(_this);
    // DATA SAVING
    _this.SaveNode = _this.SaveNode.bind(_this);
    _this.DeleteNode = _this.DeleteNode.bind(_this);
    // HELPER METHODS
    _this.LookupBackgroundColor = _this.LookupBackgroundColor.bind(_this);
    _this.FindMatchingList = _this.FindMatchingList.bind(_this);
    // UI HANDLERS
    _this.UISelectTab = _this.UISelectTab.bind(_this);
    _this.UIRequestEditNode = _this.UIRequestEditNode.bind(_this);
    _this.UIReplacementNodeIdUpdate = _this.UIReplacementNodeIdUpdate.bind(_this);
    _this.UIAddEdge = _this.UIAddEdge.bind(_this);
    _this.UIEnableEditMode = _this.UIEnableEditMode.bind(_this);
    _this.UICancelEditMode = _this.UICancelEditMode.bind(_this);
    _this.UIDisableEditMode = _this.UIDisableEditMode.bind(_this);
    _this.UIInputUpdate = _this.UIInputUpdate.bind(_this);
    _this.UIProvenanceInputUpdate = _this.UIProvenanceInputUpdate.bind(_this);
    _this.UILabelInputUpdate = _this.UILabelInputUpdate.bind(_this);
    _this.UIViewEdge = _this.UIViewEdge.bind(_this);
    _this.UIEditEdge = _this.UIEditEdge.bind(_this);
    _this.UICitationShow = _this.UICitationShow.bind(_this);
    _this.UICitationClose = _this.UICitationClose.bind(_this);
    // RENDERERS -- Main
    _this.RenderView = _this.RenderView.bind(_this);
    _this.RenderEdit = _this.RenderEdit.bind(_this);
    // RENDER HELPERS
    _this.RenderEdgesTab = _this.RenderEdgesTab.bind(_this);

    /// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    /// REGISTER LISTENERS
    _this.OnAppStateChange('SESSION', _this.urstate_SESSION);
    _this.OnAppStateChange('NCDATA', _this.urstate_NCDATA);
    _this.OnAppStateChange('SELECTION', _this.urstate_SELECTION);
    _this.OnAppStateChange('LOCKSTATE', _this.urstate_LOCKSTATE);
    _this.OnAppStateChange('PERMISSIONS', _this.urstate_PERMISSIONS);
    _this.HandleMessage('NODE_EDIT', _this.UIRequestEditNode); // Node Table request
    _this.HandleMessage('EDGE_SELECT_AND_EDIT', _this.SelectEdgeAndEdit);
    _this.HandleMessage('EDGE_SELECT', _this.SelectEdge);
    _this.HandleMessage('EDGE_DESELECT', _this.DeselectEdge);
    return _this;
  }

  _createClass(NCNode, [{
    key: 'componentDidMount',
    value: function componentDidMount() {
      this.ResetState(); // Initialize State
      window.addEventListener('beforeunload', this.CheckUnload);
      window.addEventListener('unload', this.DoUnload);
    }
  }, {
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      this.AppStateChangeOff('SESSION', this.urstate_SESSION);
      this.AppStateChangeOff('NCDATA', this.urstate_NCDATA);
      this.AppStateChangeOff('SELECTION', this.urstate_SELECTION);
      this.AppStateChangeOff('LOCKSTATE', this.urstate_LOCKSTATE);
      this.AppStateChangeOff('PERMISSIONS', this.urstate_PERMISSIONS);
      this.DropMessage('NODE_EDIT', this.UIRequestEditNode);
      this.DropMessage('EDGE_SELECT_AND_EDIT', this.SelectEdgeAndEdit);
      this.DropMessage('EDGE_SELECT', this.SelectEdge);
      this.DropMessage('EDGE_DESELECT', this.DeselectEdge);
      window.removeEventListener('beforeunload', this.CheckUnload);
      window.removeEventListener('unload', this.DoUnload);
    }

    /// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    /// STATE MANAGEMENT
    ///

  }, {
    key: 'ResetState',
    value: function ResetState() {
      var TEMPLATE = this.AppState('TEMPLATE');
      this.setState({
        // NODE DEFS
        id: null,
        label: '',
        type: '',
        degrees: null,
        attributes: {},
        provenance: {},
        created: undefined,
        createdBy: undefined,
        updated: undefined,
        updatedBy: undefined,
        revision: 0,
        // EDGES
        edges: [], // selected nodes' edges not ALL edges
        // SYSTEM STATE
        // isLoggedIn: false, // don't clear session state!
        isAdmin: false,
        previousState: {},
        // UI State
        uEditBtnDisable: false,
        uEditBtnHide: false,
        uViewMode: NCUI.VIEWMODE.VIEW,
        uSelectedTab: TABS.ATTRIBUTES,
        selectedEdgeId: null,
        uBackgroundColor: 'transparent',
        uIsLockedByDB: false, // shows db lock message next to Edit Node button
        uIsLockedByTemplate: false,
        uIsLockedByImport: false,
        // uIsLockedByComment: false,     // NOT IMPLEMENTED

        uEditLockMessage: '',
        uHideDeleteNodeButton: TEMPLATE.hideDeleteNodeButton,
        uReplacementNodeId: '',
        uIsValidReplacementNodeID: true,
        uShowMatchlist: false,
        uShowCitationDialog: false
      });
    }

    /// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    /// EVENT HANDLERS
    ///

  }, {
    key: 'CheckUnload',
    value: function CheckUnload(event) {
      if (this.state.uViewMode === NCUI.VIEWMODE.EDIT) {
        event.preventDefault();
        (event || window.event).returnValue = null;
      } else {
        Reflect.deleteProperty(event, 'returnValue');
      }
      return event;
    }
  }, {
    key: 'DoUnload',
    value: function DoUnload(event) {
      if (this.state.uViewMode === NCUI.VIEWMODE.EDIT) {
        LOCKMGR.RequestUnlockNode(this.state.id);
      }
    }

    /**
     * Handle change in SESSION data
     * SESSION is called by SessionShell when the ID changes
     * set system-wide. data: { classId, projId, hashedId, groupId, isValid }
     * Called both by componentWillMount() and AppStateChange handler.
     * The 'SESSION' state change is triggered in two places in SessionShell during
     * its handleChange() when active typing is occuring, and also during
     * SessionShell.componentWillMount()
     */

  }, {
    key: 'urstate_SESSION',
    value: function urstate_SESSION(decoded) {
      this.urstate_LOCKSTATE();
    }
  }, {
    key: 'urstate_LOCKSTATE',
    value: function urstate_LOCKSTATE() {
      var permissionsState = this.DerivePermissions(this.state.id);
      this.setState(_extends({}, permissionsState));
    }
  }, {
    key: 'urstate_PERMISSIONS',
    value: function urstate_PERMISSIONS(PERMISSIONS) {
      this.setState({ isAdmin: PERMISSIONS.isAdmin });
    }

    /*
        Called by NCDATA AppState updates
    */

  }, {
    key: 'urstate_NCDATA',
    value: function urstate_NCDATA(data) {
      var _this2 = this;

      // If NCDATA is updated, reload the node AND the edges b/c db has changed
      var updatedNode = data.nodes.find(function (n) {
        return n.id === _this2.state.id;
      });
      this.LoadNode(updatedNode);
    }

    /**
     * Checks current SESSION state to see if user is logged in.
     * Since NCNode is dynamically created and closed, we can't rely on
     * SESSION AppState updates messages.
     * NOTE updates state.
     * @returns {boolean} True if user is logged in
     */

  }, {
    key: 'IsLoggedIn',
    value: function IsLoggedIn() {
      var SESSION = this.AppState('SESSION');
      var isLoggedIn = SESSION.isValid;
      return isLoggedIn;
    }

    // 1. Read the LOCKSTATE
    // 2. Derive the permissions state (hide/disable the edit button)
    // 3. Look up any lock messages

  }, {
    key: 'DerivePermissions',
    value: function DerivePermissions(nodeId) {
      var isLoggedIn = this.IsLoggedIn();

      var LOCKSTATE = this.AppState('LOCKSTATE');
      var uIsLockedByDB = LOCKSTATE.lockedNodes && LOCKSTATE.lockedNodes.includes(nodeId);
      var uIsLockedByTemplate = LOCKSTATE.templateBeingEdited;
      var uIsLockedByImport = LOCKSTATE.importActive;
      // NOT IMPLEMENTED
      // FUTURE: We may want to lock the node if a comment is being edited
      //         but currently there isn't an easy way to do this
      //         because while we know that a comment is being edited (via LOCKSTATE.lockedComments)
      //         we don't know if the comment is being edited by the current user or someone else.
      //         So for now, we allow the node to be edited while a comment is being edited.
      //         If we wanted to implement this, we probably need to introduce a new parameter
      //         or properly implement commentBeingEditedByMe.
      // const uIsLockedByComment = LOCKSTATE.commentBeingEditedByMe;

      // Derive new message and EditBtn status
      var uEditLockMessage = '';
      var uEditBtnDisable = false;
      var uEditBtnHide = true;
      var TEMPLATE = this.AppState('TEMPLATE');
      if (isLoggedIn) uEditBtnHide = false;
      if (uIsLockedByDB) {
        uEditBtnDisable = true;
        uEditLockMessage += TEMPLATE.nodeIsLockedMessage;
      }
      if (uIsLockedByTemplate) {
        uEditBtnDisable = true;
        uEditLockMessage += TEMPLATE.templateIsLockedMessage;
      }
      if (uIsLockedByImport) {
        uEditBtnDisable = true;
        uEditLockMessage += TEMPLATE.importIsLockedMessage;
      }
      // NOT IMPLEMENTED
      // if (uIsLockedByComment) {
      //   uEditBtnDisable = true;
      //   // no change to lock message for comments
      // }

      // return all state values
      return {
        // User Permissions
        isLoggedIn: isLoggedIn,
        uIsLockedByDB: uIsLockedByDB,
        uIsLockedByTemplate: uIsLockedByTemplate,
        uIsLockedByImport: uIsLockedByImport,
        // uIsLockedByComment,  // NOT IMPLEMENTED
        // UI State
        uEditBtnDisable: uEditBtnDisable,
        uEditBtnHide: uEditBtnHide,
        uEditLockMessage: uEditLockMessage
      };
    }
  }, {
    key: 'ClearSelection',
    value: function ClearSelection() {
      this.ResetState();
    }
  }, {
    key: 'urstate_SELECTION',
    value: function urstate_SELECTION(data) {
      if (!data.nodes) return; // SELECTION cleared?
      var node = data.nodes[0]; // select the first node
      this.LoadNode(node);
    }
    /**
     * In order to edit an edge, we must first select the source
     * 1. (this assumes SOURCE_SELECT was already called)
     * 2. select the Edges tab
     * 3. open the edge (load the edge data into NCEdge)
     * 4. trigger edge edit mode
     * @param {Object} data
     * @param {string} data.edgeId
     */

  }, {
    key: 'SelectEdgeAndEdit',
    value: function SelectEdgeAndEdit(data) {
      var _this3 = this;

      var edgeId = data.edgeId;

      this.setState({ uSelectedTab: TABS.EDGES, selectedEdgeId: edgeId }, function () {
        var edges = _this3.state.edges;

        var edge = edges.find(function (e) {
          return e.id === Number(edgeId);
        });
        _this3.setState({ selectedEdgeId: edgeId });
        _this3.AppCall('EDGE_OPEN', { edge: edge }).then(function () {
          _this3.AppCall('EDGE_EDIT', { edgeId: edgeId });
        });
      });
    }
  }, {
    key: 'SelectEdge',
    value: function SelectEdge(data) {
      var _this4 = this;

      var edgeId = data.edgeId;

      this.setState({ uSelectedTab: TABS.EDGES, selectedEdgeId: edgeId }, function () {
        var edges = _this4.state.edges;

        var edge = edges.find(function (e) {
          return e.id === Number(edgeId);
        });
        _this4.setState({ selectedEdgeId: edgeId });
        _this4.AppCall('EDGE_OPEN', { edge: edge });
      });
    }
  }, {
    key: 'DeselectEdge',
    value: function DeselectEdge() {
      this.setState({ selectedEdgeId: null });
    }

    /// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    /// DATA LOADING
    ///

  }, {
    key: 'LoadNode',
    value: function LoadNode(node) {
      var _state = this.state,
          id = _state.id,
          uViewMode = _state.uViewMode;

      // If we're editing, ignore the select!

      if (uViewMode === NCUI.VIEWMODE.EDIT) return;

      // If no node was selected, deselect
      if (!node) {
        this.ClearSelection();
        return;
      }

      // if we're loading a new node, close any open edges
      if (node.id !== id) this.AppCall('EDGE_DESELECT');

      // Load the node
      var edges = this.FindLinkedEdges(node.id);
      var attributes = this.LoadAttributes(node);
      var provenance = this.LoadProvenance(node);
      var uBackgroundColor = this.LookupBackgroundColor(node.type);
      var matchingNodes = this.FindMatchingList(node.label, node.id);
      var permissionsState = this.DerivePermissions(node.id);
      this.setState(_extends({
        // node parameters
        id: node.id,
        label: node.label,
        type: node.type,
        degrees: node.degrees,
        attributes: attributes,
        provenance: provenance,
        created: node.meta ? new Date(node.meta.created).toLocaleString() : '',
        createdBy: node.createdBy,
        updated: node.meta ? new Date(node.meta.updated).toLocaleString() : '',
        updatedBy: node.updatedBy,
        revision: node.meta ? node.meta.revision : '',
        edges: edges,
        // UI parameters
        uBackgroundColor: uBackgroundColor,
        matchingNodes: matchingNodes
      }, permissionsState));
    }
  }, {
    key: 'FindLinkedEdges',
    value: function FindLinkedEdges(id) {
      // -- First, sort edges by source, then target
      var NCDATA = this.AppState('NCDATA');
      var linkedEdges = NCDATA.edges.filter(function (e) {
        return e.source === id || e.target === id;
      });
      linkedEdges.sort(function (a, b) {
        // same source label, sort on target
        if (a.sourceLabel === b.sourceLabel) {
          if (a.targetLabel < b.targetLabel) return -1;
          if (a.targetLabel > b.targetLabel) return 1;
        }
        // Always list `this` node first
        if (a.source === id) return -1;
        if (b.source === id) return 1;
        // Otherwise sort on source
        if (a.sourceLabel < b.sourceLabel) return -1;
        if (a.sourceLabel > b.sourceLabel) return 1;
        return 0;
      });
      return linkedEdges;
    }
    /**
     * Loads up the `attributes` object defined by the TEMPLATE
     * Will skip
     *   * BUILTIN fields
     *   * attributes that are `hidden` by the template
     * REVIEW: Currently the parameters will show up in random object order.
     * @param {Object} node
     * @returns {Object} { ...attr-key: attr-value }
     */

  }, {
    key: 'LoadAttributes',
    value: function LoadAttributes(node) {
      var NODEDEFS = this.AppState('TEMPLATE').nodeDefs;
      var attributes = {};
      Object.keys(NODEDEFS).forEach(function (k) {
        if (BUILTIN_FIELDS_NODE.includes(k)) return; // skip built-in fields
        var attr_def = NODEDEFS[k];
        if (attr_def.hidden) return; // skip hidden fields
        if (attr_def.isProvenance) return; // skip fields that are marked as provenance
        attributes[k] = node[k];
      });
      return attributes;
    }
    /**
     * Loads up the `provenance` object defined by the TEMPLATE
     * Will skip
     *   * BUILTIN fields
     *   * attributes that are `hidden` by the template
     * REVIEW: Currently the parameters will show up in random object order.
     * @param {Object} node
     * @returns {Object} { ...attr-key: attr-value }
     */

  }, {
    key: 'LoadProvenance',
    value: function LoadProvenance(node) {
      var NODEDEFS = this.AppState('TEMPLATE').nodeDefs;
      var provenance = {};
      Object.keys(NODEDEFS).forEach(function (k) {
        if (BUILTIN_FIELDS_NODE.includes(k)) return; // skip built-in fields
        var provenance_def = NODEDEFS[k];
        if (provenance_def.hidden) return; // skip hidden fields
        if (!provenance_def.isProvenance) return; // skip fields that are not marked as provenance
        provenance[k] = node[k];
      });
      return provenance;
    }
  }, {
    key: 'UnlockNode',
    value: function UnlockNode(cb) {
      LOCKMGR.RequestUnlockNode(this.state.id, cb);
    }

    /// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    /// DATA SAVING
    ///

  }, {
    key: 'SaveNode',
    value: function SaveNode() {
      var _this5 = this;

      var _state2 = this.state,
          id = _state2.id,
          label = _state2.label,
          type = _state2.type,
          attributes = _state2.attributes,
          provenance = _state2.provenance,
          created = _state2.created,
          updated = _state2.updated,
          revision = _state2.revision;

      var uid = NCLOGIC.GetCurrentUserId();
      var node = {
        id: id,
        label: label,
        type: type,
        updatedBy: uid
      };
      Object.keys(attributes).forEach(function (k) {
        return node[k] = attributes[k];
      });
      Object.keys(provenance).forEach(function (k) {
        return node[k] = provenance[k];
      });

      // Exit Edit mode first, then send the update
      // (This is necessary otherwise the db update will trigger a
      // NCDATA update followed by LoadNode, which will skip loading because
      // it's still in edit mode)
      this.setState({
        uViewMode: NCUI.VIEWMODE.VIEW
      }, function () {
        // write data to database
        // setting dbWrite to true will distinguish this update
        // from a remote one
        _this5.AppCall('DB_UPDATE', { node: node }).then(function () {
          _this5.UnlockNode();
        });
      });
      UNISYS.Log('click save node', id, label, JSON.stringify(node));
    }
  }, {
    key: 'DeleteNode',
    value: function DeleteNode() {
      var _state3 = this.state,
          id = _state3.id,
          uReplacementNodeId = _state3.uReplacementNodeId;

      // Re-link edges or delete edges?
      // `NaN` is not valid JSON, so we need to pass -1

      var replacementNodeID = uReplacementNodeId === '' ? -1 : parseInt(uReplacementNodeId); // '' = Delete edges by default

      this.ResetState();
      this.AppCall('DB_UPDATE', {
        nodeID: id,
        replacementNodeID: replacementNodeID
      });
    }

    /// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    /// HELPER METHODS
    /**
     * Looks up the background color of the node editor for the
     * `uBackgroundColor` state.
     * Currently the background color is determined by the template node type
     * color mapping.  This will eventually be replaced with a color manager.
     */

  }, {
    key: 'LookupBackgroundColor',
    value: function LookupBackgroundColor(type) {
      var COLORMAP = this.AppState('COLORMAP');
      var uBackgroundColor = COLORMAP.nodeColorMap[type] || '#555555';
      return uBackgroundColor;
    }

    /**
     * Create list of nodes that match the label
     * @param {*} label
     * @param {*} id optional id -- needed by LoadNode because id may not be defined yet
     * @returns
     */

  }, {
    key: 'FindMatchingList',
    value: function FindMatchingList(label) {
      var id = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.state.id;

      var foundNodes = NCLOGIC.FindMatchingNodesByLabel(label);
      var matchingNodes = foundNodes.filter(function (n) {
        return n.id !== id;
      }); // don't include self
      return matchingNodes;
    }

    /// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    /// UI EVENT HANDLERS

  }, {
    key: 'UISelectTab',
    value: function UISelectTab(event) {
      var _state4 = this.state,
          id = _state4.id,
          label = _state4.label;

      var uSelectedTab = event.target.value;
      this.setState({ uSelectedTab: uSelectedTab });
      if (event.target.value !== TABS.EDGES) this.AppCall('EDGE_DESELECT');
      UNISYS.Log('select node tab', id, label, uSelectedTab);
    }

    /**
     * If `lockNode` is not successful, then that means the node was
     * already locked, so we can't edit.
     */

  }, {
    key: 'UIRequestEditNode',
    value: function UIRequestEditNode() {
      var _this6 = this;

      var isLoggedIn = this.state.isLoggedIn;

      if (!isLoggedIn) return;
      LOCKMGR.RequestLockNode(this.state.id, function (lockSuccess) {
        if (!lockSuccess) _this6.setState({ uIsLockedByDB: !lockSuccess });else _this6.UIEnableEditMode();
      });
    }
  }, {
    key: 'UIReplacementNodeIdUpdate',
    value: function UIReplacementNodeIdUpdate(event) {
      var replacementNodeId = parseInt(event.target.value);
      var isValid = false;
      // Allow `` because we use a a blank field to indicate delete node without relinking edges.
      if (event.target.value === '' || this.AppState('NCDATA').nodes.find(function (node) {
        return node.id === replacementNodeId;
      })) {
        isValid = true;
      }
      this.setState({
        uReplacementNodeId: replacementNodeId,
        uIsValidReplacementNodeID: isValid
      });
    }
  }, {
    key: 'UIAddEdge',
    value: function UIAddEdge(event) {
      var _this7 = this;

      event.preventDefault();
      this.AppCall('EDGE_CREATE', { nodeId: this.state.id }).then(function (edge) {
        // enable editing right away
        _this7.UIEditEdge(edge.id);
      });
    }
  }, {
    key: 'UIEnableEditMode',
    value: function UIEnableEditMode() {
      var _state5 = this.state,
          uSelectedTab = _state5.uSelectedTab,
          id = _state5.id,
          label = _state5.label,
          type = _state5.type,
          attributes = _state5.attributes,
          provenance = _state5.provenance;
      // If user was on Edges tab while requesting edit (e.g. from Node Table), then
      // switch to Attributes tab first.

      var editableTab = uSelectedTab === TABS.EDGES ? TABS.ATTRIBUTES : uSelectedTab;
      var previousState = {
        label: label,
        type: type,
        attributes: Object.assign({}, attributes),
        provenance: Object.assign({}, provenance)
      };
      this.setState({
        uViewMode: NCUI.VIEWMODE.EDIT,
        uSelectedTab: editableTab,
        uIsLockedByDB: false,
        previousState: previousState
      });

      var node = {
        id: id,
        label: label,
        type: type,
        provenance: provenance
      };
      Object.keys(attributes).forEach(function (k) {
        return node[k] = attributes[k];
      });
      Object.keys(provenance).forEach(function (k) {
        return node[k] = provenance[k];
      });
      UNISYS.Log('edit node', id, label, JSON.stringify(node));
    }
  }, {
    key: 'UICancelEditMode',
    value: function UICancelEditMode() {
      var _this8 = this;

      var _state6 = this.state,
          id = _state6.id,
          label = _state6.label,
          revision = _state6.revision,
          previousState = _state6.previousState;

      // if user is cancelling a newly created unsaved node, delete the node instead
      // Initial Node creation is rev 0, saving it for the first time bumps it to rev 1

      if (revision < 1) {
        this.UIDisableEditMode();
        this.DeleteNode();
        return;
      }

      // restore previous state
      this.setState({
        label: previousState.label,
        type: previousState.type,
        attributes: previousState.attributes,
        provenance: previousState.provenance
      }, function () {
        return _this8.UIDisableEditMode();
      });
      UNISYS.Log('cancel edit node', id, label);
    }
  }, {
    key: 'UIDisableEditMode',
    value: function UIDisableEditMode() {
      var _this9 = this;

      this.UnlockNode(function () {
        _this9.setState({
          uViewMode: NCUI.VIEWMODE.VIEW
        });
      });
    }
  }, {
    key: 'UIInputUpdate',
    value: function UIInputUpdate(key, value) {
      var state = {};
      if (BUILTIN_FIELDS_NODE.includes(key)) {
        var data = {};
        data[key] = value;
        state = data;
      } else {
        var attributes = this.state.attributes;

        attributes[key] = value;
        state = attributes;
      }

      // HACK Allow any field to be used to specify color
      //      Eventually this needs to be built into the template.
      var COLORFIELDS = ['type'];
      // special handling to update the background color immediately if `type` is changed
      var type = COLORFIELDS.includes(key) ? value : this.state.type;
      var uBackgroundColor = this.LookupBackgroundColor(type);
      this.setState(_extends({}, state, { uBackgroundColor: uBackgroundColor }));
    }
  }, {
    key: 'UIProvenanceInputUpdate',
    value: function UIProvenanceInputUpdate(key, value) {
      if (BUILTIN_FIELDS_NODE.includes(key)) {
        var data = {};
        data[key] = value;
        this.setState(data);
      } else {
        var provenance = this.state.provenance;

        provenance[key] = value;
        this.setState({ provenance: provenance });
      }
    }
  }, {
    key: 'UILabelInputUpdate',
    value: function UILabelInputUpdate(key, value) {
      var data = {};
      data[key] = value;
      data.matchingNodes = this.FindMatchingList(value);
      this.setState(data);
    }
  }, {
    key: 'UIViewEdge',
    value: function UIViewEdge(edgeId) {
      var edges = this.state.edges;

      var edge = edges.find(function (e) {
        return e.id === Number(edgeId);
      });
      this.setState({ selectedEdgeId: edgeId });
      this.AppCall('EDGE_OPEN', { edge: edge });
    }
  }, {
    key: 'UIEditEdge',
    value: function UIEditEdge(edgeId) {
      var _this10 = this;

      var edges = this.state.edges;

      var edge = edges.find(function (e) {
        return e.id === Number(edgeId);
      });
      this.setState({ selectedEdgeId: edgeId });
      this.AppCall('EDGE_OPEN', { edge: edge }).then(function () {
        return _this10.AppCall('EDGE_EDIT', { edge: edge });
      });
    }
  }, {
    key: 'UICitationShow',
    value: function UICitationShow() {
      this.setState({ uShowCitationDialog: true });
    }
  }, {
    key: 'UICitationClose',
    value: function UICitationClose() {
      this.setState({ uShowCitationDialog: false });
    }

    /// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    /// RENDER METHODS

  }, {
    key: 'RenderView',
    value: function RenderView() {
      var _state7 = this.state,
          uSelectedTab = _state7.uSelectedTab,
          uBackgroundColor = _state7.uBackgroundColor,
          uEditBtnDisable = _state7.uEditBtnDisable,
          uEditBtnHide = _state7.uEditBtnHide,
          uEditLockMessage = _state7.uEditLockMessage,
          uHideDeleteNodeButton = _state7.uHideDeleteNodeButton,
          uReplacementNodeId = _state7.uReplacementNodeId,
          uIsValidReplacementNodeID = _state7.uIsValidReplacementNodeID,
          uShowCitationDialog = _state7.uShowCitationDialog,
          id = _state7.id,
          label = _state7.label,
          type = _state7.type,
          isAdmin = _state7.isAdmin;

      var TEMPLATE = this.AppState('TEMPLATE');
      var defs = TEMPLATE.nodeDefs;
      var uShowCitationButton = TEMPLATE.citation && !TEMPLATE.citation.hidden;
      var bgcolor = uBackgroundColor + '44'; // hack opacity
      var citation = 'NetCreate ' + TEMPLATE.name + ' network, ' + ('Node: "' + label + '" (ID ' + id + '). ') + (TEMPLATE.citation && TEMPLATE.citation.text ? TEMPLATE.citation.text + '. ' : '') + ('Last accessed at ' + NCUI.DateFormatted() + '.');
      var collection_ref = CMTMGR.GetNodeCREF(id);
      return React.createElement(
        'div',
        { className: '--NCNode_View nccomponent' },
        React.createElement(
          'div',
          { className: 'view', style: { background: bgcolor } },
          React.createElement(
            'div',
            { className: 'titlebar' },
            React.createElement(
              'div',
              { className: 'nodenumber' },
              'NODE ',
              id
            ),
            React.createElement(
              'div',
              { className: 'nodelabel' },
              NCUI.RenderLabel('label', label)
            ),
            React.createElement(_URCommentVBtn2.default, { cref: collection_ref, key: collection_ref })
          ),
          defs['type'] && !defs['type'].hidden && React.createElement(
            'div',
            { className: 'formview typeview' },
            NCUI.RenderLabel('type', defs['type'].displayLabel, defs['type'].help),
            NCUI.RenderStringValue('type', type)
          ),
          React.createElement(
            'div',
            { className: '--NCNode_View_Tabs tabcontainer' },
            NCUI.RenderTabSelectors(TABS, this.state, this.UISelectTab),
            React.createElement(
              'div',
              { className: 'tabview' },
              uSelectedTab === TABS.ATTRIBUTES && NCUI.RenderAttributesTabView(this.state, defs, BUILTIN_FIELDS_NODE),
              uSelectedTab === TABS.EDGES && this.RenderEdgesTab(),
              uSelectedTab === TABS.PROVENANCE && NCUI.RenderProvenanceTabView(this.state, defs, BUILTIN_FIELDS_NODE)
            )
          ),
          !uEditBtnHide && uEditLockMessage && React.createElement(
            'div',
            { className: 'message warning', style: { marginTop: '1em' } },
            React.createElement(
              'p',
              null,
              uEditLockMessage
            ),
            React.createElement(
              'p',
              { hidden: !isAdmin },
              React.createElement(
                'b',
                null,
                'ADMINISTRATOR ONLY'
              ),
              ': If you are absolutely sure this is an error, you can force the unlock.',
              React.createElement(
                'button',
                {
                  onClick: this.UIDisableEditMode,
                  style: { marginLeft: 0 },
                  type: 'button'
                },
                'Force Unlock'
              )
            )
          ),
          React.createElement(
            'div',
            { className: '--NCNode_View_Controls controlbar' },
            uShowCitationButton && React.createElement(
              'button',
              {
                id: 'citationbtn',
                className: 'citationbutton',
                onClick: this.UICitationShow,
                type: 'button'
              },
              'Cite Node'
            ),
            React.createElement('div', { style: { flexGrow: 1 } }),
            !uEditBtnHide && uSelectedTab !== TABS.EDGES && React.createElement(
              'button',
              {
                id: 'editbtn',
                onClick: this.UIRequestEditNode,
                disabled: uEditBtnDisable,
                type: 'button'
              },
              'Edit'
            )
          ),
          isAdmin && !uEditBtnDisable && !uHideDeleteNodeButton && React.createElement(
            'div',
            { className: 'controlbar deletenode' },
            React.createElement(
              'div',
              { className: 'message' },
              'Re-link edges to this Node ID (leave blank to delete edge)'
            ),
            React.createElement(
              'div',
              null,
              React.createElement('input', {
                type: 'number',
                id: 'replacementNodeID',
                className: 'deleteinput ' + (uIsValidReplacementNodeID ? '' : 'invalid'),
                value: uReplacementNodeId || '',
                onChange: this.UIReplacementNodeIdUpdate
              }),
              !uIsValidReplacementNodeID && React.createElement(
                'div',
                { className: 'message warning' },
                'Invalid Node ID!'
              )
            ),
            React.createElement(
              'button',
              { onClick: this.DeleteNode, type: 'button' },
              'Delete'
            )
          )
        ),
        uShowCitationDialog && React.createElement(NCDialogCitation, { message: citation, onClose: this.UICitationClose })
      );
    }
  }, {
    key: 'RenderEdit',
    value: function RenderEdit() {
      var _this11 = this;

      var _state8 = this.state,
          uSelectedTab = _state8.uSelectedTab,
          uBackgroundColor = _state8.uBackgroundColor,
          uShowMatchlist = _state8.uShowMatchlist,
          matchingNodes = _state8.matchingNodes,
          id = _state8.id,
          label = _state8.label,
          type = _state8.type;

      var defs = this.AppState('TEMPLATE').nodeDefs;
      var bgcolor = uBackgroundColor + '66'; // hack opacity
      var matchList = matchingNodes ? matchingNodes.map(function (n) {
        return React.createElement(
          'div',
          { key: '' + n.label + n.id, value: n.id },
          n.label,
          ' ',
          React.createElement(
            'span',
            { className: 'id' },
            '#',
            n.id
          )
        );
      }) : undefined;
      var isDuplicate = matchingNodes && matchingNodes.find(function (n) {
        return n.label === label;
      });
      var duplicateWarning = this.AppState('TEMPLATE').duplicateWarning;
      return React.createElement(
        'div',
        { className: '--NCNode_Edit' },
        React.createElement('div', { className: 'screen' }),
        React.createElement(
          'div',
          { className: 'nccomponent' },
          React.createElement(
            'div',
            {
              className: 'edit',
              style: {
                background: bgcolor,
                borderColor: uBackgroundColor
              }
            },
            React.createElement(
              'div',
              { className: 'nodelabel' },
              NCUI.RenderStringInput('label', label, this.UILabelInputUpdate, '', function () {
                return _this11.setState({ uShowMatchlist: true });
              }, function () {
                return _this11.setState({ uShowMatchlist: false });
              }),
              uShowMatchlist && matchList && React.createElement(
                'div',
                { className: 'matchlist' },
                isDuplicate && React.createElement(
                  'div',
                  { className: 'warning' },
                  React.createElement('img', { src: 'images/icn_caution.svg' }),
                  React.createElement(
                    'span',
                    null,
                    duplicateWarning
                  )
                ),
                matchList
              ),
              isDuplicate && React.createElement(
                'div',
                { className: 'message warning' },
                React.createElement('img', { src: 'images/icn_caution.svg' }),
                React.createElement(
                  'span',
                  null,
                  duplicateWarning
                )
              )
            ),
            defs['type'] && !defs['type'].hidden && React.createElement(
              'div',
              { className: 'formview typeview' },
              NCUI.RenderLabel('type', defs['type'].displayLabel, defs['type'].help),
              NCUI.RenderOptionsInput('type', type, defs, this.UIInputUpdate, defs['type'].help)
            ),
            React.createElement(
              'div',
              { className: 'tabcontainer' },
              NCUI.RenderTabSelectors(TABS, this.state, this.UISelectTab),
              React.createElement(
                'div',
                { className: 'tabview' },
                uSelectedTab === TABS.ATTRIBUTES && NCUI.RenderAttributesTabEdit(this.state, defs, this.UIInputUpdate, BUILTIN_FIELDS_NODE),
                uSelectedTab === TABS.EDGES && this.RenderEdgesTab(),
                uSelectedTab === TABS.PROVENANCE && NCUI.RenderProvenanceTabEdit(this.state, defs, this.UIProvenanceInputUpdate, BUILTIN_FIELDS_NODE)
              )
            ),
            React.createElement(
              'div',
              { className: 'controlbar' },
              React.createElement(
                'button',
                {
                  className: 'cancelbtn',
                  onClick: this.UICancelEditMode,
                  type: 'button'
                },
                'Cancel'
              ),
              React.createElement(
                'button',
                { onClick: this.SaveNode, type: 'button' },
                'Save'
              )
            )
          )
        )
      );
    }

    /// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    /// RENDER HELPERS
    ///

  }, {
    key: 'RenderEdgesTab',
    value: function RenderEdgesTab() {
      var _this12 = this;

      var _state9 = this.state,
          uSelectedTab = _state9.uSelectedTab,
          selectedEdgeId = _state9.selectedEdgeId,
          uEditBtnDisable = _state9.uEditBtnDisable,
          uEditBtnHide = _state9.uEditBtnHide,
          id = _state9.id,
          label = _state9.label,
          edges = _state9.edges;

      var NCDATA = this.AppState('NCDATA');
      var TEMPLATE = this.AppState('TEMPLATE');
      var me = React.createElement(
        'span',
        { style: { color: '#888', fontStyle: 'italic', fontWeight: 'normal' } },
        'this node'
      );
      return React.createElement(
        'div',
        { className: 'edges' },
        edges.map(function (e) {
          var sourceNode = NCDATA.nodes.find(function (n) {
            return n.id === e.source;
          }) || {
            label: EDGE_NOT_SET_LABEL
          };
          var targetNode = NCDATA.nodes.find(function (n) {
            return n.id === e.target;
          }) || {
            label: EDGE_NOT_SET_LABEL
          };
          var color = EDGEMGR.LookupEdgeColor(e, TEMPLATE);
          var bgcolor = color + '33'; // opacity hack
          if (e.id === selectedEdgeId) {
            return React.createElement(NCEdge, { edgeId: e.id, parentNodeId: id, key: e.id });
          } else {
            return React.createElement(
              'div',
              { key: e.id },
              React.createElement(
                'button',
                {
                  className: 'edgebutton',
                  onClick: function onClick() {
                    return _this12.UIViewEdge(e.id);
                  },
                  style: { backgroundColor: bgcolor },
                  type: 'button'
                },
                id === e.source ? me : sourceNode.label,
                '\xA0',
                React.createElement(
                  'span',
                  { title: e.type },
                  ARROW_RIGHT
                ),
                '\xA0',
                id === e.target ? me : targetNode.label
              )
            );
          }
        }),
        !uEditBtnHide && uSelectedTab === TABS.EDGES && React.createElement(
          'button',
          {
            className: 'addedgebutton',
            onClick: this.UIAddEdge,
            disabled: uEditBtnDisable,
            type: 'button'
          },
          'New Edge'
        )
      );
    }

    /// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    /// MAIN RENDER

  }, {
    key: 'render',
    value: function render() {
      var _state10 = this.state,
          id = _state10.id,
          uViewMode = _state10.uViewMode;

      if (!id) return ''; // nothing selected
      if (uViewMode === NCUI.VIEWMODE.VIEW) {
        return this.RenderView();
      } else {
        return this.RenderEdit();
      }
    }
  }]);

  return NCNode;
}(UNISYS.Component);

/// EXPORT REACT COMPONENT ////////////////////////////////////////////////////
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -


module.exports = NCNode;
});

require.register("view/netcreate/components/NCNodeTable.jsx", function(exports, require, module) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }(); /*//////////////////////////////// ABOUT \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\*\



odeTable is used to to display a table of nodes for review.

t checks FILTEREDNCDATA to show highlight/filtered state

t uses URTable for rendering and sorting.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         


tableHeight -- sets height based on InfoPanel dragger
isOpen -- whether the table is visible

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           ## TO USE

odeTable is self contained and relies on global FILTEREDNCDATA to load.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         
odeTable tableHeight isOpen/>




var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _client = require('unisys/client');

var _client2 = _interopRequireDefault(_client);

var _ncUi = require('../nc-ui');

var _ncUi2 = _interopRequireDefault(_ncUi);

var _ncUtils = require('../nc-utils');

var _ncUtils2 = _interopRequireDefault(_ncUtils);

var _FilterEnums = require('./filter/FilterEnums');

var _FilterEnums2 = _interopRequireDefault(_FilterEnums);

var _commentMgr = require('../comment-mgr');

var _commentMgr2 = _interopRequireDefault(_commentMgr);

var _URTable = require('./URTable');

var _URTable2 = _interopRequireDefault(_URTable);

var _URCommentVBtn = require('./URCommentVBtn');

var _URCommentVBtn2 = _interopRequireDefault(_URCommentVBtn);

var _enum = require('system/util/enum');

var _constant = require('system/util/constant');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

/// CONSTANTS & DECLARATIONS //////////////////////////////////////////////////
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/// Initialize UNISYS DATA LINK for functional react component
var UDATAOwner = { name: 'NCNodeTable' };
var UDATA = _client2.default.NewDataLink(UDATAOwner);

var DBG = false;

/// REACT FUNCTIONAL COMPONENT ////////////////////////////////////////////////
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
function NCNodeTable(_ref) {
  var isOpen = _ref.isOpen;

  var isOpenRef = (0, _react.useRef)(isOpen);

  var _useState = (0, _react.useState)({}),
      _useState2 = _slicedToArray(_useState, 2),
      state = _useState2[0],
      setState = _useState2[1];

  /// USEEFFECT ///////////////////////////////////////////////////////////////
  /// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -


  (0, _react.useEffect)(function () {
    var TEMPLATE = UDATA.AppState('TEMPLATE');
    var SESSION = UDATA.AppState('SESSION');
    var NCDATA = UDATA.AppState('NCDATA');
    setState({
      nodeDefs: TEMPLATE.nodeDefs,
      nodes: NCDATA.nodes,
      disableEdit: false,
      isLocked: !SESSION.isValid
    });

    UDATA.OnAppStateChange('FILTEREDNCDATA', urstate_FILTEREDNCDATA);
    UDATA.OnAppStateChange('SESSION', urstate_SESSION);
    UDATA.OnAppStateChange('TEMPLATE', urstate_TEMPLATE);
    return function () {
      UDATA.AppStateChangeOff('FILTEREDNCDATA', urstate_FILTEREDNCDATA);
      UDATA.AppStateChangeOff('SESSION', urstate_SESSION);
      UDATA.AppStateChangeOff('TEMPLATE', urstate_TEMPLATE);
    };
  }, []);

  (0, _react.useEffect)(function () {
    isOpenRef.current = isOpen;
  }, [isOpen]);

  /// UR HANDLERS /////////////////////////////////////////////////////////////
  /// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  /// FILTEREDNCDATA is the reduced list of nodes, not ALL nodes
  function urstate_FILTEREDNCDATA(data) {
    // skip update if not open
    if (!isOpenRef.current) return;

    if (data.nodes) {
      // If we're transitioning from "COLLAPSE" or "FOCUS" to "HILIGHT/FADE", then we
      // also need to add back in nodes that are not in filteredNodes
      // (because "COLLAPSE" and "FOCUS" removes nodes that are not matched)
      var FILTERDEFS = UDATA.AppState('FILTERDEFS');
      if (FILTERDEFS.filterAction === _FilterEnums2.default.ACTION.FADE) {
        // show ALL nodes
        var NCDATA = UDATA.AppState('NCDATA');
        setState(function (prevState) {
          return _extends({}, prevState, { nodes: NCDATA.nodes });
        });
      } else {
        setState(function (prevState) {
          return _extends({}, prevState, { nodes: data.nodes });
        });
      }
    }
  }
  /// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  function urstate_SESSION(decoded) {
    var isLocked = !decoded.isValid;
    if (isLocked === state.isLocked) {
      return;
    }
    setState(function (prevState) {
      return _extends({}, prevState, { isLocked: isLocked });
    });
  }
  /// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  function urstate_TEMPLATE(data) {
    setState(function (prevState) {
      return _extends({}, prevState, {
        nodeDefs: data.nodeDefs,
        selectedNodeColor: data.sourceColor,
        hilitedNodeColor: data.searchColor
      });
    });
  }

  /// COLUMN DEFINTION GENERATION /////////////////////////////////////////////
  /// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  function DeriveColumnDefs(incomingNodeDefs) {
    var nodeDefs = state.nodeDefs,
        disableEdit = state.disableEdit,
        isLocked = state.isLocked;

    var defs = incomingNodeDefs || nodeDefs;

    // Only include built in fields
    // Only include non-hidden fields
    // Only include non-provenance fields
    var attributeDefs = Object.keys(defs).filter(function (k) {
      return !_enum.BUILTIN_FIELDS_NODE.includes(k) && !defs[k].isProvenance && !defs[k].hidden;
    });
    var provenanceDefs = Object.keys(defs).filter(function (k) {
      return !_enum.BUILTIN_FIELDS_NODE.includes(k) && defs[k].isProvenance && !defs[k].hidden;
    });

    /// CLICK HANDLERS
    /// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    function ui_ClickViewNode(event, nodeId) {
      event.preventDefault();
      event.stopPropagation();
      UDATA.LocalCall('SOURCE_SELECT', { nodeIDs: [parseInt(nodeId)] });
    }
    /// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    function ui_ClickEditNode(event, nodeId) {
      event.preventDefault();
      event.stopPropagation();
      var nodeID = parseInt(nodeId);
      UDATA.LocalCall('SOURCE_SELECT', { nodeIDs: [nodeID] }).then(function () {
        if (DBG) console.error('NodeTable: Calling NODE_EDIT', nodeID);
        UDATA.LocalCall('NODE_EDIT', { nodeID: nodeID });
      });
    }
    /// RENDERERS
    /// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    function col_RenderViewOrEdit(key, tdata, coldef) {
      var value = tdata[key];
      return _react2.default.createElement(
        'div',
        null,
        !disableEdit && _react2.default.createElement(
          'button',
          {
            className: 'outline',
            type: 'button',
            'aria-label': 'View Node',
            onClick: function onClick(event) {
              return ui_ClickViewNode(event, value);
            }
          },
          _constant.ICON_VIEW
        ),
        !disableEdit && !isLocked && _react2.default.createElement(
          'button',
          {
            className: 'outline',
            type: 'button',
            'aria-label': 'Edit Node',
            onClick: function onClick(event) {
              return ui_ClickEditNode(event, value);
            }
          },
          _constant.ICON_PENCIL
        )
      );
    }
    /// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    // interface TTblNodeObject {
    //   id: String;
    //   label: String;
    // }
    function col_RenderNode(key, tdata, coldef) {
      var value = tdata[key];
      if (!value) return; // skip if not defined yet
      if (tdata.id === undefined) throw new Error('RenderNode: id is undefined. tdata=' + tdata);
      if (value === undefined) throw new Error('RenderNode: label is undefined. value=' + value);
      return _react2.default.createElement(
        'button',
        {
          className: 'outline',
          type: 'button',
          'aria-label': 'View ' + value + ' Node',
          onClick: function onClick(event) {
            return ui_ClickViewNode(event, tdata.id);
          }
        },
        _react2.default.createElement(
          'span',
          null,
          value
        )
      );
    }
    /// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    function col_RenderCommentBtn(key, tdata, coldef) {
      var value = tdata[key];
      return _react2.default.createElement(_URCommentVBtn2.default, { cref: value.cref });
    }
    /// CUSTOM SORTERS
    /// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    function col_SortCommentsByCount(key, tdata, order) {
      var sortedData = [].concat(_toConsumableArray(tdata)).sort(function (a, b) {
        if (!a[key].count) return 1; // Move undefined or '' to the bottom regardless of sort order
        if (!b[key].count) return -1; // Move undefined or '' the bottom regardless of sort order
        if (a[key].count < b[key].count) return order;
        if (a[key].count > b[key].count) return order * -1;
        return 0;
      });
      return sortedData;
    }
    /// COLUMN DEFINITIONS
    /// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    // column definitions for custom attributes
    // (built in columns are: view, degrees, label)
    var ATTRIBUTE_COLUMNDEFS = attributeDefs.map(function (key) {
      return {
        title: defs[key].displayLabel,
        type: defs[key].type,
        data: key
      };
    });
    var PROVENANCE_COLUMNDEFS = provenanceDefs.map(function (key) {
      return {
        title: defs[key].displayLabel,
        type: defs[key].type,
        data: key
      };
    });
    var COLUMNDEFS = [{
      title: '', // View/Edit
      data: 'id',
      type: defs['id'].type,
      width: 45, // in px
      renderer: col_RenderViewOrEdit,
      sortDisabled: true,
      tipDisabled: true
    }, {
      title: defs['degrees'].displayLabel,
      type: defs['degrees'].type,
      width: 50, // in px
      data: 'degrees'
    }, {
      title: defs['label'].displayLabel,
      type: 'text-case-insensitive',
      data: 'label',
      width: 200, // in px
      renderer: col_RenderNode
    }];
    if (defs['type'] && !defs['type'].hidden) {
      COLUMNDEFS.push({
        title: defs['type'].displayLabel,
        type: 'text-case-insensitive',
        width: 130, // in px
        data: 'type'
      });
    }
    COLUMNDEFS.push.apply(COLUMNDEFS, _toConsumableArray(ATTRIBUTE_COLUMNDEFS));
    COLUMNDEFS.push.apply(COLUMNDEFS, _toConsumableArray(PROVENANCE_COLUMNDEFS));
    // History
    if (defs['createdBy'] && !defs['createdBy'].hidden) COLUMNDEFS.push({
      title: defs['createdBy'].displayLabel,
      type: 'text-case-insensitive',
      width: 60, // in px
      data: 'createdBy'
    });
    if (defs['created'] && !defs['created'].hidden) COLUMNDEFS.push({
      title: defs['created'].displayLabel,
      type: 'timestamp-short',
      width: 60, // in px
      data: 'created'
    });
    if (defs['updatedBy'] && !defs['updatedBy'].hidden) COLUMNDEFS.push({
      title: defs['updatedBy'].displayLabel,
      type: 'text-case-insensitive',
      width: 60, // in px
      data: 'updatedBy'
    });
    if (defs['updated'] && !defs['updated'].hidden) COLUMNDEFS.push({
      title: defs['updated'].displayLabel,
      type: 'timestamp-short',
      width: 60, // in px
      data: 'updated'
    });
    // Comment is last
    COLUMNDEFS.push({
      title: ' ',
      data: 'commentVBtnDef',
      width: 40, // in px
      renderer: col_RenderCommentBtn,
      sorter: col_SortCommentsByCount,
      tipDisabled: true
    });
    return COLUMNDEFS;
  }

  /// TABLE DATA GENERATION ///////////////////////////////////////////////////
  /// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  function DeriveTableData(_ref2) {
    var nodeDefs = _ref2.nodeDefs,
        nodes = _ref2.nodes;

    // Only include built in fields
    // Only include non-hidden fields
    // Only include non-provenance fields

    var attributeDefs = Object.keys(nodeDefs).filter(function (k) {
      return !_enum.BUILTIN_FIELDS_NODE.includes(k) && !nodeDefs[k].hidden && !nodeDefs[k].isProvenance;
    });
    var provenanceDefs = Object.keys(nodeDefs).filter(function (k) {
      return nodeDefs[k].isProvenance;
    });

    return nodes.map(function (node, i) {
      var id = node.id,
          label = node.label,
          type = node.type,
          degrees = node.degrees;

      // custom attributes

      var attributes = {};
      attributeDefs.forEach(function (key, i) {
        var data = {};
        if (nodeDefs[key].type === 'markdown') {
          // for markdown:
          // a. provide the raw markdown string
          // b. provide the HTML string
          data.html = _ncUi2.default.Markdownify(node[key]);
          data.raw = node[key];
        } else if (nodeDefs[key].type === 'hdate') {
          data = node[key] && node[key].formattedDateString;
        } else if (nodeDefs[key].type === 'infoOrigin') {
          data = node[key] === undefined || node[key] === '' ? _ncUtils2.default.DeriveInfoOriginString(node.createdBy, node.meta ? node.meta.created : '') : node[key];
        } else data = node[key];
        attributes[key] = data;
      });

      // comment button definition
      var cref = _commentMgr2.default.GetNodeCREF(id);
      var commentCount = _commentMgr2.default.GetCommentCollectionCount(cref);
      var ccol = _commentMgr2.default.GetCommentCollection(cref) || {};
      var hasUnreadComments = ccol.hasUnreadComments;
      var selected = _commentMgr2.default.GetOpenComments(cref);
      var commentVBtnDef = {
        cref: cref,
        count: commentCount,
        hasUnreadComments: hasUnreadComments,
        selected: selected
      };

      // provenance
      var provenance = {};
      provenanceDefs.forEach(function (key, i) {
        var data = {};
        if (nodeDefs[key].type === 'markdown') {
          // for markdown:
          // a. provide the raw markdown string
          // b. provide the HTML string
          data.html = _ncUi2.default.Markdownify(node[key]);
          data.raw = node[key];
        } else if (nodeDefs[key].type === 'hdate') {
          data = node[key] && node[key].formattedDateString;
        } else if (nodeDefs[key].type === 'infoOrigin') {
          data = node[key] === undefined || node[key] === '' ? _ncUtils2.default.DeriveInfoOriginString(node.createdBy, node.meta ? node.meta.created : '') : node[key];
        } else data = node[key] || '';
        provenance[key] = data;
      });

      // history
      var history = {
        createdBy: node.createdBy,
        created: node.meta ? node.meta.created : '', // meta may not be defined when a new node is creatd
        updatedBy: node.updatedBy,
        updated: node.meta ? node.meta.updated : '' // meta may not be defined when a new node is creatd
      };

      return _extends({
        id: id,
        label: label,
        type: type,
        degrees: degrees
      }, attributes, {
        commentVBtnDef: commentVBtnDef
      }, provenance, history, {
        meta: {
          filteredTransparency: node.filteredTransparency
        }
      });
    });
  }

  /// COMPONENT RENDER ////////////////////////////////////////////////////////
  /// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  if (state.nodes === undefined) return 'loading...waiting for nodes ' + state.nodes;
  if (state.nodeDefs === undefined) return 'loading...waiting for nodeDefs ' + state.nodeDefs;

  var COLUMNDEFS = DeriveColumnDefs();
  var TABLEDATA = DeriveTableData({ nodeDefs: state.nodeDefs, nodes: state.nodes });
  return _react2.default.createElement(
    'div',
    { id: 'NCNodeTable' },
    _react2.default.createElement(_URTable2.default, { isOpen: isOpenRef.current, data: TABLEDATA, columns: COLUMNDEFS })
  );
}

/// EXPORT REACT COMPONENT ////////////////////////////////////////////////////
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
exports.default = NCNodeTable;
});

require.register("view/netcreate/components/NCSearch.jsx", function(exports, require, module) {
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/*//////////////////////////////// ABOUT \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\*\

  Prototype Simple NetCreate Search Field

  Built for Version 2.0 ITEST.

  Provides a:
  * Search Field
  * "Add New Node" button
  * Autosuggest highlighter

  Features
  * During node/edge edit, allow search, but not new node creation

  USAGE

    <NCSearch />

\*\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ * //////////////////////////////////////*/

var React = require('react');
var UNISYS = require('unisys/client');
var NCAutoSuggest = require('./NCAutoSuggest');

/// CONSTANTS & DECLARATIONS //////////////////////////////////////////////////
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
var DBG = false;
var PR = 'NCSearch';

/// REACT COMPONENT ///////////////////////////////////////////////////////////
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/// export a class object for consumption by brunch/require

var NCSearch = function (_UNISYS$Component) {
  _inherits(NCSearch, _UNISYS$Component);

  function NCSearch(props) {
    _classCallCheck(this, NCSearch);

    var _this = _possibleConstructorReturn(this, (NCSearch.__proto__ || Object.getPrototypeOf(NCSearch)).call(this, props));

    _this.state = {
      isLoggedIn: false,
      uNodeOrEdgeBeingEdited: false,
      uIsLockedByComment: false,
      value: ''
    }; // initialized on componentDidMount and clearSelection

    _this.UpdateSession = _this.UpdateSession.bind(_this);
    _this.urstate_LOCKSTATE = _this.urstate_LOCKSTATE.bind(_this);
    _this.UIOnChange = _this.UIOnChange.bind(_this);
    _this.UIOnSelect = _this.UIOnSelect.bind(_this);
    _this.UINewNode = _this.UINewNode.bind(_this);

    /// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    /// REGISTER LISTENERS
    _this.OnAppStateChange('SESSION', _this.UpdateSession);
    _this.OnAppStateChange('LOCKSTATE', _this.urstate_LOCKSTATE);
    return _this;
  }

  _createClass(NCSearch, [{
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      this.AppStateChangeOff('SESSION', this.UpdateSession);
      this.AppStateChangeOff('LOCKSTATE', this.urstate_LOCKSTATE);
    }

    /**
     * Handle change in SESSION data
     * SESSION is called by SessionShell when the ID changes
     * set system-wide. data: { classId, projId, hashedId, groupId, isValid }
     * Called both by componentWillMount() and AppStateChange handler.
     * The 'SESSION' state change is triggered in two places in SessionShell during
     * its handleChange() when active typing is occuring, and also during
     * SessionShell.componentWillMount()
     */

  }, {
    key: 'UpdateSession',
    value: function UpdateSession(decoded) {
      this.setState({ isLoggedIn: decoded.isValid });
    }
  }, {
    key: 'urstate_LOCKSTATE',
    value: function urstate_LOCKSTATE(LOCKSTATE) {
      this.setState({
        uNodeOrEdgeBeingEdited: LOCKSTATE.nodeOrEdgeBeingEdited
      });
      // DEPRECATED -- comment editing lock state is only relevant if you are editing your own comment
      //   this.setState({
      //   // uIsLockedByComment: LOCKSTATE.commentBeingEditedByMe  // NOT IMPLEMENTED
      // });
    }

    /**
     * The callback function (cb) is used to restore the selection point
     * otherwise the `value` state update will leave the cursor at the end of the field.
     */

  }, {
    key: 'UIOnChange',
    value: function UIOnChange(key, value, cb) {
      // Pass the input value (node label search string) to UDATA
      // which will in turn pass the searchLabel back to the SEARCH
      // state handler in the constructor, which will in turn set the state
      // of the input value to be passed on to AutoSuggest
      this.AppCall('SOURCE_SEARCH', { searchString: value });
      // Update current input value and restore the cursor position
      this.setState({ value: value }, function () {
        if (typeof cb === 'function') cb();
      });
    }
  }, {
    key: 'UIOnSelect',
    value: function UIOnSelect(key, value, id) {
      var _this2 = this;

      var isLoggedIn = this.state.isLoggedIn;
      // match existing vs create new

      this.setState({ value: value }, function () {
        if (id) {
          // open existing node
          _this2.AppCall('D3_SELECT_NODE', { nodeIDs: [id] });
        } else if (isLoggedIn) {
          // create a new node
          _this2.UINewNode();
        }
      }); // Enter will create a new node
    }
  }, {
    key: 'UINewNode',
    value: function UINewNode() {
      var _this3 = this;

      var value = this.state.value;

      var data = {};
      data.label = value;
      this.AppCall('NODE_CREATE', data).then(function (node) {
        _this3.AppCall('D3_SELECT_NODE', { nodeIDs: [node.id] }).then(function () {
          _this3.AppCall('NODE_EDIT', { nodeID: node.id });
        });
      });
    }

    /// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    /// MAIN RENDER
    ///

  }, {
    key: 'render',
    value: function render() {
      var _state = this.state,
          value = _state.value,
          isLoggedIn = _state.isLoggedIn,
          uNodeOrEdgeBeingEdited = _state.uNodeOrEdgeBeingEdited,
          uIsLockedByComment = _state.uIsLockedByComment;

      var newNodeBtnHidden = !isLoggedIn || uIsLockedByComment;
      var newNodeBtnDisabled = value === '' || uNodeOrEdgeBeingEdited;
      var key = 'search'; // used for search/source/target, placeholder for search
      return React.createElement(
        'div',
        { className: '--NCSearch ncsearch' },
        React.createElement(NCAutoSuggest, {
          parentKey: key,
          value: value,
          onChange: this.UIOnChange,
          onSelect: this.UIOnSelect
        }),
        React.createElement(
          'button',
          {
            hidden: newNodeBtnHidden,
            disabled: newNodeBtnDisabled,
            onClick: this.UINewNode,
            type: 'button'
          },
          'New Node'
        )
      );
    }
  }]);

  return NCSearch;
}(UNISYS.Component);

/// EXPORT REACT COMPONENT ////////////////////////////////////////////////////
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -


module.exports = NCSearch;
});

require.register("view/netcreate/components/NCTemplate.jsx", function(exports, require, module) {
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/* eslint-disable no-alert */
/*//////////////////////////////// ABOUT \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\*\

  NC Template Editor View
  (replaces `Template.jsx`)

  Displays a variety of tools to edit templates:
  * Edit Node Types
  * Edit Edge Types
  * Download Current Template
  * Create New Template
  * Import Template from File

  This is displayed on the More.jsx component/panel but can be moved
  anywhere.

  Templates can only be edited if:
  * There are no nodes or edges being edited
  * No one is trying to import data
  * There are no other templates being edited

  Conversely, if a Template is being edited, Import, Node and Edge editing
  will be disabled.

  ## BACKGROUND

    Template data is loaded by `server-database` DB.InitializeDatabase call.

\*\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ * //////////////////////////////////////*/

var React = require('react');
var UNISYS = require('unisys/client');

var _require = require('system/util/enum'),
    EDITORTYPE = _require.EDITORTYPE;

var TEMPLATE_MGR = require('../template-editor-mgr');
var LOCKMGR = require('../lock-mgr');
var SCHEMA = require('../template-schema');
var DATASTORE = require('system/datastore');

/// CONSTANTS & DECLARATIONS //////////////////////////////////////////////////
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
var DBG = false;

/// REACT COMPONENT ///////////////////////////////////////////////////////////
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

var NCTemplate = function (_UNISYS$Component) {
  _inherits(NCTemplate, _UNISYS$Component);

  function NCTemplate(props) {
    _classCallCheck(this, NCTemplate);

    var _this = _possibleConstructorReturn(this, (NCTemplate.__proto__ || Object.getPrototypeOf(NCTemplate)).call(this, props));

    _this.state = {
      disableEdit: false,
      isBeingEdited: false,
      editScope: undefined, // Determines whether the user is tring to edit the
      // template's root (everything in the template),
      // or just focused on a subsection: nodeTypeOptions,
      // edgeTypeOptions
      tomlfile: undefined,
      tomlfileStatus: '',
      tomlfileErrors: undefined,
      tomlfilename: 'loading...'
    };
    _this.urstate_LOCKSTATE = _this.urstate_LOCKSTATE.bind(_this);
    _this.loadEditor = _this.loadEditor.bind(_this);
    _this.disableOrigLabelFields = _this.disableOrigLabelFields.bind(_this);
    _this.releaseOpenEditor = _this.releaseOpenEditor.bind(_this);
    _this.onNewTemplate = _this.onNewTemplate.bind(_this);
    _this.onCurrentTemplateLoad = _this.onCurrentTemplateLoad.bind(_this);
    _this.onEditNodeTypes = _this.onEditNodeTypes.bind(_this);
    _this.onEditEdgeTypes = _this.onEditEdgeTypes.bind(_this);
    _this.onTOMLfileSelect = _this.onTOMLfileSelect.bind(_this);
    _this.onDownloadTemplate = _this.onDownloadTemplate.bind(_this);
    _this.onSaveChanges = _this.onSaveChanges.bind(_this);
    _this.onCancelEdit = _this.onCancelEdit.bind(_this);

    _this.OnAppStateChange('LOCKSTATE', _this.urstate_LOCKSTATE);
    return _this;
  } // constructor

  _createClass(NCTemplate, [{
    key: 'componentDidMount',
    value: function componentDidMount() {
      var _this2 = this;

      var LOCKSTATE = this.AppState('LOCKSTATE');
      this.urstate_LOCKSTATE(LOCKSTATE);
      DATASTORE.GetTemplateTOMLFileName().then(function (result) {
        _this2.setState({ tomlfilename: result.filename });
      });
    }
  }, {
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      this.releaseOpenEditor();
      this.AppStateChangeOff('LOCKSTATE', this.urstate_LOCKSTATE);
    }

    /// UI EVENT HANDLERS /////////////////////////////////////////////////////////
    /// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  }, {
    key: 'urstate_LOCKSTATE',
    value: function urstate_LOCKSTATE(LOCKSTATE) {
      // someone else might be editing a template or importing or editing node or edge
      var disableEdit = LOCKSTATE.templateBeingEdited || LOCKSTATE.importActive || LOCKSTATE.nodeOrEdgeBeingEdited;
      this.setState({ disableEdit: disableEdit });
    }

    /// METHODS /////////////////////////////////////////////////////////////////
    /// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    /**
     * Was Load JSON Editor
     * -- If schema is not defined, the default schema is used
     * -- If startval is not defined, an empty template created from the default
     *    schema is used.
     * @param {object} parms { schema, startval }
     * @param {function} cb - Callback function
     */

  }, {
    key: 'loadEditor',
    value: function loadEditor(parms, cb) {
      LOCKMGR.RequestEditLock(EDITORTYPE.TEMPLATE).then(function (data) {
        console.error('NCTemplate.loadEditor NOT IMPLEMENTED', data);
      });
    }

    // When editing Node or Edge Type Options, the original label field should be
    // disabled so they can't be edited
    // ClassName added in template-schema.GetTypeEditorSchema()

  }, {
    key: 'disableOrigLabelFields',
    value: function disableOrigLabelFields() {
      var origLabelFields = document.getElementsByClassName('disabledField');
      // origLabelFields is a HTMLCollection, not an array
      // FISHY FIX...is the use of arrow function here correct? The arrow function
      // arg 'f' is shadowing the 'const f' in the for...of...
      var _iteratorNormalCompletion = true;
      var _didIteratorError = false;
      var _iteratorError = undefined;

      try {
        for (var _iterator = origLabelFields[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
          var f = _step.value;
          (function (f) {
            return f.setAttribute('disabled', 'disabled');
          });
        }
      } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion && _iterator.return) {
            _iterator.return();
          }
        } finally {
          if (_didIteratorError) {
            throw _iteratorError;
          }
        }
      }
    }
  }, {
    key: 'releaseOpenEditor',
    value: function releaseOpenEditor() {
      LOCKMGR.RequestEditUnlock(EDITORTYPE.TEMPLATE);
    }
  }, {
    key: 'onNewTemplate',
    value: function onNewTemplate() {
      this.setState({ editScope: 'root', isBeingEdited: true });
      this.loadEditor(); // new blank template with default schema
    }
  }, {
    key: 'onCurrentTemplateLoad',
    value: function onCurrentTemplateLoad(e) {
      var _this3 = this;

      this.AppCall('EDIT_CURRENT_TEMPLATE') // nc-logic
      .then(function (result) {
        _this3.setState({ editScope: 'root', isBeingEdited: true });
        _this3.loadEditor({ startval: result.template });
      });
    }
  }, {
    key: 'onEditNodeTypes',
    value: function onEditNodeTypes() {
      var _this4 = this;

      // REVIEW: Once this is working we'll need to use lock-mgr to manage locking
      this.AppCall('EDIT_CURRENT_TEMPLATE') // nc-logic
      .then(function (result) {
        var schemaNodeTypeOptions = SCHEMA.NODETYPEOPTIONS;
        // Wrap options in custom Schema to show Delete management UI
        var nodeTypeEditorSchema = SCHEMA.GetTypeEditorSchema(schemaNodeTypeOptions);
        var startval = { options: result.template.nodeDefs.type.options };
        _this4.setState({ editScope: 'nodeTypeOptions', isBeingEdited: true });
        _this4.loadEditor({
          schema: nodeTypeEditorSchema,
          startval: startval
        }, function () {
          _this4.disableOrigLabelFields();
          // HACK: After a row is added, we need to also disable the newly added
          // "Label" field -- the new label should be added in the "Change To" field
          EDITOR.on('addRow', function (editor) {
            _this4.disableOrigLabelFields();
          });
        });
      });
    }
  }, {
    key: 'onEditEdgeTypes',
    value: function onEditEdgeTypes() {
      var _this5 = this;

      // REVIEW: Once this is working we'll need to use lock-mgr to manage locking
      this.AppCall('EDIT_CURRENT_TEMPLATE') // nc-logic
      .then(function (result) {
        var schemaEdgeTypeOptions = SCHEMA.EDGETYPEOPTIONS;
        // Wrap options in custom Schema to show Delete management UI
        var edgeTypeEditorSchema = SCHEMA.GetTypeEditorSchema(schemaEdgeTypeOptions);
        var startval = { options: result.template.edgeDefs.type.options };
        _this5.setState({ editScope: 'edgeTypeOptions', isBeingEdited: true });
        _this5.loadEditor({
          schema: edgeTypeEditorSchema,
          startval: startval
        }, function () {
          _this5.disableOrigLabelFields();
          // HACK: After a row is added, we need to also disable the newly added
          // "Label" field -- the new label should be added in the "Change To" field
          EDITOR.on('addRow', function (editor) {
            _this5.disableOrigLabelFields();
          });
        });
      });
    }
  }, {
    key: 'onTOMLfileSelect',
    value: function onTOMLfileSelect(e) {
      var _this6 = this;

      // import
      var tomlfile = e.target.files[0];
      TEMPLATE_MGR.ValidateTOMLFile({ tomlfile: tomlfile }).then(function (result) {
        if (result.isValid) {
          console.log('got template', result.templateJSON);
          _this6.onSaveChanges(result.templateJSON);
        } else {
          var errorMsg = result.error;
          _this6.setState({
            tomlfile: undefined,
            tomlfileStatus: 'Invalid template file!!!',
            tomlfileErrors: errorMsg
          });
          _this6.releaseOpenEditor();
        }
      });
    }
  }, {
    key: 'onDownloadTemplate',
    value: function onDownloadTemplate() {
      TEMPLATE_MGR.DownloadTemplate();
    }
  }, {
    key: 'onSaveChanges',
    value: function onSaveChanges(templateJSON) {
      var _this7 = this;

      TEMPLATE_MGR.SaveTemplateToFile(templateJSON).then(function (result) {
        console.error('onSaveChanges', result, templateJSON);
        if (!result.OK) {
          alert(result.info);
        } else {
          alert('Template Saved: ' + templateJSON.name);
          _this7.setState({ isBeingEdited: false });
        }
        _this7.releaseOpenEditor();
      });
    }
  }, {
    key: 'onCancelEdit',
    value: function onCancelEdit() {
      this.setState({ isBeingEdited: false });
      this.releaseOpenEditor();
    }

    /// REACT LIFECYCLE METHODS ///////////////////////////////////////////////////
    /// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  }, {
    key: 'render',
    value: function render() {
      var _state = this.state,
          disableEdit = _state.disableEdit,
          isBeingEdited = _state.isBeingEdited,
          tomlfile = _state.tomlfile,
          tomlfileStatus = _state.tomlfileStatus,
          tomlfileErrors = _state.tomlfileErrors,
          tomlfilename = _state.tomlfilename;

      var editorjsx = void 0;

      if (disableEdit && !isBeingEdited) {
        // Node or Edge is being edited, show disabled message
        editorjsx = React.createElement(
          'div',
          null,
          React.createElement(
            'p',
            null,
            React.createElement(
              'i',
              null,
              'Templates cannot be edited while someone is editing a node, edge, or template, or importing data.'
            )
          ),
          React.createElement(
            'p',
            null,
            React.createElement(
              'i',
              null,
              'Please finish editing and try again.'
            )
          )
        );
      } else {
        // OK to Edit, show edit buttons
        editorjsx = React.createElement(
          'div',
          { hidden: isBeingEdited },
          React.createElement(
            'p',
            null,
            React.createElement(
              'b',
              null,
              'PROCEED WITH CAUTION!'
            ),
            ': Editing templates will modify the data in your dataset and may leave your dataset in an unusable state. Only',
            ' ',
            React.createElement(
              'b',
              null,
              'expert users'
            ),
            ' who know how the data is set up should do this.'
          ),
          React.createElement(
            'div',
            {
              style: {
                display: 'grid',
                gridTemplateColumns: 'repeat(2, 1fr)',
                columnGap: '10px',
                rowGap: '5px'
              }
            },
            React.createElement(
              'i',
              { className: 'small text-muted' },
              'Edit Current Template Options'
            ),
            React.createElement('br', null),
            React.createElement(
              'button',
              { size: 'sm', onClick: this.onEditNodeTypes, disabled: true },
              'Edit Node Types'
            ),
            React.createElement(
              'button',
              { size: 'sm', onClick: this.onEditEdgeTypes, disabled: true },
              'Edit Edge Types'
            )
          ),
          React.createElement(
            'div',
            null,
            React.createElement(
              'div',
              { style: { color: 'red' } },
              '[Edit Node Types] and [Edit Edge Types] are currently disabled because JSON Editor has been deprecated. Stay tuned for return of that functionality.'
            ),
            React.createElement('p', null),
            React.createElement('p', null),
            React.createElement('hr', null),
            React.createElement('hr', null),
            React.createElement(
              'p',
              null,
              'ADVANCED USERS ONLY'
            ),
            React.createElement('p', null),
            React.createElement(
              'div',
              null,
              React.createElement(
                'i',
                { className: 'small text-muted' },
                'Import TOML template (replace existing template)'
              ),
              React.createElement('br', null),
              React.createElement(
                'label',
                null,
                React.createElement('input', {
                  type: 'file',
                  accept: 'text/toml',
                  id: 'tomlfileInput',
                  onChange: this.onTOMLfileSelect
                }),
                '\xA0',
                React.createElement(
                  'i',
                  null,
                  tomlfileStatus
                ),
                React.createElement('br', null),
                tomlfileErrors && React.createElement(
                  'span',
                  { style: { color: 'red' } },
                  tomlfileErrors
                )
              )
            ),
            React.createElement('p', null),
            React.createElement(
              'i',
              { className: 'small text-muted' },
              'Current Template'
            ),
            React.createElement('br', null),
            React.createElement(
              'button',
              { size: 'sm', onClick: this.onDownloadTemplate },
              'Download Current Template'
            ),
            React.createElement('p', null),
            React.createElement(
              'i',
              { className: 'small text-muted' },
              'Create New Template'
            ),
            React.createElement('br', null),
            React.createElement(
              'button',
              { size: 'sm', onClick: this.onNewTemplate, disabled: true },
              'New Template'
            ),
            React.createElement('br', null),
            React.createElement(
              'div',
              { style: { color: 'red' } },
              '[New Template] is disabled because JSON Editor has been deprecated. Stay tuned for return of that functionality.'
            ),
            React.createElement('p', null)
          ),
          React.createElement('hr', null)
        );
      }
      return React.createElement(
        'div',
        {
          style: {
            backgroundColor: '#0003',
            padding: '10px 20px'
          }
        },
        React.createElement(
          'h4',
          null,
          'Template Editor'
        ),
        React.createElement(
          'p',
          null,
          React.createElement(
            'label',
            null,
            'Current Template File Name:'
          ),
          ' ',
          React.createElement(
            'code',
            null,
            tomlfilename
          )
        ),
        editorjsx,
        React.createElement(
          'div',
          { hidden: !isBeingEdited },
          React.createElement(
            'button',
            { onClick: this.onCancelEdit, size: 'sm' },
            'Cancel'
          ),
          '\xA0',
          React.createElement(
            'button',
            { onClick: this.onSaveChanges, size: 'sm', color: 'primary' },
            'Save Changes'
          ),
          React.createElement('hr', null)
        ),
        React.createElement('div', { id: 'editor', hidden: !isBeingEdited })
      );
    }
  }]);

  return NCTemplate;
}(UNISYS.Component);

/// EXPORT REACT COMPONENT ////////////////////////////////////////////////////
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -


module.exports = NCTemplate;
});

require.register("view/netcreate/components/NCUserTokens.jsx", function(exports, require, module) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }(); /*//////////////////////////////// ABOUT \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\*\



llows admins to define user tokens.

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         \*\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ * //////////////////////////////////////*/

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _client = require('unisys/client');

var _client2 = _interopRequireDefault(_client);

var _commonSession = require('unisys/common-session');

var _commonSession2 = _interopRequireDefault(_commonSession);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/// CONSTANTS & DECLARATIONS //////////////////////////////////////////////////
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/// Initialize UNISYS DATA LINK for react component
var UDATAOwner = { name: 'NCUserTokens' };
var UDATA = _client2.default.NewDataLink(UDATAOwner);
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
var DBG = false;

/// REACT COMPONENT ///////////////////////////////////////////////////////////
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/// export a class object for consumption by brunch/require
function NCUserTokens() {
  var DATASET = window.NC_CONFIG.dataset;

  var _useState = (0, _react.useState)({
    tokens: '',
    isShareable: false,
    classId: '',
    projId: '',
    templateSalt: undefined
  }),
      _useState2 = _slicedToArray(_useState, 2),
      state = _useState2[0],
      setState = _useState2[1];

  var ref_classId = (0, _react.useRef)(null);
  var ref_projId = (0, _react.useRef)(null);
  var ref_count = (0, _react.useRef)(null);

  (0, _react.useEffect)(function () {
    var TEMPLATE = UDATA.AppState('TEMPLATE');
    if (TEMPLATE && TEMPLATE.secretKey !== undefined) setState(function (prevState) {
      return _extends({}, prevState, {
        templateSalt: TEMPLATE.secretKey
      });
    });
  }, []);

  /// UTILITY FUNCTIONS /////////////////////////////////////////////////////////
  /// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  function validate(str) {
    return str.replace(/[^a-z0-9]/gi, '').slice(0, 12);
  }

  /// UI EVENT HANDLERS ///////////////////////////////////////////////////////
  /// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  function evt_ClassIdInputChange(event) {
    var newClassId = validate(event.target.value);
    setState(function (prevState) {
      return _extends({}, prevState, {
        classId: newClassId
      });
    });
  }
  /// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  function evt_ProjIdInputChange(event) {
    var newProjId = validate(event.target.value);
    setState(function (prevState) {
      return _extends({}, prevState, {
        projId: newProjId
      });
    });
  }
  /// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  function evt_SetShareable(event) {
    var isChecked = event.target.checked;
    setState(function (prevState) {
      return _extends({}, prevState, {
        isShareable: isChecked,
        tokens: ''
      });
    });
  }
  /// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  function evt_MakeTokens() {
    var clsId = ref_classId.current.value;
    var projId = ref_projId.current.value;
    var numGroups = parseInt(ref_count.current.value);
    var result = MakeTokens(clsId, projId, numGroups);
    setState(function (prevState) {
      return _extends({}, prevState, {
        tokens: result
      });
    });
  }
  /// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  /** Generates a list of tokens using the NetCreate common-session module
   *  REVIEW: Requiring a module from the secondary netcreate-2018 repo
   *  is a little iffy.
   *  @param {string} clsId - classId
   *  @param {string} projId - projectId
   *  @param {integer} numGroups - number of tokens to generate
   *  @return {string}
   */
  function MakeTokens(clsId, projId, numGroups) {
    // from nc-logic.js
    if (typeof clsId !== 'string') return 'args: str classId, str projId, int numGroups';
    if (typeof projId !== 'string') return 'args: str classId, str projId, int numGroups';
    // Not really relevant for nc-logic's
    // if (!state.isShareable && typeof templateSalt !== 'string')
    //   return 'args: str classId, str projId, int numGroups';
    if (clsId.length > 12) return 'classId arg1 should be 12 chars or less';
    if (projId.length > 12) return 'classId arg1 should be 12 chars or less';
    if (!Number.isInteger(numGroups)) return 'numGroups arg3 must be integer';
    if (numGroups < 1) return 'numGroups arg3 must be positive integer';

    // if templateSalt is not defined, then isShareable is implicitly true
    var isShareable = state.isShareable || !state.templateSalt;
    var salt = isShareable ? undefined : state.templateSalt;

    var out = isShareable ? 'Shareable ' : '';
    out += 'TOKEN LIST for class \'' + clsId + '\' project \'' + projId + '\' ';
    out += isShareable ? 'that can be used for any graph.' : 'templateSalt \'' + state.templateSalt + '\'';
    out += '\n\n';
    var pad = String(numGroups).length;
    for (var i = 1; i <= numGroups; i++) {
      var id = String(i);
      id = id.padStart(pad, '0');
      out += _commonSession2.default.MakeToken(clsId, projId, i, salt) + '\n';
    }
    return out;
  }

  /// COMPONENT RENDER ////////////////////////////////////////////////////////
  /// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  return _react2.default.createElement(
    'div',
    { id: 'NCUserTokens' },
    _react2.default.createElement(
      'h1',
      null,
      'Generate User Tokens'
    ),
    _react2.default.createElement(
      'p',
      null,
      'User tokens are used to identify a user as a node, edge, and comment author. They take the form ',
      _react2.default.createElement(
        'code',
        null,
        'CLASSID-PROJID-HASH'
      ),
      '. To generate a token, enter a class id, a project id, and number of tokens to generate. Then click \u201CGenerate Tokens\u201D.'
    ),
    _react2.default.createElement(
      'p',
      null,
      '\u201CClass ID\u201D and \u201CProject ID\u201D can be any short alphanumeric (no spaces or punctuation) string less than 12 characters.'
    ),
    _react2.default.createElement(
      'div',
      { className: 'form' },
      !state.isShareable && _react2.default.createElement(
        'label',
        { htmlFor: 'dataset' },
        'Graph'
      ),
      !state.isShareable && _react2.default.createElement('input', {
        id: 'dataset',
        placeholder: 'Dataset e.g. \'netcreate\'',
        defaultValue: DATASET,
        readOnly: true
      }),
      _react2.default.createElement(
        'label',
        { htmlFor: 'classid' },
        'Class ID'
      ),
      _react2.default.createElement('input', {
        id: 'classid',
        type: 'text',
        value: state.classId,
        onChange: evt_ClassIdInputChange,
        placeholder: 'Class ID e.g. \'PER1\'',
        ref: ref_classId
      }),
      _react2.default.createElement(
        'label',
        { htmlFor: 'projid' },
        'Project ID'
      ),
      _react2.default.createElement('input', {
        id: 'projid',
        type: 'text',
        value: state.projId,
        onChange: evt_ProjIdInputChange,
        placeholder: 'Project ID e.g. \'ROME\'',
        ref: ref_projId
      }),
      _react2.default.createElement(
        'label',
        { htmlFor: 'count' },
        'Number of Tokens'
      ),
      _react2.default.createElement('input', {
        id: 'count',
        type: 'number',
        placeholder: 'Num of tokens e.g. \'10\'',
        defaultValue: '10',
        ref: ref_count
      }),
      _react2.default.createElement('div', null),
      _react2.default.createElement(
        'button',
        { onClick: evt_MakeTokens, className: 'cat', role: 'button' },
        'Generate Tokens'
      ),
      _react2.default.createElement('div', null),
      _react2.default.createElement(
        'fieldset',
        null,
        _react2.default.createElement(
          'legend',
          null,
          'Advanced Options'
        ),
        !state.templateSalt && _react2.default.createElement(
          'span',
          { style: { color: 'red', gridColumn: 'span 2' } },
          'WARNING: Project template secretKey not defined. Tokens will be shareable for graphs without a secretKey.'
        ),
        _react2.default.createElement('input', {
          id: 'shareable',
          type: 'checkbox',
          checked: state.isShareable || !state.templateSalt,
          onChange: evt_SetShareable,
          disabled: !state.templateSalt
        }),
        _react2.default.createElement(
          'label',
          { htmlFor: 'shareable' },
          'Shareable -- Make tokens usable for ANY graph without a template secretKey.'
        )
      )
    ),
    _react2.default.createElement('br', null),
    _react2.default.createElement(
      'label',
      { htmlFor: 'tokenDisplay' },
      'Copy and share these tokens.'
    ),
    _react2.default.createElement('textarea', {
      id: 'tokenDisplay',
      className: 'no-drag',
      rows: '10',
      cols: '80',
      placeholder: 'Tokens will appear here...',
      readOnly: true,
      defaultValue: state.tokens
    })
  );
}

/// EXPORT REACT COMPONENT ////////////////////////////////////////////////////
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
exports.default = NCUserTokens;
});

require.register("view/netcreate/components/PopupPicker.jsx", function(exports, require, module) {
'use strict';

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _SwatchesPicker = require('./SwatchesPicker.jsx');

var _SwatchesPicker2 = _interopRequireDefault(_SwatchesPicker);

var _useeffectsLibrary = require('./useeffects-library.js');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/// eventually move this to settings manager
var PRESET_COLORS = ['#cd9323', '#1a53d8', '#9a2151', '#0d6416', '#8d2808'];

/// REACT COMPONENT ///////////////////////////////////////////////////////////
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
var PopupPicker = function PopupPicker(_ref) {
  var color = _ref.color,
      onChange = _ref.onChange,
      name = _ref.name;

  var popover = (0, _react.useRef)();

  var _useState = (0, _react.useState)(false),
      _useState2 = _slicedToArray(_useState, 2),
      isOpen = _useState2[0],
      toggle = _useState2[1];

  var close = (0, _react.useCallback)(function () {
    return toggle(false);
  }, []);
  (0, _useeffectsLibrary.useClickOutside)(popover, close);

  return _react2.default.createElement(
    'div',
    { className: 'picker' },
    _react2.default.createElement(
      'label',
      { htmlFor: name },
      '$',
      name
    ),
    _react2.default.createElement('div', {
      className: 'swatch',
      style: { backgroundColor: color },
      onClick: function onClick() {
        return toggle(true);
      }
    }),
    _react2.default.createElement('div', { className: 'tooltip' }),
    isOpen && _react2.default.createElement(
      'div',
      { className: 'popover', ref: popover },
      _react2.default.createElement(_SwatchesPicker2.default, {
        color: color,
        onChange: onChange,
        presetColors: PRESET_COLORS
      })
    )
  );
};

/// EXPORT REACT COMPONENT ////////////////////////////////////////////////////
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
module.exports = PopupPicker;
});

require.register("view/netcreate/components/SwatchesPicker.jsx", function(exports, require, module) {
'use strict';

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactColorful = require('react-colorful');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var SwatchesPicker = function SwatchesPicker(_ref) {
  var color = _ref.color,
      onChange = _ref.onChange,
      presetColors = _ref.presetColors;

  return _react2.default.createElement(
    'div',
    { className: 'picker' },
    _react2.default.createElement(_reactColorful.HexColorPicker, { color: color, onChange: onChange }),
    _react2.default.createElement(
      'div',
      { className: 'picker__swatches' },
      presetColors.map(function (presetColor) {
        return _react2.default.createElement('button', {
          key: presetColor,
          className: 'picker__swatch',
          style: { background: presetColor },
          onClick: function onClick() {
            return onChange(presetColor);
          }
        });
      })
    )
  );
};

/// EXPORT REACT COMPONENT ////////////////////////////////////////////////////
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
module.exports = SwatchesPicker;
});

require.register("view/netcreate/components/URButtonToggle.jsx", function(exports, require, module) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/// CONSTANTS & DECLARATIONS //////////////////////////////////////////////////
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
var DBG = false; /*//////////////////////////////// ABOUT \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\*\
                 
                   Generic Floating, Draggable, Closeable Window
                 
                   USE:
                 
                     <URButtonToggle
                       dialog={CMTSTATUS.dialog}
                     />
                 
                 \*\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ * //////////////////////////////////////*/

var PR = 'URButtonToggle';

/// REACT FUNCTIONAL COMPONENT ////////////////////////////////////////////////
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
function URButtonToggle(_ref) {
  var title = _ref.title,
      selected = _ref.selected,
      onClick = _ref.onClick,
      children = _ref.children,
      tabindex = _ref.tabindex;

  /// COMPONENT RENDER ////////////////////////////////////////////////////////
  /// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  return _react2.default.createElement(
    'button',
    {
      className: 'URButtonToggle icon ' + (selected ? 'selected' : ''),
      type: 'button',
      role: 'switch',
      'aria-label': title,
      'aria-checked': selected,
      onClick: onClick,
      tabIndex: tabindex
    },
    children
  );
}

/// EXPORT REACT COMPONENT ////////////////////////////////////////////////////
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
exports.default = URButtonToggle;
});

require.register("view/netcreate/components/URComment.jsx", function(exports, require, module) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }(); /*//////////////////////////////// ABOUT \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\*\

omment is a representation of an individual comment, used in the context
of a URCommentThread.



omment
cref={cref} // collection reference (e.g. node, edge, project)
cid={cvobj.comment_id} // comment id
uid={uid} // user id
key={cvobj.comment_id} // part of thread array


input cycle
omment handles updates from by the URCommentPrompt component.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               The data is stored locally until evt_SaveBtn is clicked, which then
calls comment-mgr.UpdateComment.
ata State management
comment-mgr saves the data to the database
and updates COMMENTVOJBS state, which triggers a re-render of the
ommentThread component.



var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _client = require('unisys/client');

var _client2 = _interopRequireDefault(_client);

var _commonNetmessageClass = require('unisys/common-netmessage-class');

var _commonNetmessageClass2 = _interopRequireDefault(_commonNetmessageClass);

var _commentMgr = require('../comment-mgr');

var _commentMgr2 = _interopRequireDefault(_commentMgr);

var _URCommentPrompt = require('./URCommentPrompt');

var _URCommentPrompt2 = _interopRequireDefault(_URCommentPrompt);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

/// CONSTANTS & DECLARATIONS //////////////////////////////////////////////////
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/// Initialize UNISYS DATA LINK for react component
var UDATAOwner = { name: 'URComment' };
var UDATA = _client2.default.NewDataLink(UDATAOwner);
/// Debug Flags
var DBG = false;
var PR = 'URComment';

/// REACT FUNCTIONAL COMPONENT ////////////////////////////////////////////////
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/** URComment renders a single comment in the context of a URCommentThread
 *  manager.
 *  @param {string} cref - Collection reference
 *  @param {string} cid - Comment ID
 *  @param {string} uid - User ID
 *  @returns {React.Component} - URComment
 */
function URComment(_ref) {
  var cref = _ref.cref,
      cid = _ref.cid,
      uid = _ref.uid;

  var _useState = (0, _react.useState)(null),
      _useState2 = _slicedToArray(_useState, 2),
      element = _useState2[0],
      setElement = _useState2[1];

  var _useState3 = (0, _react.useState)({
    id: undefined,
    commenter: '',
    createtime_string: '',
    modifytime_string: '',
    selected_comment_type: '',
    commenter_text: ['hah'],
    comment_error: '',
    uViewMode: _commentMgr2.default.VIEWMODE.VIEW,
    uIsSelected: false,
    uIsBeingEdited: false,
    uIsEditable: false,
    uIsDisabled: false,
    uAllowReply: false
  }),
      _useState4 = _slicedToArray(_useState3, 2),
      state = _useState4[0],
      setState = _useState4[1];

  /** Component Effect - initial comment viewobject on mount */


  (0, _react.useEffect)(function () {
    return c_LoadCommentVObj();
  }, [] // run once because no dependencies are declared
  );

  /** Component Effect - scroll component into view on mount */
  (0, _react.useEffect)(function () {
    if (element) element.scrollIntoView({ behavior: 'smooth' });
  }, [element]);

  /** Component Effect - updated comment */
  (0, _react.useEffect)(function () {
    var urstate_CMT_LOCKSTATE = function urstate_CMT_LOCKSTATE(data) {
      setState(function (prevState) {
        return _extends({}, prevState, {
          uIsDisabled: c_IsDisabled()
        });
      });
    };
    var urstate_UpdateCommentVObjs = function urstate_UpdateCommentVObjs() {
      return c_LoadCommentVObj();
    };

    // hook UNISYS state change and message handlers
    UDATA.OnAppStateChange('COMMENTVOBJS', urstate_UpdateCommentVObjs);
    UDATA.OnAppStateChange('CMTLOCKSTATE', urstate_CMT_LOCKSTATE);

    // cleanup methods for functional component unmount
    return function () {
      if (state.uIsBeingEdited) _commentMgr2.default.UnlockComment(cid);
      UDATA.AppStateChangeOff('COMMENTVOBJS', urstate_UpdateCommentVObjs);
      UDATA.AppStateChangeOff('CMTLOCKSTATE', urstate_CMT_LOCKSTATE);
    };
  }, [state.uIsBeingEdited]); // run when uIsBeingEdited changes

  /// COMPONENT HELPER METHODS ////////////////////////////////////////////////
  /// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  /** UI is disabled if either:
   *  - the comment is being edited by this user
   *  - someone else is editing this comment
   */
  function c_IsDisabled() {
    var LOCKSTATE = UDATA.AppState('LOCKSTATE');
    return LOCKSTATE.lockedComments.includes(cid) || _commentMgr2.default.GetCommentsAreBeingEdited();
  }

  /// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  /** Declare helper method to load viewdata from comment manager into the
   *  component state */
  function c_LoadCommentVObj() {
    // If the comment is being edited, skip the update, else we'd lose the edit
    if (state.uIsBeingEdited) {
      if (DBG) console.log('COMMENTVOBJS Update!  ' + cid + ' is being edited skipping update!!!');
      return;
    }

    var cvobj = _commentMgr2.default.GetCommentVObj(cref, cid);
    var comment = _commentMgr2.default.GetComment(cid);

    // When deleting, COMMENTVOBJS state change will trigger a load and render
    // before the component is unmounted.  So catch it and skip the state update.
    if (!cvobj || !comment) {
      console.log('c_LoadCommentVObj: comment or cvobj not found!  Usually because it has been deleted.');
      return;
    }

    // Error check: verify that comment types exist, if not, fall back gracefully to default type

    var _c_ValidateCommentTyp = c_ValidateCommentType(comment.comment_type),
        comment_error = _c_ValidateCommentTyp.comment_error,
        selected_comment_type = _c_ValidateCommentTyp.selected_comment_type;

    // set component state from retrieved data


    setState({
      // Data
      // REVIEW MEME uses `comment.id` and NC uses `comment.comment_id`
      id: comment.comment_id, // human readable "#xxx" id matching db id // MEME uses comment.id, matching pmcData id
      comment_id_parent: comment.comment_id_parent,
      commenter: _commentMgr2.default.GetUserName(comment.commenter_id),
      selected_comment_type: selected_comment_type,
      commenter_text: [].concat(_toConsumableArray(comment.commenter_text)),
      createtime_string: cvobj.createtime_string,
      modifytime_string: cvobj.modifytime_string,
      // Messaging
      comment_error: comment_error,
      // UI State
      uViewMode: cvobj.isBeingEdited ? _commentMgr2.default.VIEWMODE.EDIT : _commentMgr2.default.VIEWMODE.VIEW,
      uIsSelected: cvobj.isSelected,
      uIsBeingEdited: cvobj.isBeingEdited,
      uIsEditable: cvobj.isEditable,
      uAllowReply: cvobj.allowReply,
      uIsDisabled: c_IsDisabled()
    });

    // Lock edit upon creation of a new comment or a new reply
    if (cvobj.isBeingEdited) _commentMgr2.default.LockComment(comment.comment_id);
  }
  /// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  /** Validate selected comment type
   *  Make sure the selected comment type exists.  If not, show error.
   */
  function c_ValidateCommentType(selected_comment_type) {
    var comment_error = '';
    if (!_commentMgr2.default.GetCommentType(selected_comment_type)) {
      var defaultCommentTypeObject = _commentMgr2.default.GetDefaultCommentType();
      comment_error = 'Comment type "' + selected_comment_type + '" not found: Falling back to default  "' + defaultCommentTypeObject.label + '"';
      console.warn(comment_error);
      selected_comment_type = defaultCommentTypeObject.slug;
    }
    // set component state from retrieved data
    return { comment_error: comment_error, selected_comment_type: selected_comment_type };
  }
  /// COMPONENT UI HANDLERS ///////////////////////////////////////////////////
  /// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  /** handle edit button, which toggles the viewmode of this URComment */
  function evt_EditBtn() {
    var uViewMode = state.uViewMode === _commentMgr2.default.VIEWMODE.EDIT ? _commentMgr2.default.VIEWMODE.VIEW : _commentMgr2.default.VIEWMODE.EDIT;
    setState(function (prevState) {
      return _extends({}, prevState, {
        uViewMode: uViewMode
      });
    });
    _commentMgr2.default.UIEditComment(cid);
  }
  /// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  /** handle save button, which saves the state to comment manager.
   *  looks like there are some side effects being handled at the end */
  function evt_SaveBtn() {
    var selected_comment_type = state.selected_comment_type,
        commenter_text = state.commenter_text;

    var comment = _commentMgr2.default.GetComment(cid);
    comment.comment_type = selected_comment_type;
    comment.commenter_text = [].concat(_toConsumableArray(commenter_text)); // clone, not byref
    comment.commenter_id = uid;
    _commentMgr2.default.UISaveComment(comment);
    setState(function (prevState) {
      return _extends({}, prevState, {
        uViewMode: _commentMgr2.default.VIEWMODE.VIEW
      });
    });
  }
  /// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  /** handle reply button, which adds a new comment via comment manager,
   *  updating the thread data structure associated with URCommentThread */
  function evt_ReplyBtn() {
    var comment_id_parent = state.comment_id_parent;

    if (comment_id_parent === '') {
      // Reply to a root comment
      _commentMgr2.default.AddComment({
        cref: cref,
        comment_id_parent: cid,
        comment_id_previous: '',
        commenter_id: uid
      });
    } else {
      // Reply to a threaded comment
      _commentMgr2.default.AddComment({
        cref: cref,
        comment_id_parent: comment_id_parent,
        comment_id_previous: cid,
        commenter_id: uid
      });
    }
  }
  /// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  /** handle delete button, which removes the comment associated with this
   *  commment from the comment manager */
  function evt_DeleteBtn() {
    var id = state.id;

    _commentMgr2.default.RemoveComment({
      collection_ref: cref,
      id: id,
      comment_id: cid,
      uid: uid
    });
  }
  /// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  /** handle cancel button, which reverts the comment to its previous state,
   *  doing additional housekeeping to keep comment manager consistent
   *  If the comment is empty and it's a new comment, just remove it
   * */
  function evt_CancelBtn() {
    var commenter_text = state.commenter_text,
        id = state.id;


    var previouslyHadText = false;
    _commentMgr2.default.GetComment(cid).commenter_text.forEach(function (t) {
      if (t !== '') previouslyHadText = true;
    });

    if (previouslyHadText) {
      // revert to previous text
      _commentMgr2.default.UICancelComment(cid);
      var _comment = _commentMgr2.default.GetComment(cid);
      setState(function (prevState) {
        return _extends({}, prevState, {
          modifytime_string: _comment.modifytime_string,
          selected_comment_type: _comment.comment_type,
          commenter_text: [].concat(_toConsumableArray(_comment.commenter_text)), // restore previous text clone, not by ref
          comment_error: '',
          uViewMode: _commentMgr2.default.VIEWMODE.VIEW
        });
      });
    } else {
      // Remove the temporary comment and unlock
      _commentMgr2.default.RemoveComment({
        collection_ref: cref,
        id: id,
        comment_id: cid,
        uid: uid,
        skipDialog: true
      });
      setState({
        commenter_text: [],
        uViewMode: _commentMgr2.default.VIEWMODE.VIEW
      });
    }

    return;
  }
  /// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  /** handle select button, which updates the comment type associated with this
   *  comment via comment manager */
  function evt_TypeSelector(event) {
    var selection = event.target.value;
    // Error check: verify that comment types exist, if not, fall back gracefully to default type

    var _c_ValidateCommentTyp2 = c_ValidateCommentType(selection),
        comment_error = _c_ValidateCommentTyp2.comment_error,
        selected_comment_type = _c_ValidateCommentTyp2.selected_comment_type;

    setState(function (prevState) {
      return _extends({}, prevState, {
        comment_error: comment_error,
        selected_comment_type: selected_comment_type
      });
    });
  }
  /// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  /** handle input update, which updates the text associated with this comment
   *  via comment manager */
  function evt_CommentText(index, event) {
    var commenter_text = state.commenter_text;

    commenter_text[index] = event.target.value;
    setState(function (prevState) {
      return _extends({}, prevState, {
        commenter_text: [].concat(_toConsumableArray(commenter_text))
      });
    });
  }
  /// COMPONENT RENDER ////////////////////////////////////////////////////////
  /// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  /** The URComment conditionally renders its display state based on several
   *  states:
   *  - isAdmin - read from commentmgr directly
   *  - state.uViewMode - "edit" or "view" mode of comment
   *  - state.uIsSelected - is current selected comment
   *  - state.uIsBeingEdited - is being live edited
   *  - state.uIsEditable - can be edited
   *  - state.uIsDisabled - is active/inactive
   */
  var commenter = state.commenter,
      selected_comment_type = state.selected_comment_type,
      commenter_text = state.commenter_text,
      createtime_string = state.createtime_string,
      modifytime_string = state.modifytime_string,
      comment_error = state.comment_error,
      uViewMode = state.uViewMode,
      uIsDisabled = state.uIsDisabled,
      uAllowReply = state.uAllowReply;


  var isAdmin = _commentMgr2.default.IsAdmin();
  var comment = _commentMgr2.default.GetComment(cid);
  var commentTypes = _commentMgr2.default.GetCommentTypes();

  if (!comment) {
    if (DBG) console.log('URComment rendering skipped because comment ' + cid + ' was removed');
    return '';
  }
  if (!commenter) return null; // not ready

  // TODO Allow admins
  var isAllowedToEditOwnComment = uid === comment.commenter_id;

  /// SUB COMPONENTS
  var EditBtn = _react2.default.createElement(
    'button',
    { className: 'outline small', onClick: evt_EditBtn, type: 'button' },
    'Edit'
  );
  var DeleteBtn = _react2.default.createElement(
    'button',
    { className: 'outline small danger', onClick: evt_DeleteBtn, type: 'button' },
    'Delete'
  );
  var SaveBtn = _react2.default.createElement(
    'button',
    { onClick: evt_SaveBtn, type: 'button' },
    'Save'
  );
  var ReplyBtn = uAllowReply ? _react2.default.createElement(
    'button',
    { onClick: evt_ReplyBtn, type: 'button' },
    'Reply'
  ) : _react2.default.createElement('div', null) // empty div to keep layout consistent
  ;
  var CancelBtn = _react2.default.createElement(
    'button',
    { className: 'secondary', onClick: evt_CancelBtn, type: 'button' },
    'Cancel'
  );
  var TypeSelector = _react2.default.createElement(
    'label',
    { className: 'commentTypeLabel' },
    'Select a comment type',
    _react2.default.createElement(
      'select',
      { value: selected_comment_type, onChange: evt_TypeSelector },
      [].concat(_toConsumableArray(commentTypes.entries())).map(function (type) {
        return _react2.default.createElement(
          'option',
          { key: type[0], value: type[0] },
          type[1].label
        );
      })
    )
  );
  var SelectedType = commentTypes.get(selected_comment_type);
  var SelectedTypeLabel = SelectedType ? SelectedType.label : 'Type not found';
  // Alternative three-dot menu approach to hide "Edit" and "Delete"
  // const UIOnEditMenuSelect = event => {
  //   switch (event.target.value) {
  //     case 'edit':
  //       evt_EditBtn();
  //       break;
  //     case 'delete':
  //       evt_DeleteBtn();
  //       break;
  //     default:
  //       break;
  //   }
  // };
  // const EditMenu = (
  //   <select className="editmenu" onChange={this.UIOnEditMenuSelect}>
  //     <option>...</option>
  //     <option value="edit">EDIT</option>
  //     <option value="delete">DELETE</option>
  //   </select>
  // );

  var cvobj = _commentMgr2.default.GetCommentVObj(cref, cid);

  var CommentComponent = void 0;
  if (uViewMode === _commentMgr2.default.VIEWMODE.EDIT) {
    // EDIT mode
    CommentComponent = _react2.default.createElement(
      'div',
      {
        id: cid,
        ref: setElement,
        className: 'comment ' + (comment.comment_isMarkedDeleted && 'deleted'),
        onMouseDown: function onMouseDown(e) {
          return e.stopPropagation();
        }
      },
      _react2.default.createElement(
        'div',
        null,
        _react2.default.createElement(
          'div',
          { className: 'commenter' },
          commenter
        ),
        _react2.default.createElement(
          'div',
          { className: 'date' },
          modifytime_string || createtime_string
        )
      ),
      _react2.default.createElement(
        'div',
        null,
        _react2.default.createElement(
          'div',
          { className: 'commentTypeBar' },
          _react2.default.createElement(
            'div',
            { className: 'commentTypeLabel' },
            TypeSelector
          ),
          _react2.default.createElement(
            'div',
            { className: 'commentId' },
            '#',
            comment.comment_id
          )
        ),
        _react2.default.createElement(_URCommentPrompt2.default, {
          cref: cref,
          commentType: selected_comment_type,
          commenterText: commenter_text,
          isMarkedDeleted: comment.comment_isMarkedDeleted,
          isMarkedRead: cvobj.isMarkedRead,
          viewMode: _commentMgr2.default.VIEWMODE.EDIT,
          onChange: evt_CommentText,
          errorMessage: comment_error
        }),
        _react2.default.createElement(
          'div',
          { className: 'editbar' },
          CancelBtn,
          SaveBtn
        )
      )
    );
  } else {
    // VIEW mode
    CommentComponent = _react2.default.createElement(
      'div',
      {
        id: cid,
        ref: setElement,
        className: 'comment ' + (comment.comment_isMarkedDeleted ? 'deleted' : '') + ' ' + (cvobj.isMarkedRead ? '' : 'unread'),
        tabIndex: '0'
      },
      _react2.default.createElement(
        'div',
        null,
        _react2.default.createElement(
          'div',
          { className: 'commenter' },
          commenter
        ),
        _react2.default.createElement(
          'div',
          { className: 'date' },
          modifytime_string || createtime_string
        )
      ),
      _react2.default.createElement(
        'div',
        null,
        _react2.default.createElement(
          'div',
          { className: 'commentTypeBar' },
          _react2.default.createElement(
            'div',
            { className: 'commentTypeLabel' },
            _react2.default.createElement(
              'span',
              { className: 'date' },
              'TYPE: '
            ),
            _react2.default.createElement(
              'span',
              { className: 'type' },
              SelectedTypeLabel
            )
          ),
          _react2.default.createElement(
            'div',
            { className: 'commentId' },
            '#',
            comment.comment_id
          )
        ),
        _react2.default.createElement(_URCommentPrompt2.default, {
          cref: cref,
          commentType: selected_comment_type,
          commenterText: commenter_text,
          isMarkedDeleted: comment.comment_isMarkedDeleted,
          isMarkedRead: cvobj.isMarkedRead,
          viewMode: _commentMgr2.default.VIEWMODE.VIEW,
          errorMessage: comment_error
        }),
        uid && !uIsDisabled && _react2.default.createElement(
          'div',
          { className: 'commentbar' },
          !comment.comment_isMarkedDeleted && ReplyBtn,
          isAllowedToEditOwnComment && !comment.comment_isMarkedDeleted && EditBtn || _react2.default.createElement('div', null),
          (isAllowedToEditOwnComment && !comment.comment_isMarkedDeleted || isAdmin) && DeleteBtn || _react2.default.createElement('div', null)
        )
      )
    );
  }
  // Simple show threads -- if comment has a parent, indent it
  return cvobj.level > 0 ? _react2.default.createElement(
    'div',
    { className: 'commentIndented' },
    CommentComponent
  ) : CommentComponent;
}

/// EXPORT REACT COMPONENT ////////////////////////////////////////////////////
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
exports.default = URComment;
});

require.register("view/netcreate/components/URCommentCollectionMgr.jsx", function(exports, require, module) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }(); /*//////////////////////////////// ABOUT \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\*\

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           URCommentCollectionMgr

omment collection components are dynamically created and destroyed in the
as the user requests opening and closing comment collection windows.
he URCommentCollectionMgr handles the insertion and removal of these
components.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           UR MESSAGES
{cref, position}
{cref}




ommentCollectionMgr message={message} handleMessageUpdate/>



riginally, URCommentBtn were designed to handle comment opening
in Net.Create from two types componets: nodes/edges and
odeTables/EdgeTables.  Since the requests could come
from different components, we had to keep track of which component
was requesting the opening, so they could close the corresponding
comment.  In order to do this, we used a reference that combined
the comment id reference (collection reference, or cref)
with a unique user interface id (uuiid).

doesn't need that so we simply use `cref` as the
comment id.

hat simplifies the comment references, but there was a second
challenge:

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           Since the SVG props and mechanisms are NOT react components, we
cannot use URCommentBtn to manage opening and editing comments.
oreover, URCommentBtns opened inside Evidence Links are embedded
inside the Evidence Library and comments created inside the library
end up hidden due to layers of overflow divs.

o get around this, URCommentCollectionMgr essentially replaces the
functionality of URCommentBtn with three pieces, acting as a middle
man and breaking out the...
visual display    -- URCommentSVGBtn
click requests -- URCommentVBtn
thread opening / closing requests -- URCommentCollectionMgr
into different functions handled by different components.



// import UR from '../../../system/ursys';
// const STATE = require('../lib/client-state');

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _client = require('unisys/client');

var _client2 = _interopRequireDefault(_client);

var _commentMgr = require('../comment-mgr');

var _commentMgr2 = _interopRequireDefault(_commentMgr);

var _URCommentThread = require('./URCommentThread');

var _URCommentThread2 = _interopRequireDefault(_URCommentThread);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

/// CONSTANTS & DECLARATIONS //////////////////////////////////////////////////
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
var DBG = true;
var PR = 'URCommentCollectionMgr';

var UDATAOwner = { name: 'URCommentCollectionMgr' };
var UDATA = _client2.default.NewDataLink(UDATAOwner);

/// REACT FUNCTIONAL COMPONENT ////////////////////////////////////////////////
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
function URCommentCollectionMgr(props) {
  var uid = _commentMgr2.default.GetCurrentUserId();

  var _useState = (0, _react.useState)([]),
      _useState2 = _slicedToArray(_useState, 2),
      cmtBtns = _useState2[0],
      setCmtBtns = _useState2[1];

  var _useState3 = (0, _react.useState)(0),
      _useState4 = _slicedToArray(_useState3, 2),
      dummy = _useState4[0],
      setDummy = _useState4[1]; // Dummy state variable to force update

  /** Component Effect - register listeners on mount */


  (0, _react.useEffect)(function () {
    UDATA.OnAppStateChange('COMMENTVOBJS', redraw, UDATAOwner);
    UDATA.HandleMessage('CMT_COLLECTION_SHOW', urmsg_COLLECTION_SHOW);
    UDATA.HandleMessage('CMT_COLLECTION_HIDE', urmsg_COLLECTION_HIDE);
    UDATA.HandleMessage('CMT_COLLECTION_HIDE_ALL', urmsg_COLLECTION_HIDE_ALL);

    return function () {
      UDATA.AppStateChangeOff('COMMENTVOBJS', redraw);
      UDATA.UnhandleMessage('CMT_COLLECTION_SHOW', urmsg_COLLECTION_SHOW);
      UDATA.UnhandleMessage('CMT_COLLECTION_HIDE', urmsg_COLLECTION_HIDE);
      UDATA.UnhandleMessage('CMT_COLLECTION_HIDE_ALL', urmsg_COLLECTION_HIDE_ALL);
    };
  }, []);

  /// COMPONENT HELPER METHODS ////////////////////////////////////////////////
  /// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  /// UR HANDLERS /////////////////////////////////////////////////////////////
  /// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  function redraw(data) {
    // This is necessary to force a re-render of the threads
    // when the comment collection changes on the net
    // especially when a new comment is added.
    setDummy(function (dummy) {
      return dummy + 1;
    }); // Trigger re-render
  }
  /// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  /**
   * Handle urmsg_COLLECTION_SHOW message
   * 1. Register the button, and
   * 2. Open the URCommentBtn
   * @param {Object} data
   * @param {string} data.cref - Collection reference
   * @param {Object} data.position - Position of the button
   */
  function urmsg_COLLECTION_SHOW(data) {
    if (DBG) console.log(PR, 'CMT_COLLECTION_SHOW', data);
    setCmtBtns(function (prevBtns) {
      return [].concat(_toConsumableArray(prevBtns), [data]);
    });
  }
  /// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  function urmsg_COLLECTION_HIDE(data) {
    if (DBG) console.log(PR, 'CMT_COLLECTION_HIDE', data);
    setCmtBtns(function (prevBtns) {
      return prevBtns.filter(function (btn) {
        return btn.cref !== data.cref;
      });
    });
  }
  /// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  function urmsg_COLLECTION_HIDE_ALL(data) {
    if (DBG) console.log(PR, 'CMT_COLLECTION_HIDE_ALL', data);
    setCmtBtns([]);
  }

  /// COMPONENT RENDER ////////////////////////////////////////////////////////
  /// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  return _react2.default.createElement(
    'div',
    { className: 'URCommentCollectionMgr' },
    cmtBtns.map(function (btn) {
      return _react2.default.createElement(_URCommentThread2.default, {
        key: btn.cref,
        uiref: btn.cref,
        cref: btn.cref,
        uid: uid,
        x: btn.position.x,
        y: btn.position.y
      });
    })
  );
}

/// EXPORT REACT COMPONENT ////////////////////////////////////////////////////
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
exports.default = URCommentCollectionMgr;
});

require.register("view/netcreate/components/URCommentPrompt.jsx", function(exports, require, module) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _commentMgr = require('../comment-mgr');

var _commentMgr2 = _interopRequireDefault(_commentMgr);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/// CONSTANTS & DECLARATIONS //////////////////////////////////////////////////
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/// Debug Flags
/*//////////////////////////////// ABOUT \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\*\

  URCommentPrompt

  In edit mode, displays input widgets for entering prompts.
  In view mode, displays static comment prompt.
  A comment can contain one or more comment prompts.
  Each prompt can use a different prompt format.

  PROMPT FORMATS:
    - text
    - dropdown
    - checkbox
    - likert
    - radio
    - discrete-slider

  Prompt formats use exact `text` matching to determine the selected item,
  not an index.  So if you change the label on the prompt type, you will
  have to update the selection as well.  The rationale for this is that
  we want the comment database data to be as human-readable as possible.
  Otherwise comment data would mostly be a series of indices that you
  would have to back-match:
    - dropdown
    - likert
    - radio
  The exceptions are:
    - checkbox -- matches `text` within a \n-delimited string
    - discrete-slider -- matches based on the selected index value
                         In this case, using the value makes sense
                         because the saved data is a number.

  This uses a lot of props because it really is a helper componnent for
  URComment.  The current state is maintained in URComment, but during
  edit, input updates are stored temporarily in this component.

  USE:

    <URCommentPrompt
      cref={cref}  // collection reference (e.g. node, edge, project)
      commentType={comment_type} // currently selected comment type, not stored comment.comment_type
      commenterText={commenter_text}
      isMarkedDeleted={comment.comment_isMarkedDeleted}
      isMarkedRead={cvobj.isMarkedRead}
      viewMode={uViewMode}
      onChange={this.UIOnInputUpdate}
      errorMessage={comment_error}
    />

    We use props (especially `commenter_text`) here because URComment stores the
    current interim state of the comment text during editing.  The `commment`
    object stores the previous saved state.

\*\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ * //////////////////////////////////////*/

var DBG = false;
var PR = 'URCommentPrompt';
/// Constants
var CHECKBOX_DELIMITER = /\n/;

/// REACT FUNCTIONAL COMPONENT ////////////////////////////////////////////////
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
function URCommentPrompt(_ref) {
  var cref = _ref.cref,
      commentType = _ref.commentType,
      commenterText = _ref.commenterText,
      isMarkedDeleted = _ref.isMarkedDeleted,
      isMarkedRead = _ref.isMarkedRead,
      viewMode = _ref.viewMode,
      _onChange = _ref.onChange,
      errorMessage = _ref.errorMessage;

  var commentTypes = _commentMgr2.default.GetCommentTypes();

  /** Component Effect - set the focus to the first empty field on
   *  entering edit mode, or selecting a new comment type
   */
  (0, _react.useEffect)(function () {
    if (viewMode === _commentMgr2.default.VIEWMODE.EDIT) {
      // find the first empty `text` prompt
      var foundIndex = -1;
      commentTypes.get(commentType).prompts.find(function (prompt, promptIndex) {
        if (prompt.format === 'text' && !commenterText[promptIndex]) {
          foundIndex = promptIndex;
          return true;
        }
      });
      // set focus to the found empty 'text' prompt
      var foundTextArea = document.getElementById(u_TextareaId(cref, foundIndex));
      if (foundTextArea) foundTextArea.focus();
    }
  }, [viewMode, commentType]);

  /// UTILITIES ///////////////////////////////////////////////////////////////
  /// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  /** Used for radio buttons to indicate that there is nothing selected
   * @param {string} commenterTextStr current radio button value
   * @returns {boolean} true if the string is empty
   */
  function u_IsEmpty(commenterTextStr) {
    return commenterTextStr === undefined || commenterTextStr === null || commenterTextStr === '';
  }
  /// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  /** Converts `index` into "prompt-<index>" for use in HTML id attributes */
  function u_TextareaId(cref, index) {
    return 'prompt-' + cref + '-' + index;
  }
  /// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  /**
   * Converts "Apple Pie\nApple Fritter" into ["Apple Pie", "Apple Fritter"]
   * @param {string} commenterTextStr newline delimited string, e.g. "Apple Pie\nApple Fritter"
   * @returns {string[]} updated commenter text
   */
  function u_SplitCheckboxCommentText(commenterTextStr) {
    if (!commenterTextStr) return [];
    return commenterTextStr.split(CHECKBOX_DELIMITER);
  }
  /// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  /**
   * Converts a selection 0-based index into a stacked discrete slider string
   * to save as comment text, e.g. 2 becomes `★★★`
   * Each option can have a different value
   * @param {number} index the selected item index (0-based)
   * @param {string[]} options e.g.  ['💙', '💚', '💛', '🧡', '🩷']
   * @returns {string} e.g. 2 returns '💙💚💛'
   */
  function u_SelectedIndex2CommentText(index, options) {
    return options.map(function (o, i) {
      return i <= index ? o : '';
    }).join('');
  }

  /// COMPONENT UI HANDLERS ///////////////////////////////////////////////////
  /// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  /**
   * handles checkbox changing by
   * 1. combining all checkbox items into a single newline-delimited string
   * 2. calling onChange handler with derived data for checkboxes
   * e.g. "Apple\nBanana"
   * @param {number} promptIndex index pointing to the currently active prompt
   * @param {number} optionIndex index of the checkbox option item
   * @param {Object} options all of the checkbox options
   * @param {Object} event
   */
  function evt_OnCheck(promptIndex, optionIndex, options, event) {
    // e.g. selectedCheckboxes =  ["Apple Pie", "Apple Fritter"]
    var selectedCheckboxes = u_SplitCheckboxCommentText(commenterText[promptIndex]);
    var items = [];
    options.forEach(function (o, index) {
      if (optionIndex === index) {
        // handle the current selection
        if (event.target.checked) items[index] = o;else items[index] = '';
      } else {
        // handle previous selections
        if (selectedCheckboxes.includes(o)) items[index] = o;else items[index] = '';
      }
    });
    event.target.value = items.join('\n');
    _onChange(promptIndex, event);
  }

  /// COMPONENT RENDER ////////////////////////////////////////////////////////
  /// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  /** URCommentPrompt renders its display state based on:
   *  - viewMode -- "edit" or "view" mode
   */
  var RenderEditMode = function RenderEditMode() {
    return commentTypes.get(commentType).prompts.map(function (prompt, promptIndex) {
      var inputJSX = void 0;
      switch (prompt.format) {
        case 'text':
          inputJSX = _react2.default.createElement('textarea', {
            id: u_TextareaId(cref, promptIndex),
            autoFocus: true,
            onChange: function onChange(event) {
              return _onChange(promptIndex, event);
            },
            value: commenterText[promptIndex] || ''
          });
          break;
        case 'dropdown':
          if (!prompt.options.includes(commenterText[promptIndex])) {
            // currently selected value does not match an item in the dropdown
            // fall back to the first item in the dropdown
            if (prompt.options.length > 0) commenterText[promptIndex] = prompt.options[0];else {
              console.warn('Dropdown for ' + commentType + ' has no options!  Check definition!');
              commenterText[promptIndex] = ''; // fall back to an empty string
            }
          }
          inputJSX = _react2.default.createElement(
            'select',
            {
              value: commenterText[promptIndex] || '',
              onChange: function onChange(event) {
                return _onChange(promptIndex, event);
              }
            },
            prompt.options.map(function (option, index) {
              return _react2.default.createElement(
                'option',
                { key: index, value: option },
                option
              );
            })
          );
          break;
        case 'checkbox':
          {
            // converts commment text into ["Apple", "Banana"]
            var selectedCheckboxes = u_SplitCheckboxCommentText(commenterText[promptIndex]);
            inputJSX = _react2.default.createElement(
              'div',
              { className: 'prompt' },
              prompt.options.map(function (option, optionIndex) {
                return _react2.default.createElement(
                  'label',
                  { key: optionIndex },
                  _react2.default.createElement('input', {
                    type: 'checkbox',
                    value: option,
                    onChange: function onChange(event) {
                      return evt_OnCheck(promptIndex, optionIndex, prompt.options, event);
                    },
                    checked: selectedCheckboxes.includes(option)
                  }),
                  option
                );
              })
            );
            break;
          }
        case 'radio':
          inputJSX = _react2.default.createElement(
            'div',
            null,
            prompt.options.map(function (option, index) {
              return _react2.default.createElement(
                'label',
                { key: index },
                _react2.default.createElement('input', {
                  type: 'radio',
                  value: option,
                  onChange: function onChange(event) {
                    return _onChange(promptIndex, event);
                  },
                  checked: commenterText[promptIndex] === option
                }),
                option
              );
            })
          );
          break;
        case 'likert':
          inputJSX = _react2.default.createElement(
            'div',
            { className: 'prompt' },
            prompt.options.map(function (option, optionIndex) {
              return _react2.default.createElement(
                'button',
                {
                  key: optionIndex,
                  value: option,
                  className: commenterText[promptIndex] === option ? 'selected' : 'notselected',
                  onClick: function onClick(event) {
                    return _onChange(promptIndex, event);
                  }
                },
                option
              );
            })
          );
          break;
        case 'discrete-slider':
          inputJSX = _react2.default.createElement(
            'div',
            { className: 'prompt' },
            prompt.options.map(function (option, index) {
              return _react2.default.createElement(
                'button',
                {
                  key: index,
                  value: [index, u_SelectedIndex2CommentText(index, prompt.options)],
                  className: String(index) <= commenterText[promptIndex] ? 'selected' : 'notselected',
                  onClick: function onClick(event) {
                    return _onChange(promptIndex, event);
                  }
                },
                option
              );
            })
          );
          break;
        default:
          break;
      }
      return _react2.default.createElement(
        'div',
        { key: promptIndex },
        _react2.default.createElement(
          'div',
          { className: 'label' },
          prompt.prompt
        ),
        _react2.default.createElement(
          'div',
          { className: 'help' },
          prompt.help
        ),
        inputJSX,
        _react2.default.createElement(
          'div',
          { className: 'feedback' },
          prompt.feedback
        ),
        _react2.default.createElement(
          'div',
          { className: 'error' },
          errorMessage
        )
      );
    });
  };

  /// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  var RenderViewMode = function RenderViewMode() {
    var NOTHING_SELECTED = _react2.default.createElement(
      'span',
      { className: 'help' },
      '(nothing selected)'
    );
    if (isMarkedDeleted) return _react2.default.createElement(
      'div',
      { className: 'commenttext' },
      'DELETED'
    );
    return commentTypes.get(commentType).prompts.map(function (prompt, promptIndex) {
      var displayJSX = void 0;
      switch (prompt.format) {
        case 'text':
        case 'dropdown':
        case 'radio':
          displayJSX = _react2.default.createElement(
            'div',
            { className: 'commenttext' },
            !isMarkedDeleted && commenterText[promptIndex],
            u_IsEmpty(commenterText[promptIndex]) && NOTHING_SELECTED
          );
          break;
        case 'checkbox':
          {
            var selectedCheckboxes = u_SplitCheckboxCommentText(commenterText[promptIndex]);
            displayJSX = _react2.default.createElement(
              'div',
              { className: 'prompt' },
              prompt.options.map(function (option, optionIndex) {
                return _react2.default.createElement(
                  'label',
                  { key: optionIndex },
                  _react2.default.createElement('input', {
                    type: 'checkbox',
                    value: option,
                    checked: selectedCheckboxes.includes(option),
                    readOnly: true // React will emit warning if there isn't an onChange handler
                    , className: 'readonly' // css: class is necessary for styling
                    // css: `input[type='checkbox']:read-only` doesn't work -- it matches non-`readOnly` too
                    // css: `disabled` grays out the checkbox too much, use the css class to style
                  }),
                  option
                );
              })
            );
            break;
          }
        case 'likert':
          displayJSX = _react2.default.createElement(
            'div',
            { className: 'prompt' },
            prompt.options.map(function (option, index) {
              return _react2.default.createElement(
                'button',
                {
                  key: index,
                  value: option,
                  className: commenterText[promptIndex] === option ? 'selected' : 'notselected',
                  disabled: true
                },
                option
              );
            })
          );
          break;
        case 'discrete-slider':
          displayJSX = _react2.default.createElement(
            'div',
            { className: 'prompt' },
            prompt.options.map(function (option, index) {
              return _react2.default.createElement(
                'button',
                {
                  key: index,
                  value: option,
                  className: String(index) <= commenterText[promptIndex] ? 'selected' : 'notselected',
                  disabled: true
                },
                option
              );
            })
          );
          break;
        default:
          break;
      }

      return _react2.default.createElement(
        'div',
        { key: promptIndex, className: 'comment-item' },
        _react2.default.createElement(
          'div',
          { className: 'label' },
          prompt.prompt
        ),
        displayJSX,
        _react2.default.createElement(
          'div',
          { className: 'error' },
          errorMessage
        )
      );
    });
  };
  /// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  return viewMode === _commentMgr2.default.VIEWMODE.EDIT ? RenderEditMode() : RenderViewMode();
}

exports.default = URCommentPrompt;
});

require.register("view/netcreate/components/URCommentSVGBtn.jsx", function(exports, require, module) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }(); /*//////////////////////////////// ABOUT \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\*\
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         
ommentSVGBtn

purely visual button that uses SVG Symbols.
elies on props to render.


                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               <URCommentSVGBtn
uiref={cref}
count={countRepliesToMe}
hasUnreadComments={countRepliesToMe > 0}
hasReadComments={countRepliesToMe === 0}
selected={false}
disabled={false}
small={false}
onClick={evt_ExpandPanel}


sed by:
ommentStatus

isplays three visual states:
read/unread status
has unread comments (gold color)
all comments are read (gray color)
is open / selected (displaying comments)
the number of comments.

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         
nlike MEME's implementation, we do not use svgjs
we retain svgjs for documentation purposes only.



var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _commentMgr = require('../comment-mgr');

var _commentMgr2 = _interopRequireDefault(_commentMgr);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// MEME implementation
// import { SVG } from '@svgdotjs/svg.js'; // esm version // MEME implementation
// import './URComment.css'; // MEME implementation

/// REACT FUNCTIONAL COMPONENT ////////////////////////////////////////////////
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
function URCommentSVGBtn(_ref) {
  var uiref = _ref.uiref,
      count = _ref.count,
      hasUnreadComments = _ref.hasUnreadComments,
      hasReadComments = _ref.hasReadComments,
      selected = _ref.selected,
      disabled = _ref.disabled,
      small = _ref.small,
      onClick = _ref.onClick,
      _ref$ariaLabel = _ref.ariaLabel,
      ariaLabel = _ref$ariaLabel === undefined ? 'Comments (' + count + ')' : _ref$ariaLabel;

  // REVIEW: Remove?  not being used?
  var svgRef = (0, _react.useRef)(null);

  var _useState = (0, _react.useState)({
    label: '',
    css: '',
    svgClass: ''
  }),
      _useState2 = _slicedToArray(_useState, 2),
      state = _useState2[0],
      setState = _useState2[1];

  /// USEEFFECT ///////////////////////////////////////////////////////////////
  /// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -


  (0, _react.useEffect)(function () {
    // MEME implementation
    // const draw = SVG(svgRef.current);

    c_DrawCommentIcon();

    return function () {
      // MEME implementation
      // draw.remove();
    };
  }, []);

  (0, _react.useEffect)(function () {
    c_DrawCommentIcon();
  }, [count, hasUnreadComments, hasReadComments, selected]);

  /// COMPONENT HELPER METHODS ////////////////////////////////////////////////
  /// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  function c_DrawCommentIcon() {
    // css
    var css = ' ';
    if (hasUnreadComments) css += 'hasUnreadComments ';else if (hasReadComments) css += 'hasReadComments ';
    css += selected ? 'isOpen ' : '';
    css += disabled ? 'disabled ' : '';

    var commentCountLabel = count > 0 ? count : ' ';

    var SVGClass = 'svgcmt-unread';
    if (hasReadComments && !hasUnreadComments || count === '' || count === 0) {
      // it's possible to have both read and unread comments
      // if there's anything unread, we want to mark it unread
      if (selected) SVGClass = 'svgcmt-readSelected';else SVGClass = 'svgcmt-read-outlined'; // only vprops use non-outlined
    } else {
      // hasUnreadComments or no comments
      if (selected) SVGClass = 'svgcmt-unreadSelected';else SVGClass = 'svgcmt-unread';
    }

    setState({
      label: commentCountLabel,
      css: css,
      svgClass: SVGClass
    });

    // MEME implementation
    // const draw = SVG(svgRef.current);
    // draw.clear();
    // draw
    //   .group()
    //   .attr('class', svgDefKey)
    //   .add(CMTMGR.COMMENTICON)
    //   // .add(CMTMGR.COMMENTICON(draw).clone())
    //   // .add(SVGDEFS.get('comment').clone())
    //   .transform({
    //     translate: [4, 0], // center within 32,32
    //     origin: 'top left', // seems to default to 'center' if not specified
    //     scale: small ? 0.9 : 1.6
    //   });
  }

  /// COMPONENT RENDER ////////////////////////////////////////////////////////
  /// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  var size = small ? '24' : '32';
  return _react2.default.createElement(
    'button',
    {
      id: uiref,
      className: 'commentbtn' + state.css,
      onClick: onClick,
      disabled: disabled,
      type: 'button',
      role: 'switch',
      'aria-label': ariaLabel,
      'aria-checked': selected
    },
    _react2.default.createElement(
      'div',
      { className: 'comment-count' },
      state.label
    ),
    _react2.default.createElement(
      'svg',
      { width: size, height: size },
      _react2.default.createElement(
        'g',
        { className: state.svgClass },
        _commentMgr2.default.COMMENTICON
      )
    )
  );
}

/// EXPORT REACT COMPONENT ////////////////////////////////////////////////////
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
exports.default = URCommentSVGBtn;
});

require.register("view/netcreate/components/URCommentStatus.jsx", function(exports, require, module) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }(); /*//////////////////////////////// ABOUT \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\*\

ommentStatus displays a summary of new comments being added across the
network in the nav bar.  There are two views:
uiIsExpanded = false: A count of the most recent read and unread comments
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           - uiIsExpanded = true: The full list of the the most recent comments
n addition, there are two commands:
ark All Read" will mark all of the messages in the status list "read"
lose will close the status list

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           The comment status messages remain visible through the whole user session.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           Marking all messages as "read" will clear the status list.



ommentStatus message={message} handleMessageUpdate/>

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         \*\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ * //////////////////////////////////////*/

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _client = require('unisys/client');

var _client2 = _interopRequireDefault(_client);

var _commentMgr = require('../comment-mgr');

var _commentMgr2 = _interopRequireDefault(_commentMgr);

var _URCommentCollectionMgr = require('./URCommentCollectionMgr');

var _URCommentCollectionMgr2 = _interopRequireDefault(_URCommentCollectionMgr);

var _URCommentSVGBtn = require('./URCommentSVGBtn');

var _URCommentSVGBtn2 = _interopRequireDefault(_URCommentSVGBtn);

var _URDialog = require('./URDialog');

var _URDialog2 = _interopRequireDefault(_URDialog);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

/// CONSTANTS & DECLARATIONS //////////////////////////////////////////////////
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/// Initialize UNISYS DATA LINK for functional react component
var UDATAOwner = { name: 'URCommentStatus' };
var UDATA = _client2.default.NewDataLink(UDATAOwner);

/// Debug Flags
var DBG = false;
var PR = 'URCommentStatus';
/// Animation Timers
var AppearTimer = void 0;
var DisappearTimer = void 0;
var ResetTimer = void 0;

/// REACT FUNCTIONAL COMPONENT ////////////////////////////////////////////////
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/** URCommentStatus renders a summary of new comments in the nav bar.
 * @param {*} props currently not used
 * @returns
 */
function URCommentStatus(props) {
  var uid = _commentMgr2.default.GetCurrentUserId();

  var _useState = (0, _react.useState)({}),
      _useState2 = _slicedToArray(_useState, 2),
      CMTSTATUS = _useState2[0],
      setCMTSTATUS = _useState2[1];

  var _useState3 = (0, _react.useState)(''),
      _useState4 = _slicedToArray(_useState3, 2),
      message = _useState4[0],
      setMessage = _useState4[1];

  var _useState5 = (0, _react.useState)([]),
      _useState6 = _slicedToArray(_useState5, 2),
      messages = _useState6[0],
      setMessages = _useState6[1];

  var _useState7 = (0, _react.useState)(''),
      _useState8 = _slicedToArray(_useState7, 2),
      activeCSS = _useState8[0],
      setActiveCSS = _useState8[1];

  var _useState9 = (0, _react.useState)(false),
      _useState10 = _slicedToArray(_useState9, 2),
      uiIsExpanded = _useState10[0],
      setUiIsExpanded = _useState10[1];

  var _useState11 = (0, _react.useState)(0),
      _useState12 = _slicedToArray(_useState11, 2),
      dummy = _useState12[0],
      setDummy = _useState12[1]; // Dummy state variable to force update

  // const ref_commentbar = useRef(null);


  var ref_commentstatus_close = (0, _react.useRef)(null);

  /** Component Effect - register listeners on mount */
  (0, _react.useEffect)(function () {
    UDATA.OnAppStateChange('CMTSTATUS', state_CMTSTATUS, UDATAOwner);
    UDATA.OnAppStateChange('COMMENTCOLLECTION', redraw, UDATAOwner); // respond to close
    UDATA.HandleMessage('COMMENTS_UPDATE', redraw);
    UDATA.HandleMessage('COMMENT_UPDATE', urmsg_COMMENT_UPDATE);

    return function () {
      UDATA.AppStateChangeOff('CMTSTATUS', state_CMTSTATUS, UDATAOwner);
      UDATA.AppStateChangeOff('COMMENTCOLLECTION', redraw, UDATAOwner); // respond to close
      UDATA.UnhandleMessage('COMMENTS_UPDATE', redraw);
      UDATA.UnhandleMessage('COMMENT_UPDATE', urmsg_COMMENT_UPDATE);
      clearTimeout(AppearTimer);
      clearTimeout(DisappearTimer);
      clearTimeout(ResetTimer);
    };
  }, []);

  (0, _react.useEffect)(function () {
    // wcag set focus to the close button when the panel is expanded
    if (uiIsExpanded && ref_commentstatus_close.current) {
      ref_commentstatus_close.current.focus();
    }
  }, [uiIsExpanded]);

  /// UR HANDLERS /////////////////////////////////////////////////////////////
  /// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  function state_CMTSTATUS(CMTSTATUS) {
    setCMTSTATUS(CMTSTATUS);
  }

  /** force re-render after COMMENTS_UPDATE from a new comment another user */
  function redraw() {
    // This is necessary to force a re-render of the comment summaries
    // when the comment collection changes on the net
    setDummy(function (dummy) {
      return dummy + 1;
    }); // Trigger re-render
  }
  /// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  /** animate the addition of new comment messages after a new comment from another user */
  function urmsg_COMMENT_UPDATE(data) {
    var comment = data.comment,
        uaddr = data.uaddr;


    var my_uaddr = _client2.default.SocketUADDR();
    var isNotMe = my_uaddr !== uaddr;

    // clone the comment object so we can modify the reply text
    // otherwise we inadvertently change the commenter_id
    var status_comment = Object.assign({}, comment);
    if (status_comment && status_comment.commenter_text && status_comment.commenter_text.length > 0) {
      var source = void 0;
      if (status_comment.comment_id_parent) {
        source = status_comment.commenter_id + ' replied: ';
      } else {
        source = status_comment.commenter_id + ' commented: ';
      }
      status_comment.commenter_id = source;
      var _message = c_GetCommentItemJSX(status_comment);
      setMessages(function (prevMessages) {
        return [].concat(_toConsumableArray(prevMessages), [_message]);
      });

      // Only show status update if it's coming from another
      if (isNotMe) {
        clearTimeout(AppearTimer);
        clearTimeout(DisappearTimer);
        clearTimeout(ResetTimer);
        // clear it first, then appear (so that each new comment triggers the animation)
        setMessage(_message);
        AppearTimer = setTimeout(function () {
          setActiveCSS('appear');
        }, 250);
        DisappearTimer = setTimeout(function () {
          setActiveCSS('disappear');
        }, 8000);
        ResetTimer = setTimeout(function () {
          setMessage('');
          setActiveCSS('');
        }, 13000); // should equal the `disappear` ease-in period + 'disappear' timeout
      } else {
        setDummy(function (dummy) {
          return dummy + 1;
        }); // force update to update counts
      }
    }
  }

  /// COMPONENT UI HANDLERS ///////////////////////////////////////////////////
  /// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  function evt_ExpandPanel() {
    clearTimeout(DisappearTimer);
    clearTimeout(ResetTimer);
    setActiveCSS('appear');
    setUiIsExpanded(true);
  }
  /// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  function evt_KeyDownExpandPanel(event) {
    // handle focus
    if (event.key === 'Enter' || event.key === ' ') {
      event.preventDefault();
      event.stopPropagation();
      evt_ExpandPanel();
    }
  }
  /// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  function evt_Close() {
    setMessage('');
    setActiveCSS('');
    setUiIsExpanded(false);
  }
  /// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  function evt_MarkAllRead() {
    _commentMgr2.default.MarkAllRead();
  }
  /// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  function evt_OpenReferent(event, cref) {
    event.preventDefault();
    event.stopPropagation();
    _commentMgr2.default.OpenReferent(cref);
  }
  /// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  function evt_OpenComment(event, cref, cid) {
    event.preventDefault();
    event.stopPropagation();
    _commentMgr2.default.OpenCommentStatusComment(cref, cid);
  }

  /// RENDER HELPERS //////////////////////////////////////////////////////////
  /// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  /** Renders each comment item summary as a JSX element
   *  @param {TCommentObject} comment
   *  @returns {JSX.Element}
   */
  function c_GetCommentItemJSX(comment) {
    if (comment.comment_isMarkedDeleted) return ''; // was marked deleted, so skip
    var cref = comment ? comment.collection_ref : '';

    var _CMTMGR$GetCREFSource = _commentMgr2.default.GetCREFSourceLabel(cref),
        typeLabel = _CMTMGR$GetCREFSource.typeLabel,
        sourceLabel = _CMTMGR$GetCREFSource.sourceLabel;

    if (sourceLabel === undefined) return ''; // source was deleted, so skip
    return _react2.default.createElement(
      'div',
      { className: 'comment-item', key: comment.comment_id },
      _react2.default.createElement(
        'div',
        { className: 'comment-sourcetype' },
        typeLabel,
        '\xA0'
      ),
      _react2.default.createElement(
        'a',
        {
          href: '#',
          className: 'comment-sourcelabel',
          onClick: function onClick(event) {
            return evt_OpenReferent(event, cref);
          }
        },
        sourceLabel
      ),
      _react2.default.createElement(
        'div',
        { className: 'commenter' },
        ': ',
        comment.commenter_id,
        '\xA0'
      ),
      _react2.default.createElement(
        'a',
        {
          href: '#',
          onClick: function onClick(event) {
            return evt_OpenComment(event, cref, comment.comment_id);
          }
        },
        '#' + comment.comment_id
      ),
      _react2.default.createElement(
        'div',
        { className: 'comment-text' },
        '\xA0\u201C',
        String(comment.commenter_text.join('|')).trim(),
        '\u201D'
      )
    );
  }

  /// COMPONENT RENDER ////////////////////////////////////////////////////////
  /// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  // Uncomment this line to disable the comments if not logged in
  // if (!uid) return ''; // if not logged in, there's no comment status

  var _CMTMGR$GetCommentSta = _commentMgr2.default.GetCommentStats(),
      countRepliesToMe = _CMTMGR$GetCommentSta.countRepliesToMe,
      countUnread = _CMTMGR$GetCommentSta.countUnread;

  var unreadRepliesToMe = _commentMgr2.default.GetUnreadRepliesToMe();
  var unreadRepliesToMeItems = unreadRepliesToMe.map(function (comment) {
    return c_GetCommentItemJSX(comment);
  });
  var unreadComments = _commentMgr2.default.GetUnreadComments();
  var unreadCommentItems = unreadComments.map(function (comment) {
    return c_GetCommentItemJSX(comment);
  });

  var UnreadRepliesToMeButtonJSX = _react2.default.createElement(
    'div',
    { className: 'comment-summary-item' },
    _react2.default.createElement(_URCommentSVGBtn2.default, {
      uiref: 'unreadRepliesToMe',
      count: countRepliesToMe,
      hasUnreadComments: countRepliesToMe > 0,
      hasReadComments: countRepliesToMe === 0,
      selected: false,
      disabled: true // display only
      , onClick: evt_ExpandPanel,
      ariaLabel: 'Unread replies to me (' + countRepliesToMe + ')'
    }),
    _react2.default.createElement(
      'label',
      { htmlFor: 'unreadRepliesToMe' },
      'unread replies to me'
    )
  );
  var UnreadButtonJSX = _react2.default.createElement(
    'div',
    { className: 'comment-summary-item' },
    _react2.default.createElement(_URCommentSVGBtn2.default, {
      uiref: 'unread',
      count: countUnread,
      hasUnreadComments: countUnread > 0,
      hasReadComments: countUnread === 0,
      selected: false,
      disabled: true // display only
      , onClick: evt_ExpandPanel,
      ariaLabel: 'Unread comments (' + countUnread + ')'
    }),
    _react2.default.createElement(
      'label',
      { htmlFor: 'unread' },
      'unread'
    )
  );

  return _react2.default.createElement(
    'div',
    null,
    _react2.default.createElement(
      'div',
      { id: 'comment-bar' },
      _react2.default.createElement(
        'div',
        {
          id: 'comment-alert',
          className: activeCSS + ' ' + (uiIsExpanded ? ' expanded' : '')
        },
        !uiIsExpanded && _react2.default.createElement(
          'div',
          { className: 'comment-status-body' },
          message
        )
      ),
      _react2.default.createElement(
        'div',
        null,
        _react2.default.createElement(
          'div',
          {
            id: 'comment-summary',
            className: '' + (uiIsExpanded ? ' expanded' : ''),
            onClick: evt_ExpandPanel,
            onKeyDown: evt_KeyDownExpandPanel,
            role: 'button',
            tabIndex: '0',
            'aria-label': 'Expand Comment Status'
          },
          UnreadRepliesToMeButtonJSX,
          '\xA0',
          UnreadButtonJSX
        ),
        _react2.default.createElement(
          'div',
          {
            id: 'comment-panel',
            className: '' + (uiIsExpanded ? ' expanded' : ''),
            onClick: evt_Close,
            role: 'button'
          },
          _react2.default.createElement(
            'div',
            { className: 'comments-unread' },
            UnreadRepliesToMeButtonJSX,
            _react2.default.createElement(
              'div',
              { className: 'comment-status-body' },
              unreadRepliesToMeItems
            ),
            UnreadButtonJSX,
            _react2.default.createElement(
              'div',
              { className: 'comment-status-body' },
              unreadCommentItems
            ),
            _react2.default.createElement(
              'div',
              { className: 'commentbar' },
              _react2.default.createElement(
                'button',
                {
                  className: 'small',
                  onClick: evt_Close,
                  role: 'button',
                  ref: ref_commentstatus_close
                },
                'Close'
              ),
              _react2.default.createElement(
                'button',
                { className: 'small', onClick: evt_MarkAllRead, role: 'button' },
                'Mark All Read'
              )
            )
          )
        )
      )
    ),
    _react2.default.createElement(_URCommentCollectionMgr2.default, null),
    _react2.default.createElement(_URDialog2.default, { info: CMTSTATUS.dialog })
  );
}

/// EXPORT REACT COMPONENT ////////////////////////////////////////////////////
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
exports.default = URCommentStatus;
});

require.register("view/netcreate/components/URCommentThread.jsx", function(exports, require, module) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }(); /*//////////////////////////////// ABOUT \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\*\

ommentThread displays all of the comments and replies for a given referent
object.  It is a draggable window that can be opened and closed by the user
via the URCommentBtn.  Clickin "X" or close will mark all comments as "read".

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           USE:

ommentThread
uiref
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               cref={collection_ref}
uid
x
y



uiref   -- reference to the ui component that opened the thread, usu commentButtonId
cref    -- collection reference (usu node id, edge id)
uid     -- user id of current active user viewing or changing comment
x,y     -- position of open comment thread used to set proximity to
comment button




var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactDraggable = require('react-draggable');

var _reactDraggable2 = _interopRequireDefault(_reactDraggable);

var _client = require('unisys/client');

var _client2 = _interopRequireDefault(_client);

var _commentMgr = require('../comment-mgr');

var _commentMgr2 = _interopRequireDefault(_commentMgr);

var _URComment = require('./URComment');

var _URComment2 = _interopRequireDefault(_URComment);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/// CONSTANTS & DECLARATIONS //////////////////////////////////////////////////
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/// Initialize UNISYS DATA LINK for react component
var UDATAOwner = { name: 'URCommentThread' };
var UDATA = _client2.default.NewDataLink(UDATAOwner);
/// Debug Flags
var DBG = false;
var PR = 'URCommentThread';

/// REACT FUNCTIONAL COMPONENT ////////////////////////////////////////////////
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/** URCommentThread renders the set of individual comments and replies
 *  (URComment) in a single window.  Handles marking comments as "read"
 *  when the thread is closed.
 */
function URCommentThread(_ref) {
  var uiref = _ref.uiref,
      cref = _ref.cref,
      uid = _ref.uid,
      x = _ref.x,
      y = _ref.y;

  var _useState = (0, _react.useState)(0),
      _useState2 = _slicedToArray(_useState, 2),
      forceRender = _useState2[0],
      setForceRender = _useState2[1]; // Dummy state variable to force update

  /** Component Effect - set up listeners on mount */


  (0, _react.useEffect)(function () {
    UDATA.OnAppStateChange('CMTLOCKSTATE', urmsg_ForceRender);

    return function () {
      UDATA.AppStateChangeOff('CMTLOCKSTATE', urmsg_ForceRender);
    };
  }, []);

  /// UR HANDLERS /////////////////////////////////////////////////////////////
  /// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  function urmsg_ForceRender() {
    // This is necessary to force a re-render of "Click to add a Comment"
    // text area if the comment edit is cancelled and placeholder
    // comment is removed
    // Current disabled state is refreshed with each render
    setForceRender(function (forceRender) {
      return forceRender + 1;
    }); // Trigger re-render
  }

  /// COMPONENT UI HANDLERS ///////////////////////////////////////////////////
  /// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  /** handles clicking the "Click to add a Comment" textarea to create a new
   *  coment.
   */
  function evt_OnAddComment() {
    var commentVObjs = _commentMgr2.default.GetThreadedViewObjects(cref, uid);
    var numComments = commentVObjs.length;
    if (numComments < 1) {
      // Add first root comment
      _commentMgr2.default.AddComment({
        cref: cref,
        comment_id_parent: '',
        comment_id_previous: '',
        commenter_id: uid
      });
    } else {
      // Add reply to last ROOT comment in thread (last comment at level 0)
      var lastComment = commentVObjs.reverse().find(function (cvobj) {
        return cvobj.level === 0;
      });
      _commentMgr2.default.AddComment({
        cref: cref,
        comment_id_parent: '',
        comment_id_previous: lastComment.comment_id,
        commenter_id: uid
      });
    }
  }
  /// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  function evt_OnKeyDown(event) {
    // "Enter" adds a new comment
    if (event.key === 'Enter') {
      // ignore tabs changing focus
      event.preventDefault();
      event.stopPropagation();
      evt_OnAddComment();
    }
  }
  /// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  /** handles the "X" or "Close" button click, marks all comments "read" */
  function evt_OnClose() {
    _commentMgr2.default.CloseCommentCollectionAndMarkRead(uiref, cref, uid);
  }
  /// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  /** handles clicking on the name of the object being commented on
   *  opens the object -- useful for finding the source object if the
   *  thread window has moved.
   */
  function evt_OnReferentClick(event, cref) {
    event.preventDefault();
    event.stopPropagation();
    _commentMgr2.default.OpenReferent(cref);
  }

  /// COMPONENT RENDER ////////////////////////////////////////////////////////
  /// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  var commentVObjs = _commentMgr2.default.GetThreadedViewObjects(cref, uid);
  var isDisabled = _commentMgr2.default.GetCommentsAreBeingEdited();

  /// SUB COMPONENTS
  var CloseBtn = _react2.default.createElement(
    'button',
    { onClick: evt_OnClose, disabled: isDisabled },
    'Close'
  );

  // HACK: To keep the comment from going off screen:
  var windowHeight = Math.min(screen.height, window.innerHeight);
  // max 350 ensures that comments near the bottom of the screen
  var commentMaxHeight = Math.max(350, windowHeight - y - 100) + 'px';

  var _CMTMGR$GetCREFSource = _commentMgr2.default.GetCREFSourceLabel(cref),
      typeLabel = _CMTMGR$GetCREFSource.typeLabel,
      sourceLabel = _CMTMGR$GetCREFSource.sourceLabel;

  // This is the text area that the user clicks to add a comment
  // emulates Google Doc comments


  var showAddCommentClickTarget = !_commentMgr2.default.GetCommentsAreBeingEdited();

  return _react2.default.createElement(
    _reactDraggable2.default,
    null,
    _react2.default.createElement(
      'div',
      {
        className: 'commentThread',
        style: { left: x + 'px', top: y + 'px', maxHeight: commentMaxHeight },
        onClick: function onClick(e) {
          return e.stopPropagation();
        }
      },
      _react2.default.createElement(
        'div',
        { className: 'topbar' },
        _react2.default.createElement(
          'div',
          { className: 'commentTitle' },
          'Comments on ',
          typeLabel,
          ' ',
          _react2.default.createElement(
            'a',
            {
              href: '#',
              onClick: function onClick(event) {
                return evt_OnReferentClick(event, cref);
              },
              'aria-label': sourceLabel
            },
            sourceLabel
          )
        ),
        !isDisabled && _react2.default.createElement(
          'button',
          {
            className: 'closeBtn',
            onClick: evt_OnClose,
            type: 'button',
            'aria-label': 'Close'
          },
          'X'
        )
      ),
      _react2.default.createElement(
        'div',
        { className: 'commentScroller' },
        commentVObjs.map(function (cvobj) {
          return _react2.default.createElement(_URComment2.default, {
            cref: cref,
            cid: cvobj.comment_id,
            uid: uid,
            key: cvobj.comment_id
          });
        }),
        showAddCommentClickTarget && !isDisabled && uid && _react2.default.createElement('textarea', {
          className: 'add',
          placeholder: 'Click to add a Comment...',
          readOnly: true,
          onClick: evt_OnAddComment,
          onKeyDown: evt_OnKeyDown,
          autoFocus: true
        }),
        !uid && commentVObjs.length < 1 && _react2.default.createElement(
          'div',
          { className: 'label', style: { textAlign: 'center' } },
          'No comments'
        )
      ),
      _react2.default.createElement(
        'div',
        { className: 'commentbar' },
        CloseBtn
      )
    )
  );
}

/// EXPORT REACT COMPONENT ////////////////////////////////////////////////////
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
exports.default = URCommentThread;
});

require.register("view/netcreate/components/URCommentVBtn.jsx", function(exports, require, module) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }(); /*//////////////////////////////// ABOUT \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\*\

ommentVBtn

his is a different implementation from Net.Create's.
s URCommentVBtn
uses props only for id (instead of ALL parameters)
id is `cref` (instead of `uiref)`
comment state is derived from global state objects (not props)

display button that calls URCommentCollectionMgr to open comments.
t emulates the visual functionality of URCommentBtn but is not a parent
of the URCommentThread and does not directly handle the opening and closing
of URCommentThreads.  URCommentThreads are opened separately via
ommentCollectionMgr.


ommentVBtn does five things:
isplays whether the comment thread is open (bordered) or closed (no border)
isplays the number of comments in the thread
rovides the position of the source component requesting the thread
equests URCommentCollectionMgr to open the comment thread
equests URCommentCollectionMgr to close the comment thread
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             4. // REVIEW: isDisabled is not used -- where do we get that status forom?



ommentVBtn
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               cref={collection_ref}



cref    -- collection reference (usu node id, edge id)


ommentStatus > URCommentCollectionMgr
avbar
ink

unlike URCommentBtn, URCommentVBtn does not use the unique user
interface id (uuiid) to differentiate comment buttons on EVLinks vs props.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         



var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _client = require('unisys/client');

var _client2 = _interopRequireDefault(_client);

var _commentMgr = require('../comment-mgr');

var _commentMgr2 = _interopRequireDefault(_commentMgr);

var _URCommentSVGBtn = require('./URCommentSVGBtn');

var _URCommentSVGBtn2 = _interopRequireDefault(_URCommentSVGBtn);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/// CONSTANTS & DECLARATIONS //////////////////////////////////////////////////
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/// Initialize UNISYS DATA LINK for functional react component
var UDATAOwner = { name: 'URCommentVBtn' };
var UDATA = _client2.default.NewDataLink(UDATAOwner);
/// Debug Flags
var DBG = false;
var PR = 'URCommentVBtn';

/// REACT FUNCTIONAL COMPONENT ////////////////////////////////////////////////
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/** URCommentVBtn
 *  @param {string} cref - Collection reference
 *  @returns {React.Component} - URCommentVBtn
 */
function URCommentVBtn(_ref) {
  var cref = _ref.cref;

  var btnRef = (0, _react.useRef)(null);

  var _useState = (0, _react.useState)({
    count: 0,
    hasUnreadComments: false,
    hasReadComments: false,
    isOpen: false
  }),
      _useState2 = _slicedToArray(_useState, 2),
      state = _useState2[0],
      setState = _useState2[1];

  /// USEEFFECT ///////////////////////////////////////////////////////////////
  /// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -


  (0, _react.useEffect)(function () {
    c_Update();
    // Handlers
    UDATA.OnAppStateChange('COMMENTCOLLECTION', urstate_UpdateCollection, UDATAOwner);
    UDATA.OnAppStateChange('COMMENTVOBJS', urstate_UpdateVObj, UDATAOwner);
    // window.addEventListener('resize', evt_OnResize);
    // clean up on unmount
    return function () {
      UDATA.AppStateChangeOff('COMMENTCOLLECTION', urstate_UpdateCollection);
      UDATA.AppStateChangeOff('COMMENTVOBJS', urstate_UpdateVObj, UDATAOwner);
      // window.removeEventListener('resize', evt_OnResize);
    };
  }, []);

  (0, _react.useEffect)(function () {
    c_Update();
  }, [cref]);

  /// UR HANDLERS /////////////////////////////////////////////////////////////
  /// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  function urstate_UpdateCollection(COMMENTCOLLECTION) {
    c_Update();
  }
  function urstate_UpdateVObj(COMMENTVOBJS) {}

  /// COMPONENT HELPER METHODS ////////////////////////////////////////////////
  /// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  function c_Update() {
    var ccol = _commentMgr2.default.GetCommentCollection(cref) || {};
    var hasReadComments = ccol.hasReadComments,
        hasUnreadComments = ccol.hasUnreadComments;


    var uistate = _commentMgr2.default.GetCommentUIState(cref);
    var isOpen = uistate ? uistate.isOpen : false;

    // commentCountLabel
    var commentCount = _commentMgr2.default.GetCommentCollectionCount(cref);

    setState({
      count: commentCount,
      hasUnreadComments: hasUnreadComments,
      hasReadComments: hasReadComments,
      isOpen: isOpen
    });
  }
  /// COMPONENT UI HANDLERS ///////////////////////////////////////////////////
  /// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  /** handle URCommentBtn click, which opens and closes the URCommentThread */
  function evt_OnClick(event) {
    event.stopPropagation();
    if (state.isOpen) {
      // is currently open, so close it
      var uid = _commentMgr2.default.GetCurrentUserId();
      _commentMgr2.default.CloseCommentCollection(cref, cref, uid);
    } else {
      // is currently closed, so open it
      _commentMgr2.default.OpenCommentCollectionByCref(cref);
    }
  }
  /// DEPRECATED FOR NOW
  /// -- URCommentCollectionMgr should handle window resize?
  /// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  // /** handles window resize, which will adjust the URCommentThread window
  //  *  position relative to the resized location of the URCommentBtn
  //  */
  // function evt_OnResize() {
  //   const position = c_GetCommentThreadPosition();
  //   setPosition(position);
  // }

  /// COMPONENT RENDER ////////////////////////////////////////////////////////
  /// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  return _react2.default.createElement(
    'div',
    { ref: btnRef },
    _react2.default.createElement(_URCommentSVGBtn2.default, {
      uiref: cref,
      count: state.count,
      hasUnreadComments: state.hasUnreadComments,
      hasReadComments: state.hasReadComments,
      selected: state.isOpen,
      onClick: evt_OnClick,
      ariaLabel: 'Comments (' + state.count + ')'
    })
  );
}

/// EXPORT REACT COMPONENT ////////////////////////////////////////////////////
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
exports.default = URCommentVBtn;
});

require.register("view/netcreate/components/URDateField.jsx", function(exports, require, module) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }(); /*//////////////////////////////// ABOUT \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\*\

ateField

general date input field that can support a variety of calendar formats
for historical projects, e.g. 1000 AD, 10,000 BCE.

he intent is to provide a unstructured input field that allows users to
enter arbitrary date-related strings that can be parsed by the application
well enough to support filtering and sorting.

his is primarily used for data input rather than timestamping.

he input field itself is intended to be flexible, using the `chrono-node`
library to parse a wide variety of date formats.
he user inputs a raw date-related string, e.g. "circa 1492"
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           2. The component then interprets the parsed date and offers a selection of
formats for the user to choose from.  The user has the option to select
the format "as entered" or to choose from a list of suggested formats
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              based on the parsed date.
he selected format is then displayed in the field.
hen the user clicks "Save", the date is saved as
{value: "raw date string", format: "selected format"}

ormats are dynamically generated based on the available parsed date,
displaying only formats that match the the parsed dimensions. For example, if
the parsed data includes a year, month, and day, the component will offer
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           a variety of formats including "April 1, 2024" and "2024/4/1". If the parsed
date only includes a year and month, the component will offer formats like
pril 2024" and "2024/4", but not "April 1, 2024" if the day is missing.
f the parsed date only includes a year, the component will offer formats
like "2024" and "2024 CE", etc.

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           Eras are handled via a template setting. The user can set the era to BCE/CE or BC/AD.
ates can be entered in any format, e.g. "2024 BCE", "2024 BC", "2024 CE",
but the selected format will use the format defined in the template, e.g.
if the eras format is set to "BCE/CE", entering "1024 ad" will be formatted
as "1024 CE".  (If you select "as entered" as the format you can still use "1024 ad")
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         
or ambiguous years, adding a "CE" or "AD" to the end of the date can
clarify the era. For example, "102" can't be parsed, but "102 ad"
will parse the input as a year.

ou can add extra descriptive text to the field.  As long as the field can
interpret the date, the exact text doesn't matter.  So you can add other
descriptive text as part of the field and sorting and filtering should still
work.  This doesn't work if the input can't be interpreted.  And you do have
to make sure the interpretation is correct.

he stored value of a historical date field includes:
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           - The raw input string (`value`)
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           - The selected format ('format')
he formatted date string (`formattedDateString`)
he final output is then dynamically generated based on the selection.



var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _hdate = require('system/util/hdate');

var _hdate2 = _interopRequireDefault(_hdate);

var _client = require('unisys/client');

var _client2 = _interopRequireDefault(_client);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/// CONSTANTS & DECLARATIONS //////////////////////////////////////////////////
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/// Initialize UNISYS DATA LINK for functional react component
var UDATAOwner = { name: 'URDateField' };
var UDATA = _client2.default.NewDataLink(UDATAOwner);
var DBG = false;
var PR = 'URDateField';

/// REACT FUNCTIONAL COMPONENT ////////////////////////////////////////////////
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
function URDateField(_ref) {
  var id = _ref.id,
      _ref$value = _ref.value,
      value = _ref$value === undefined ? '' : _ref$value,
      _ref$dateFormat = _ref.dateFormat,
      dateFormat = _ref$dateFormat === undefined ? 'AS_ENTERED' : _ref$dateFormat,
      _ref$allowFormatSelec = _ref.allowFormatSelection,
      allowFormatSelection = _ref$allowFormatSelec === undefined ? false : _ref$allowFormatSelec,
      readOnly = _ref.readOnly,
      onChange = _ref.onChange,
      helpText = _ref.helpText,
      _ref$isFilter = _ref.isFilter,
      isFilter = _ref$isFilter === undefined ? false : _ref$isFilter,
      _ref$disabled = _ref.disabled,
      disabled = _ref$disabled === undefined ? false : _ref$disabled;

  /// CONSTANTS + STATES
  /// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  var inputRef = (0, _react.useRef)(null);
  var cursorPos = (0, _react.useRef)(0);

  var _useState = (0, _react.useState)({
    value: (typeof value === 'undefined' ? 'undefined' : _typeof(value)) === 'object' ? value.value : value,
    format: allowFormatSelection ? value.format || dateFormat : dateFormat,
    formattedDateString: value.formattedDateString || ''
  }),
      _useState2 = _slicedToArray(_useState, 2),
      hdate = _useState2[0],
      setHDate = _useState2[1];

  var _useState3 = (0, _react.useState)(),
      _useState4 = _slicedToArray(_useState3, 2),
      dateValidationStr = _useState4[0],
      setValidationStr = _useState4[1]; // human-readable verification e.g. 'month:2024'


  var _useState5 = (0, _react.useState)([{ value: 'AS_ENTERED', preview: 'as entered' }]),
      _useState6 = _slicedToArray(_useState5, 2),
      formatMenuOptions = _useState6[0],
      setFormatMenuOptions = _useState6[1];

  /// Component Effect - set up listeners on mount */
  /// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -


  (0, _react.useEffect)(function () {
    // 1. Copy state to local variables
    var result = _extends({}, hdate);
    result.value = (typeof value === 'undefined' ? 'undefined' : _typeof(value)) === 'object' ? value.value : value;
    result.format = allowFormatSelection ? value.format || dateFormat : dateFormat;

    // 2. Parse and format the date based on selected format
    var ParsingResult = _hdate2.default.Parse(result.value);
    var knownValues = ParsingResult.length > 0 ? ParsingResult[0].start.knownValues : {};
    result.formattedDateString = _hdate2.default.GetPreviewStr(result.value, knownValues, result.format);

    // 3. Save derived values
    var dateValidationResults = _hdate2.default.ShowValidationResults(ParsingResult);
    setValidationStr(dateValidationResults ? dateValidationResults.join(' ') : '');
    setFormatMenuOptions(_hdate2.default.ShowMatchingFormats(ParsingResult, result.format, allowFormatSelection));

    // 4. Save State
    setHDate(result);

    // 5. Force change so that the current format is changed when the field is opened
    if (onChange && hdate.formattedDateString !== result.formattedDateString) c_HandleChange(result);
  }, [value, dateFormat]);
  /// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  /// Retain cursor position across updates
  (0, _react.useEffect)(function () {
    if (inputRef.current) {
      inputRef.current.selectionStart = cursorPos.current;
      inputRef.current.selectionEnd = cursorPos.current;
    }
  }, [hdate.value]);

  /// COMPONENT UI HANDLERS ///////////////////////////////////////////////////
  /// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  function c_HandleChange(result) {
    // 2. Parse and format the date based on selected format
    var ParsingResult = _hdate2.default.Parse(result.value);
    var knownValues = ParsingResult.length > 0 ? ParsingResult[0].start.knownValues : {};
    result.formattedDateString = _hdate2.default.GetPreviewStr(result.value, knownValues, result.format);

    // 3. Send input string, format, and formattedDateString to onChange handler
    var eventWithFormat = { target: {} };
    eventWithFormat.target.id = id;
    eventWithFormat.target.value = result;
    onChange(eventWithFormat);
  }

  /** Handle user text input updates, parse and format the date string based
   *  on the input values, and trigger the onChange handler.
   */
  function evt_OnInputUpdate(event) {
    // Copy state to local variables
    var result = _extends({}, hdate);
    result.value = event.target.value;
    cursorPos.current = event.target.selectionStart;
    c_HandleChange(result);
  }
  /// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  /** Handle user selection of a date format.  Formats the current date field
   *  with the selected format, and trigger the onChange handler.
   */
  function evt_OnFormatSelect(event) {
    // Copy state to local variables
    var result = _extends({}, hdate);
    result.format = event.target.value;
    c_HandleChange(result);
  }

  /// RENDER /////////////////////////////////////////////////////////////////
  /// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  var READONLY = _react2.default.createElement(
    'div',
    { className: 'viewvalue' },
    hdate.formattedDateString
  );

  var FILTER = _react2.default.createElement(
    'div',
    { className: 'urdate' },
    _react2.default.createElement(
      'div',
      { className: 'filter' },
      _react2.default.createElement('input', {
        ref: inputRef,
        id: id,
        className: dateValidationStr === '' ? 'not-validated' : '',
        onChange: evt_OnInputUpdate,
        value: hdate.value,
        placeholder: '...',
        disabled: disabled
      }),
      _react2.default.createElement(
        'div',
        { className: 'validator' },
        dateValidationStr
      )
    )
  );

  var NORMAL = _react2.default.createElement(
    'div',
    { className: 'urdate' },
    _react2.default.createElement(
      'div',
      { className: 'help' },
      helpText
    ),
    _react2.default.createElement(
      'div',
      { className: 'help' },
      'Enter a date'
    ),
    _react2.default.createElement('input', {
      ref: inputRef,
      id: id,
      className: dateValidationStr === '' ? 'not-validated' : '',
      onChange: evt_OnInputUpdate,
      value: hdate.value,
      disabled: disabled
    }),
    _react2.default.createElement(
      'div',
      { className: 'validator' },
      dateValidationStr
    ),
    _react2.default.createElement(
      'div',
      { className: 'help' },
      'Display as'
    ),
    allowFormatSelection ? _react2.default.createElement(
      'select',
      {
        onChange: evt_OnFormatSelect,
        value: hdate.format,
        disabled: !allowFormatSelection
      },
      formatMenuOptions.map(function (option) {
        return _react2.default.createElement(
          'option',
          { key: option.value, value: option.value },
          option.preview
        );
      })
    ) : _react2.default.createElement(
      'div',
      null,
      hdate.formattedDateString
    )
  );

  if (readOnly) return READONLY;
  if (isFilter) return FILTER;
  return NORMAL;
}

/// EXPORT REACT COMPONENT ////////////////////////////////////////////////////
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
exports.default = URDateField;
});

require.register("view/netcreate/components/URDialog.jsx", function(exports, require, module) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactDraggable = require('react-draggable');

var _reactDraggable2 = _interopRequireDefault(_reactDraggable);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// import './URDialog.css'; // MEME-only

/// CONSTANTS & DECLARATIONS //////////////////////////////////////////////////
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/*//////////////////////////////// ABOUT \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\*\

  Generic Dialog

  USE:

    <URDialog
      dialog={CMTSTATUS.dialog}
    />

\*\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ * //////////////////////////////////////*/

var DBG = false;
var PR = 'URDialog';

/// REACT COMPONENT ///////////////////////////////////////////////////////////
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
function URDialog(_ref) {
  var info = _ref.info;

  if (info === undefined) return null;

  var isOpen = info.isOpen,
      _info$message = info.message,
      message = _info$message === undefined ? 'Are you sure?' : _info$message,
      _info$okmessage = info.okmessage,
      okmessage = _info$okmessage === undefined ? 'OK' : _info$okmessage,
      _info$cancelmessage = info.cancelmessage,
      cancelmessage = _info$cancelmessage === undefined ? 'Cancel' : _info$cancelmessage,
      onOK = info.onOK,
      onCancel = info.onCancel;

  /// COMPONENT RENDER ////////////////////////////////////////////////////////
  /// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  var BTN_OK = _react2.default.createElement(
    'button',
    { onClick: onOK, autoFocus: true },
    okmessage
  );
  var BTN_CANCEL = onCancel ? _react2.default.createElement(
    'button',
    { onClick: onCancel, type: 'button' },
    cancelmessage
  ) : '';

  return isOpen && _react2.default.createElement(
    'div',
    { id: 'urdialog' },
    _react2.default.createElement('div', { className: 'screen' }),
    _react2.default.createElement(
      _reactDraggable2.default,
      null,
      _react2.default.createElement(
        'div',
        { className: 'dialogwindow' },
        _react2.default.createElement(
          'div',
          { className: 'dialogmessage' },
          message
        ),
        _react2.default.createElement(
          'div',
          { className: 'dialogcontrolbar' },
          BTN_CANCEL,
          '\xA0',
          BTN_OK
        )
      )
    )
  );
}

/// EXPORT REACT COMPONENT ////////////////////////////////////////////////////
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
exports.default = URDialog;
});

require.register("view/netcreate/components/URPopover.jsx", function(exports, require, module) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactDraggable = require('react-draggable');

var _reactDraggable2 = _interopRequireDefault(_reactDraggable);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/// CONSTANTS & DECLARATIONS //////////////////////////////////////////////////
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/*//////////////////////////////// ABOUT \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\*\

  Generic Floating, Draggable, Closeable Window

  USE:

    <URPopover
      dialog={CMTSTATUS.dialog}
    />

\*\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ * //////////////////////////////////////*/

var DBG = false;
var PR = 'URPopover';

/// REACT FUNCTIONAL COMPONENT ////////////////////////////////////////////////
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
function URPopover(_ref) {
  var title = _ref.title,
      onClose = _ref.onClose,
      children = _ref.children;

  /// COMPONENT RENDER ////////////////////////////////////////////////////////
  /// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  var BTN_CLOSE = _react2.default.createElement(
    'button',
    {
      className: 'icon',
      type: 'button',
      role: 'button',
      'aria-label': 'Close',
      onClick: onClose
    },
    _react2.default.createElement('img', { src: 'images/icn_plus.svg', alt: '' })
  );
  return _react2.default.createElement(
    _reactDraggable2.default,
    { cancel: '.no-drag' },
    _react2.default.createElement(
      'div',
      { id: 'popover' },
      _react2.default.createElement(
        'div',
        { className: 'popover-toolbar' },
        title,
        BTN_CLOSE
      ),
      _react2.default.createElement(
        'div',
        { className: 'popover-content' },
        children
      )
    )
  );
}

/// EXPORT REACT COMPONENT ////////////////////////////////////////////////////
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
exports.default = URPopover;
});

require.register("view/netcreate/components/URTable.jsx", function(exports, require, module) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }(); /*///////////////////////////////// ABOUT \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\*\


able

mplements a table with resizable and sortable columns.
mulates the API of Handsontable.
sed also on https://github.com/netcreateorg/netcreate-itest/



enderers
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           This emulates Handsontable's renderer concept.
renderer is a function that takes a value and returns a JSX element
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           * If a column has a renderer, it will be used to render the value in the cell

orters
his emulates Handsontable's sorter concept.
sorter is a function that takes a key, the table data, and the sort order
f a column has a sorter, it will be used to sort the table data

olumn Widths
olumn widths can be set in the column definition
olumns without a width will be evenly distributed

olumn Types
ote that `type` determines both the default renderer and sorter
but they can be separately overriden.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         

ser Interaction - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         ## Resizing Columns
olumns can be resized by dragging the right edge of the column header
he column to the right of the dragged edge will expand or contract
ax resize -- Resizing is done between two columns: the current column,
and the column to the right. (We assume the table width is fixed or 100%).
o give you simple, but finer control over resizing columns, you can expand or
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           contract the current column and the next column up/down to a minimum size.
nce you hit the max size, you need to resize other columns to adjust.
e don't allow you to resize neighboring columns once you've hit the
max/min just to simplify the math).

ort Order
y default the table is unsorted.
licking on a column header will sort the table by that column in ascending order
ubsequent clicks will toggle to descending to unsorted and back to ascending
he next sort order is highlighted on hover with a transparent arrow
he column remembers the previous sort order when another column is selected
so re-selecting the column will restore the previous sort order
column can be designated unsortable by setting `sortDisabled` to `true`

ooltips
ooltips are displayed when hovering over a cell
he tooltip text is the same as the cell text
ooltips can be disabled by setting `tipDisabled` to `true`


`tableData`: array
he data to be displayed in the table.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         

{ id: 1, label: 'Constantinople', founding: '100 ce' },
{ id: 2, label: 'Athens', founding: '1000 bce' },
{ id: 3, label: 'Cairo', founding: '3000 bce' },


`isOpen`: boolean
o optimize performance, the column widths are only calculated
when it's open.

`columns`: array
pecifications for how each column is to be rendered and sorted.

olumn Definition
title: string
data: string
type: 'text' | 'text-case-insensitive' | 'number' | 'timestamp' | 'markdown' | 'hdate'
width: number in px
renderer: (value: any) => JSX.Element
sorter: (key: string, tdata: any[], order: number) => any[]
sortDisabled: boolean
tipDisabled: boolean

xample usage:

const COLUMNDEFS = [
{
title: 'TITLE',
data: 'title',
type: 'text',
width: 300, // in px
renderer: this.RendererTitle,
sorter: (key, tdata, order) => {
const sortedData = [...tdata].sort((a, b) => {
note `title` is stuffed into `tdata`
if (a[key].title < b[key].title) return order;
if (a[key].title > b[key].title) return order * -1;
return 0;
});
return sortedData;
}
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               },
{
title: 'UPDATED',
data: 'dateModified',
type: 'text',
width: 300 // in px
},


const TABLEDATA = modelsWithGroupLabels.map(model => {
return {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 id: model.id,
title: model.title,
groupLabel: model.groupLabel,
dateModified: HumanDate(model.dateModified),
dateCreated: HumanDate(model.dateCreated)
};
});



/// LIBRARIES /////////////////////////////////////////////////////////////////
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -


var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _hdate = require('system/util/hdate');

var _hdate2 = _interopRequireDefault(_hdate);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

/// CONSTANTS & DECLARATIONS //////////////////////////////////////////////////
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
var DBG = false;

var SORTORDER = new Map();
SORTORDER.set(0, '▲▼');
SORTORDER.set(1, '▲');
SORTORDER.set(-1, '▼');

var HumanDateCache = new Map();
var HumanDateShortCache = new Map();

/// FUNCTIONAL COMPONENT DECLARATION //////////////////////////////////////////
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
function URTable(_ref) {
  var isOpen = _ref.isOpen,
      data = _ref.data,
      columns = _ref.columns;

  var _useState = (0, _react.useState)([]),
      _useState2 = _slicedToArray(_useState, 2),
      _tabledata = _useState2[0],
      setTableData = _useState2[1];

  var _useState3 = (0, _react.useState)([]),
      _useState4 = _slicedToArray(_useState3, 2),
      _columndefs = _useState4[0],
      setColumnDefs = _useState4[1];

  var _useState5 = (0, _react.useState)([]),
      _useState6 = _slicedToArray(_useState5, 2),
      _columnWidths = _useState6[0],
      setColumnWidths = _useState6[1];

  var _useState7 = (0, _react.useState)(0),
      _useState8 = _slicedToArray(_useState7, 2),
      _sortColumnIdx = _useState8[0],
      setSortColumnIdx = _useState8[1];

  var _useState9 = (0, _react.useState)(0),
      _useState10 = _slicedToArray(_useState9, 2),
      _sortOrder = _useState10[0],
      setSortOrder = _useState10[1];

  var _useState11 = (0, _react.useState)({}),
      _useState12 = _slicedToArray(_useState11, 2),
      _previousColSortOrder = _useState12[0],
      setPreviousColSortOrder = _useState12[1];

  var ref_Table = (0, _react.useRef)(null);
  var ref_Resize = (0, _react.useRef)(null);

  /// USE EFFECT //////////////////////////////////////////////////////////////
  /// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  /// Init table data
  (0, _react.useEffect)(function () {
    setTableData(data);
    // default to ascending when a column is first clicked
    var defaultSortOrders = {};
    columns.forEach(function (item, idx) {
      return defaultSortOrders[idx] = -1;
    });
    setPreviousColSortOrder(defaultSortOrders);
  }, []);
  /// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  /// Calculate Initial Column Widths
  (0, _react.useEffect)(function () {
    // ...AFTER the table is opened otherwise the table width is 0 at the first render
    if (isOpen) {
      // Only calculate widths if the table is open
      u_CalculateColumnWidths();
    }
  }, [isOpen]);
  /// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  /// Update column definitions
  (0, _react.useEffect)(function () {
    // Set columns independently of the table data so that data can be updated
    // without affecting columns
    setColumnDefs(columns);
    u_CalculateColumnWidths();
  }, [columns]);
  /// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  /// Update table data
  (0, _react.useEffect)(function () {
    m_ExecuteSorter(data);
  }, [data]);
  // Handle column sort selection
  (0, _react.useEffect)(function () {
    // Sort table data
    m_ExecuteSorter(data);
  }, [_sortColumnIdx, _sortOrder, _previousColSortOrder]);

  /// UTILITIES ///////////////////////////////////////////////////////////////
  /// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  /// e.g. Jan 7 10:05:29 AM
  function u_HumanDate(timestamp) {
    if (timestamp === undefined || timestamp === '') return '<no date>';

    // Check cache first
    if (HumanDateCache.has(timestamp)) return HumanDateCache.get(timestamp);

    var date = new Date(timestamp);
    var timestring = date.toLocaleTimeString('en-Us', {
      hour: '2-digit',
      minute: '2-digit',
      second: '2-digit'
    });
    var datestring = date.toLocaleDateString('en-US', {
      month: 'short',
      day: 'numeric',
      year: 'numeric'
    });

    // Cache the result
    // - Clear cache if it gets too large
    if (HumanDateCache.size > 2048) HumanDateCache.clear();
    HumanDateCache.set(timestamp, datestring + ' ' + timestring);

    return datestring + ' ' + timestring;
  }
  /// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  /// e.g. 1/7/25 10:05a
  function u_HumanDateShort(timestamp) {
    if (timestamp === undefined || timestamp === '') return '<no date>';

    // Check cache first
    if (HumanDateShortCache.has(timestamp)) return HumanDateShortCache.get(timestamp);

    var date = new Date(timestamp);
    var timestring = date.toLocaleTimeString('en-Us', {
      hour: '2-digit',
      minute: '2-digit'
    });
    var datestring = date.toLocaleDateString('en-US', {
      month: '2-digit',
      day: '2-digit',
      year: '2-digit'
    });

    // Cache the result
    // - Clear cache if it gets too large
    if (HumanDateShortCache.size > 2048) HumanDateShortCache.clear();
    HumanDateShortCache.set(timestamp, datestring + ' ' + timestring);

    return datestring + ' ' + timestring;
  }
  /// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  var u_CalculateColumnWidths = function u_CalculateColumnWidths() {
    // if table is not drawn yet, skip
    if (ref_Table.current.clientWidth < 1) return;

    // if it's already set, don't recalculate
    if (_columnWidths.length > 0 && ref_Table.current.clientWidth > 0) {
      return;
    }

    var definedColWidths = columns.filter(function (col) {
      return col.width;
    }).map(function (col) {
      return col.width;
    });
    var definedColWidthSum = definedColWidths.reduce(function (a, b) {
      return a + b;
    }, 0);
    var remainingWidth = ref_Table.current.clientWidth - definedColWidthSum;
    var colWidths = columns.map(function (col) {
      return col.width || remainingWidth / (columns.length - definedColWidths.length);
    });
    setColumnWidths(colWidths);
  };

  /// RESIZE COLUMN HANDLERS //////////////////////////////////////////////////
  /// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  var ui_MouseDown = function ui_MouseDown(event, index) {
    event.preventDefault();
    event.stopPropagation();
    ref_Resize.current = {
      index: index,
      startX: event.clientX,
      startWidth: _columnWidths[index],
      nextStartWidth: _columnWidths[index + 1],
      maxCombinedWidth: _columnWidths[index] + _columnWidths[index + 1] - 50
    };
  };
  var ui_MouseMove = function ui_MouseMove(event) {
    if (ref_Resize.current !== null) {
      var _ref_Resize$current = ref_Resize.current,
          index = _ref_Resize$current.index,
          startX = _ref_Resize$current.startX,
          startWidth = _ref_Resize$current.startWidth,
          nextStartWidth = _ref_Resize$current.nextStartWidth,
          maxCombinedWidth = _ref_Resize$current.maxCombinedWidth;

      var delta = event.clientX - startX;
      var newWidths = [].concat(_toConsumableArray(_columnWidths));
      newWidths[index] = Math.min(Math.max(50, startWidth + delta), maxCombinedWidth); // Minimum width set to 50px
      newWidths[index + 1] = Math.min(Math.max(50, nextStartWidth - delta), maxCombinedWidth);
      setColumnWidths(newWidths);
    }
  };
  var ui_MouseUp = function ui_MouseUp() {
    ref_Resize.current = null; // Reset on mouse up
  };

  /// CLICK HANDLERS //////////////////////////////////////////////////////////
  /// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  function ui_SetSelectedColumn(event, index) {
    event.preventDefault();
    event.stopPropagation();
    if (_columndefs[index].sortDisabled) return; // If sort is disabled, do nothing

    if (_sortColumnIdx === index) {
      // if already selected, toggle the sort order
      var newSortOrder = void 0;
      if (_sortOrder === 0) newSortOrder = -1;else if (_sortOrder > 0) newSortOrder = 0;else newSortOrder = 1;
      setSortOrder(newSortOrder);
    } else {
      // otherwise default to the previous order
      setSortOrder(_previousColSortOrder[index]);
    }

    // update the previous sort order
    setPreviousColSortOrder(_extends({}, _previousColSortOrder, _defineProperty({}, _sortColumnIdx, _sortOrder)));

    setSortColumnIdx(index);
  }

  /// BUILT-IN SORTERS ////////////////////////////////////////////////////////
  /// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  function m_SortByText(key, tdata, order) {
    var sortedData = [].concat(_toConsumableArray(tdata)).sort(function (a, b) {
      if (DBG) console.log('sort by text', a[key], b[key]);
      if (!a[key] && !b[key]) return 0;
      if (!a[key]) return 1; // Move undefined or '' to the bottom regardless of sort order
      if (!b[key]) return -1; // Move undefined or '' the bottom regardless of sort order
      if (a[key] < b[key]) return order;
      if (a[key] > b[key]) return order * -1;
      return 0;
    });
    return sortedData;
  }
  function m_SortCaseInsensitive(key, tdata, order) {
    var sortedData = [].concat(_toConsumableArray(tdata)).sort(function (a, b) {
      if (!a[key] && !b[key]) return 0;
      if (!a[key]) return 1; // Move undefined or '' to the bottom regardless of sort order
      if (!b[key]) return -1; // Move undefined or '' the bottom regardless of sort order
      if (a[key].toLowerCase() < b[key].toLowerCase()) return order;
      if (a[key].toLowerCase() > b[key].toLowerCase()) return order * -1;
      return 0;
    });
    return sortedData;
  }
  /// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  function m_SortByMarkdown(key, tdata, order) {
    var sortedData = [].concat(_toConsumableArray(tdata)).sort(function (a, b) {
      // NC's markdown format from NCNodeTable will pass:
      // { html, raw}
      // We will sort by the raw text
      if (!a[key].raw) return 1; // Move undefined or '' to the bottom regardless of sort order
      if (!b[key].raw) return -1; // Move undefined or '' the bottom regardless of sort order
      if (a[key].raw < b[key].raw) return order;
      if (a[key].raw > b[key].raw) return order * -1;
      return 0;
    });
    return sortedData;
  }
  /// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  function m_SortByNumber(key, tdata, order) {
    var sortedData = [].concat(_toConsumableArray(tdata)).sort(function (a, b) {
      var akey = Number(a[key]);
      var bkey = Number(b[key]);
      if (isNaN(akey) && isNaN(bkey)) return 0;
      if (isNaN(akey)) return 1; // Move NaN to the bottom regardless of sort order
      if (isNaN(bkey)) return -1; // Move NaN to the bottom regardless of sort order
      if (akey < bkey) return order;
      if (akey > bkey) return order * -1;
      return 0;
    });
    return sortedData;
  }
  /// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  function m_SortByHDate(key, tdata, order) {
    var sortedData = [].concat(_toConsumableArray(tdata)).sort(function (a, b) {
      var akey = _hdate2.default.Parse(a[key]); // parseResult
      var bkey = _hdate2.default.Parse(b[key]);
      // if ANY is defined, it's automatically greater than undefined
      if (akey.length > 0 && bkey.length < 1) return order;
      if (akey.length < 1 && bkey.length > 0) return order * -1;
      if (akey.length < 1 && bkey.length < 1) return 0;
      // two valid dates, compare them!
      var da = akey[0].start.knownValues;
      var db = bkey[0].start.knownValues;
      var dateorder = void 0;
      if (da.year !== db.year) {
        dateorder = da.year - db.year;
      } else if (da.month !== db.month) {
        dateorder = da.month - db.month;
      } else if (da.day !== db.day) {
        dateorder = da.day - db.day;
      } else if (da.hour !== db.hour) {
        dateorder = da.hour - db.hour;
      } else if (da.minute !== db.minute) {
        dateorder = da.minute - db.minute;
      } else if (da.second !== db.second) {
        dateorder = da.second - db.second;
      }
      return dateorder * order;
    });
    return sortedData;
  }
  /// BUILT-IN TABLE METHODS //////////////////////////////////////////////////
  /// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  /**
   * Executes the renderer for a given column
   * @param {string} key tdata object key
   * @param {Object} tdata full table data object so you can access other keys
   * @param {Object} coldef column definition
   * @returns The final value to be rendered in the table cell
   */
  function m_ExecuteRenderer(key, tdata, coldef) {
    var result = '';
    var customRenderer = coldef.renderer;
    if (customRenderer) {
      if (typeof customRenderer !== 'function') throw new Error('Invalid renderer for', coldef);
      result = customRenderer(key, tdata, coldef);
    } else {
      // Run built-in renderers
      var value = tdata[key];
      switch (coldef.type) {
        case 'markdown':
          // Net.Create
          result = value.html;
          break;
        case 'hdate':
          // Net.Create
          result = value; // display the raw user-entered string
          break;
        case 'timestamp':
          result = u_HumanDate(value);
          break;
        case 'hdate-short': // Net.Create
        case 'timestamp-short':
          result = u_HumanDateShort(value);
          break;
        case 'number':
        case 'text':
        case 'text-case-insensitive':
        default:
          result = value;
      }
    }
    if (coldef.tipDisabled) return result;
    return _react2.default.createElement(
      'div',
      { className: 'tabletip' },
      _react2.default.createElement(
        'div',
        { className: 'tabletip-source' },
        result
      ),
      _react2.default.createElement(
        'div',
        { className: 'tabletip-text' },
        result
      )
    );
  }
  /// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  /// Sorts then sets the table data
  function m_ExecuteSorter(tdata) {
    if (_columndefs.length < 1) return [];

    var customSorter = _columndefs[_sortColumnIdx].sorter;
    var key = _columndefs[_sortColumnIdx].data;
    var sortedData = [];
    if (customSorter) {
      if (typeof customSorter !== 'function') throw new Error('Invalid sorter');
      sortedData = customSorter(key, tdata, _sortOrder);
    } else {
      // Run built-in sorters
      switch (_columndefs[_sortColumnIdx].type) {
        case 'hdate':
          sortedData = m_SortByHDate(key, tdata, _sortOrder);
          break;
        case 'markdown':
          sortedData = m_SortByMarkdown(key, tdata, _sortOrder);
          break;
        case 'number':
          sortedData = m_SortByNumber(key, tdata, _sortOrder);
          break;
        case 'text-case-insensitive':
          sortedData = m_SortCaseInsensitive(key, tdata, _sortOrder);
          break;
        case 'timestamp': // timestamp is a string
        case 'text':
        default:
          sortedData = m_SortByText(key, tdata, _sortOrder);
      }
    }
    setTableData(sortedData);
  }
  /// RENDER //////////////////////////////////////////////////////////////////
  /// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  /**
   * jsx_SortBtn tracks two states:
   * if sort is disabled:
   *  - do not show sort button in header
   *  - the header is not clickable (no cursor pointer)
   * if sort is enabled:
   *  - show sort erder: '▲' or '▼' or '▲▼'
   *  - show cursor pointer
   */
  function jsx_SortBtn(columndef, idx) {
    var isSelected = _sortColumnIdx === idx;
    if (columndef.sortDisabled) {
      return _react2.default.createElement(
        'span',
        { className: 'sortDisabled' },
        '-'
      );
    } else if (isSelected) {
      return _react2.default.createElement(
        'span',
        { className: 'sortEnabled' },
        SORTORDER.get(_sortOrder)
      );
    } else {
      // not selected, so sort order is the previous sort order
      return _react2.default.createElement(
        'span',
        { className: 'sortEnabled' },
        SORTORDER.get(_previousColSortOrder[idx])
      );
    }
  }

  // show cursor pointer if not sortDisabled
  // needs to be set at `th` not at `th span`

  return _react2.default.createElement(
    'div',
    {
      className: 'URTable',
      ref: ref_Table,
      onMouseMove: ui_MouseMove,
      onMouseUp: ui_MouseUp
    },
    _react2.default.createElement(
      'table',
      null,
      _react2.default.createElement(
        'thead',
        null,
        _react2.default.createElement(
          'tr',
          null,
          _columndefs.map(function (coldef, idx) {
            return _react2.default.createElement(
              'th',
              {
                key: idx,
                className: _sortColumnIdx === idx ? 'selected' : '',
                width: '' + _columnWidths[idx]
              },
              _react2.default.createElement(
                'div',
                { onClick: function onClick(e) {
                    return ui_SetSelectedColumn(e, idx);
                  } },
                coldef.title,
                '\xA0',
                jsx_SortBtn(coldef, idx)
              ),
              _react2.default.createElement('div', {
                className: 'resize-handle',
                onMouseDown: function onMouseDown(e) {
                  return ui_MouseDown(e, idx);
                },
                hidden: idx === _columndefs.length - 1 // hide last resize handle
              })
            );
          })
        )
      ),
      _react2.default.createElement(
        'tbody',
        null,
        _tabledata.map(function (tdata, idx) {
          return (
            /* Net.Create Special Handling: Show filter transparency */
            _react2.default.createElement(
              'tr',
              { key: idx, style: { opacity: tdata.meta.filteredTransparency } },
              _columndefs.map(function (coldef, idx) {
                return _react2.default.createElement(
                  'td',
                  { key: idx },
                  m_ExecuteRenderer(coldef.data, tdata, coldef)
                );
              })
            )
          );
        })
      )
    )
  );
}

/// EXPORT REACT COMPONENT ////////////////////////////////////////////////////
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
exports.default = URTable;
});

require.register("view/netcreate/components/filter/FilterEnums.js", function(exports, require, module) {
'use strict';

/*//////////////////////////////// ABOUT \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\*\

  Filter UDATA Messages

  Affects ALL Filters
  ===================

    FILTERDEFS      AppState
                    Sets the FILTERDEFS data object
                    Triggers AppStateChange

    FILTER_CLEAR    Message / LocalCall
                    Unhides all objects on the graph
                    Resets filter form to blank state

    FILTER_SUMMARY_UPDATE
                    Message / LocalCall
                    Summary of filters for InfoPanel display
                    is updated.


  Affects Individual Filters
  ==========================

    FILTER_DEFINE   Define a single new filter

\*\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ * //////////////////////////////////////*/

/// CONSTANTS & DECLARATIONS //////////////////////////////////////////////////
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
var FILTER = {};
// Filter Panel Label
FILTER.PANEL_LABEL = 'ANALYSIS';
// Determines whether filter action is to highlight/fade or remove (filter) nodes and edges
// These labels are used as default values if an older version template has not defined them
FILTER.ACTION = {};
FILTER.ACTION.FADE = 'FADE';
FILTER.ACTION.FILTER = 'FILTERING'; // FIX: Remove this after we decide to remove FILTER/HIDE
FILTER.ACTION.REDUCE = 'REMOVE';
FILTER.ACTION.FOCUS = 'FOCUS';
// Types of filters definable in template files.
// See also `nc-ui.js` for field types
FILTER.TYPES = {};
FILTER.TYPES.STRING = 'string';
FILTER.TYPES.NUMBER = 'number';
FILTER.TYPES.SELECT = 'select';
FILTER.TYPES.NODE = 'node'; // edge source / target
FILTER.TYPES.DATE = 'date';
FILTER.TYPES.HDATE = 'hdate'; // custom historical date
FILTER.TYPES.MARKDOWN = 'markdown';
FILTER.TYPES.TIMESTAMP = 'timestamp';
FILTER.TYPES.INFOORIGIN = 'infoOrigin';
FILTER.TYPES.HIDDEN = 'hidden';
// Special Edge Keys mapped to node objects
// Used by m_IsEdgeMatchedByFilter to find node labels
FILTER.KEY = {};
FILTER.KEY.SOURCE = 'source';
FILTER.KEY.TARGET = 'target';
// key needs to match the OPERATOR name for lookup purposes
// in filter-mgr.js
FILTER.OPERATORS = {};
FILTER.OPERATORS.NO_OP = { key: 'NO_OP', label: '--' };
FILTER.OPERATORS.CONTAINS = { key: 'CONTAINS', label: 'contains' };
FILTER.OPERATORS.NOT_CONTAINS = { key: 'NOT_CONTAINS', label: 'does not contain' };
FILTER.OPERATORS.IS_EMPTY = { key: 'IS_EMPTY', label: 'is empty' };
FILTER.OPERATORS.IS_NOT_EMPTY = { key: 'IS_NOT_EMPTY', label: 'is not empty' };
FILTER.OPERATORS.EQ = { key: 'EQ', label: '=' };
FILTER.OPERATORS.NOT_EQ = { key: 'NOT_EQ', label: '\u2260' };
FILTER.OPERATORS.GT = { key: 'GT', label: '>' };
FILTER.OPERATORS.GT_EQ = { key: 'GT_EQ', label: '>=' };
FILTER.OPERATORS.LT = { key: 'LT', label: '<' };
FILTER.OPERATORS.LT_EQ = { key: 'LT_EQ', label: '<=' };

/// MODULE EXPORTS ////////////////////////////////////////////////////////////
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
module.exports = FILTER;
});

require.register("view/netcreate/components/filter/NCFilterGroup.jsx", function(exports, require, module) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _FilterEnums = require('./FilterEnums');

var _FilterEnums2 = _interopRequireDefault(_FilterEnums);

var _NCNumberFilter = require('./NCNumberFilter');

var _NCNumberFilter2 = _interopRequireDefault(_NCNumberFilter);

var _NCStringFilter = require('./NCStringFilter');

var _NCStringFilter2 = _interopRequireDefault(_NCStringFilter);

var _NCSelectFilter = require('./NCSelectFilter');

var _NCSelectFilter2 = _interopRequireDefault(_NCSelectFilter);

var _NCHDateFilter = require('./NCHDateFilter');

var _NCHDateFilter2 = _interopRequireDefault(_NCHDateFilter);

var _NCFilterGroupProperties = require('./NCFilterGroupProperties');

var _NCFilterGroupProperties2 = _interopRequireDefault(_NCFilterGroupProperties);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/// METHODS ///////////////////////////////////////////////////////////////////
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
function NCFilterGroup(_ref) {
  var group = _ref.group,
      label = _ref.label,
      filters = _ref.filters,
      filterAction = _ref.filterAction,
      transparency = _ref.transparency;

  return _react2.default.createElement(
    'div',
    { className: 'filter-group' },
    _react2.default.createElement(
      'h1',
      null,
      label
    ),
    filters.map(function (filter) {
      switch (filter.type) {
        case _FilterEnums2.default.TYPES.MARKDOWN:
        case _FilterEnums2.default.TYPES.NODE:
        case _FilterEnums2.default.TYPES.DATE: // generic dates (not hdate) are treated like strings
        case _FilterEnums2.default.TYPES.INFOORIGIN:
        case _FilterEnums2.default.TYPES.STRING:
          return _react2.default.createElement(_NCStringFilter2.default, {
            key: filter.id,
            group: group,
            filter: filter,
            filterAction: filterAction
          });
        case _FilterEnums2.default.TYPES.NUMBER:
          return _react2.default.createElement(_NCNumberFilter2.default, {
            key: filter.id,
            group: group,
            filter: filter,
            filterAction: filterAction
          });
        case _FilterEnums2.default.TYPES.SELECT:
          return _react2.default.createElement(_NCSelectFilter2.default, {
            key: filter.id,
            group: group,
            filter: filter,
            filterAction: filterAction
          });
        case _FilterEnums2.default.TYPES.TIMESTAMP: // UI uses HDate to set date, but parser uses custom timestamp
        case _FilterEnums2.default.TYPES.HDATE:
          return _react2.default.createElement(_NCHDateFilter2.default, {
            key: filter.id,
            group: group,
            filter: filter,
            filterAction: filterAction
          });
        default:
          console.error('FilterGroup: Filter Type not found ' + filter.type + ' for filter', filter);
          break;
      }
      return '';
    }),
    _react2.default.createElement(_NCFilterGroupProperties2.default, { group: group, transparency: transparency }),
    _react2.default.createElement('hr', null)
  );
}

/// EXPORT REACT COMPONENT ////////////////////////////////////////////////////
/*///////////////////////////////// ABOUT \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\*\

  Group of Filters for Nodes or Edges

\*\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ * /////////////////////////////////////*/

exports.default = NCFilterGroup;
});

require.register("view/netcreate/components/filter/NCFilterGroupProperties.jsx", function(exports, require, module) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }(); /*///////////////////////////////// ABOUT \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\*\

ilter Group Properties



var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _client = require('unisys/client');

var _client2 = _interopRequireDefault(_client);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/// CONSTANTS & DECLARATIONS //////////////////////////////////////////////////
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/// Initialize UNISYS DATA LINK for react component
var UDATAOwner = { name: 'NCFilterGroupProperties' };
var UDATA = _client2.default.NewDataLink(UDATAOwner);

/// CLASS DECLARATIONS ////////////////////////////////////////////////////////
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
function NCFilterGroupProperties(_ref) {
  var group = _ref.group,
      transparency = _ref.transparency;

  // Currently inconsistent because not passing in a key, etc.
  // if we expand on this notion of group-leve globals we'll need to update
  var _useState = (0, _react.useState)({
    group: group,
    inputval: transparency, // Used to maintain input caret position
    transparency: transparency
  }),
      _useState2 = _slicedToArray(_useState, 2),
      state = _useState2[0],
      setState = _useState2[1];

  /// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -


  (0, _react.useEffect)(function () {
    BroadcastChange();
  }, [state]);

  /// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  // this is overkill to have these be separate, but mirroring the other filter components and aiming
  // to have future additional properties here, so this way the flow won't change (change functions call trigger change)
  function BroadcastChange() {
    // if no data has changed, skip update
    if (transparency === state.transparency) return;

    // for debugging
    // console.log(
    //   'Filter group for ' +
    //     this.state.group +
    //     ' setting transparency to ' +
    //     this.state.transparency
    // );

    // set the transparency globally for this group (nodes or edges)
    UDATA.LocalCall('FILTER_DEFINE', {
      group: group,
      type: 'transparency',
      transparency: state.inputval
    }); // set a SINGLE filter
  }
  /// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  function ui_OnChangeValue(event) {
    // React pools synthetic events for performance. Once the event callback
    // finishes running, React recycles the event object by clearing its
    // properties (setting them to null). So if you try to use event.target
    // asynchronously (e.g. in a setTimeout, or after an await), it will be null.
    var inputval = event.target.value;
    setState(function (prevState) {
      return _extends({}, prevState, {
        inputval: inputval,
        transparency: transparency
      });
    });
  }
  /// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  function ui_OnSubmit(event) {
    // Prevent "ENTER" from triggering form submission!
    event.preventDefault();
    event.stopPropagation();
  }

  /// COMPONENT RENDER ////////////////////////////////////////////////////////
  /// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  return _react2.default.createElement(
    'div',
    null,
    _react2.default.createElement('br', null),
    _react2.default.createElement(
      'form',
      { className: 'filter-item', key: group, onSubmit: ui_OnSubmit },
      _react2.default.createElement(
        'fieldset',
        null,
        _react2.default.createElement(
          'label',
          { className: 'help' },
          ' Transparency\xA0'
        ),
        _react2.default.createElement('input', {
          type: 'text',
          value: state.inputval,
          onChange: ui_OnChangeValue,
          'aria-label': 'Transparency filter value'
        })
      )
    )
  );
}

/// EXPORT CLASS DEFINITION ///////////////////////////////////////////////////
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
exports.default = NCFilterGroupProperties;
});

require.register("view/netcreate/components/filter/NCFiltersPanel.jsx", function(exports, require, module) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }(); /*//////////////////////////////// ABOUT \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\*\



his is the base UI component that displays filters in the InfoPanel.

iltersPanel
|-- FiltersGroup
|-- StringFilter
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               |-- NumberFilter
|-- SelectFilter

iltersPanel reads data directly from FILTERDEFS.

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         \*\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ * //////////////////////////////////////*/

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _client = require('unisys/client');

var _client2 = _interopRequireDefault(_client);

var _FilterEnums = require('./FilterEnums');

var _FilterEnums2 = _interopRequireDefault(_FilterEnums);

var _NCFilterGroup = require('./NCFilterGroup');

var _NCFilterGroup2 = _interopRequireDefault(_NCFilterGroup);

var _NCFocusFilter = require('./NCFocusFilter');

var _NCFocusFilter2 = _interopRequireDefault(_NCFocusFilter);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/// CONSTANTS & DECLARATIONS //////////////////////////////////////////////////
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/// Initialize UNISYS DATA LINK for react component
var UDATAOwner = { name: 'NCFiltersPanel' };
var UDATA = _client2.default.NewDataLink(UDATAOwner);
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
var DBG = false;
var PR = 'NCFiltersPanel: ';

/// CLASS DECLARATIONS ////////////////////////////////////////////////////////
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
function NCFiltersPanel(_ref) {
  var hidden = _ref.hidden;

  /// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  // Load Templates
  var TEMPLATE = UDATA.AppState('TEMPLATE');
  var TABS = {
    FADE: { action: _FilterEnums2.default.ACTION.FADE, label: TEMPLATE.filterFade },
    REDUCE: { action: _FilterEnums2.default.ACTION.REDUCE, label: TEMPLATE.filterReduce },
    FOCUS: { action: _FilterEnums2.default.ACTION.FOCUS, label: TEMPLATE.filterFocus }
  };
  // The intial `OnAppStateChange("FILTERDEFS")` event when the template is
  // first loaded is called well before FiltersPanel is
  // even constructed.  So we need to explicitly load it here.
  var FILTERDEFS = UDATA.AppState('FILTERDEFS');

  var _useState = (0, _react.useState)({
    nodes: FILTERDEFS.nodes,
    edges: FILTERDEFS.edges,
    filterAction: _FilterEnums2.default.ACTION.FADE,
    filterActionHelp: '',
    focusSourceLabel: undefined,
    focusRange: undefined,
    statsSummary: ''
  }),
      _useState2 = _slicedToArray(_useState, 2),
      state = _useState2[0],
      setState = _useState2[1];

  /// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -


  (0, _react.useEffect)(function () {
    // update filter stats on load
    var FILTEREDNCDATA = UDATA.AppState('FILTEREDNCDATA');
    urstate_UpdateFilteredNCData(FILTEREDNCDATA);

    UDATA.OnAppStateChange('FILTERDEFS', urstate_UpdateFilterDefs);
    UDATA.OnAppStateChange('FILTEREDNCDATA', urstate_UpdateFilteredNCData);
    return function () {
      UDATA.AppStateChangeOff('FILTERDEFS', urstate_UpdateFilterDefs);
      UDATA.AppStateChangeOff('FILTEREDNCDATA', urstate_UpdateFilteredNCData);
    };
  }, []);

  /// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  function urstate_UpdateFilterDefs(data) {
    if (DBG) console.log(PR, 'FILTERDEFS', data);
    setState(function (prevState) {
      return _extends({}, prevState, {
        nodes: data.nodes,
        edges: data.edges,
        filterAction: data.filterAction || prevState.filterAction,
        filterActionHelp: data.filterActionHelp || prevState.filterActionHelp,
        focusSourceLabel: data.focus && data.focus.sourceLabel ? data.focus.sourceLabel : '',
        focusRange: data.focus && data.focus.range ? data.focus.range : undefined
      });
    });
  }
  /// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  function urstate_UpdateFilteredNCData() {
    var data = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : { stats: {} };

    // Skip stats update if not defined yet
    if (!data.stats) return;
    setState(function (prevState) {
      return _extends({}, prevState, { statsSummary: data.stats.statsSummary });
    });
  }
  /// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  function evt_LookupFilterHelp(filterAction) {
    if (filterAction === _FilterEnums2.default.ACTION.FADE) return TEMPLATE.filterFadeHelp;
    if (filterAction === _FilterEnums2.default.ACTION.REDUCE) return TEMPLATE.filterReduceHelp;
    if (filterAction === _FilterEnums2.default.ACTION.FOCUS) return TEMPLATE.filterFocusHelp;
    return 'Help not found';
  }
  /// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  function ui_OnClearBtnClick() {
    UDATA.LocalCall('FILTER_CLEAR');
  }
  /// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  function ui_SelectFilterAction(filterAction) {
    setState(function (prevState) {
      return _extends({}, prevState, { filterAction: filterAction });
    });
    UDATA.LocalCall('FILTERS_UPDATE', { filterAction: filterAction });
  }

  /// COMPONENT RENDER ////////////////////////////////////////////////////////
  /// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  var filterAction = state.filterAction,
      focusRange = state.focusRange,
      focusSourceLabel = state.focusSourceLabel,
      statsSummary = state.statsSummary,
      nodes = state.nodes,
      edges = state.edges;


  if (!nodes || !edges) return 'loading...'; // skip rendering for now if nodes and edges haven't been loaded yet.

  var defs = [nodes, edges];
  var filterActionHelp = evt_LookupFilterHelp(filterAction);

  var FilterControlPanel = void 0;
  if (filterAction === _FilterEnums2.default.ACTION.FOCUS) {
    FilterControlPanel = _react2.default.createElement(_NCFocusFilter2.default, { focusSourceLabel: focusSourceLabel, focusRange: focusRange });
  } else {
    FilterControlPanel = defs.map(function (def) {
      return _react2.default.createElement(_NCFilterGroup2.default, {
        key: def.label,
        group: def.group,
        label: def.label,
        filters: def.filters,
        filterAction: filterAction,
        transparency: def.transparency
      });
    });
  }

  return _react2.default.createElement(
    'div',
    { className: 'NCFiltersPanel ' + (hidden ? 'hidden' : '') },
    _react2.default.createElement(
      'div',
      { className: 'tabselectors', role: 'tablist' },
      Object.keys(TABS).map(function (k) {
        return _react2.default.createElement(
          'button',
          {
            key: k,
            className: filterAction === TABS[k].action ? 'selected' : '',
            onClick: function onClick() {
              return ui_SelectFilterAction(TABS[k].action);
            },
            role: 'tab',
            type: 'button',
            'aria-selected': filterAction === TABS[k].action,
            'aria-controls': 'tabpanel'
          },
          TABS[k].label
        );
      })
    ),
    _react2.default.createElement(
      'div',
      { className: 'tabpanels', id: 'tabpanel' },
      _react2.default.createElement(
        'label',
        { className: 'help' },
        filterActionHelp
      ),
      FilterControlPanel,
      _react2.default.createElement(
        'div',
        { className: 'controlbar' },
        _react2.default.createElement(
          'button',
          { className: 'small', type: 'button', onClick: ui_OnClearBtnClick },
          'Clear Filters'
        )
      )
    ),
    _react2.default.createElement(
      'label',
      { className: 'help' },
      statsSummary
    )
  );
}

/// EXPORT REACT COMPONENT ////////////////////////////////////////////////////
exports.default = NCFiltersPanel;
});

require.register("view/netcreate/components/filter/NCFocusFilter.jsx", function(exports, require, module) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }(); /*//////////////////////////////// ABOUT \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\*\



ocusFilter provides the UI for entering the numeric range value for
the focus filter.

election changes directly trigger a UDATA.LocalCall('FILTER_DEFINE',...).



var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _client = require('unisys/client');

var _client2 = _interopRequireDefault(_client);

var _NCAutoSuggest = require('../NCAutoSuggest');

var _NCAutoSuggest2 = _interopRequireDefault(_NCAutoSuggest);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/// CONSTANTS & DECLARATIONS //////////////////////////////////////////////////
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/// Initialize UNISYS DATA LINK for react component
var UDATAOwner = { name: 'NCFocusFilter' };
var UDATA = _client2.default.NewDataLink(UDATAOwner);

/// REACT FUNCTIONAL COMPONENT ////////////////////////////////////////////////
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
function NCFocusFilter(_ref) {
  var focusSourceLabel = _ref.focusSourceLabel,
      focusRange = _ref.focusRange;

  var _useState = (0, _react.useState)({
    focusInputLabel: focusSourceLabel, // Used locally to define result
    focusRange: focusRange // Used locally to define result
  }),
      _useState2 = _slicedToArray(_useState, 2),
      state = _useState2[0],
      setState = _useState2[1];

  /// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -


  (0, _react.useEffect)(function () {
    BroadcastChange();
  }, [state]);
  /// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  (0, _react.useEffect)(function () {
    setState(function (prevState) {
      return _extends({}, prevState, { focusInputLabel: focusSourceLabel });
    }); // update local state
  }, [focusSourceLabel]);

  /// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  function ui_NodeInputUpdate(key, value) {
    setState(function (prevState) {
      return _extends({}, prevState, { focusInputLabel: value });
    }); // update local state
  }
  /// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  /**
   * User has selected a node with NCAutoSuggest, either
   * - Clicking on a suggested node
   * - Hitting Enter with the form field showing either a valid node or a new node
   * @param {string} key is 'id' or 'label'
   * @param {string} label
   * @param {number} id
   */
  function ui_NodeSelect(key, label, id) {
    if (UDATA) {
      var NCDATA = UDATA.AppState('NCDATA');
      var foundNode = NCDATA.nodes.find(function (n) {
        return n.id === id;
      });
      if (foundNode) UDATA.LocalCall('FILTER_DEFINE', {
        group: 'focus',
        filter: {
          source: id,
          sourceLabel: foundNode.label
        }
      }); // set a SINGLE filter
    }
    // this.ValidateSourceTarget(key, label, id);
  }
  /// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  function ui_OnChangeValue(e) {
    // The built in <input min="0"> will keep the step buttons from going below 0,
    // but the user can still input "0".  We can't just use Math.min() because the
    // user would not be allowed to use backspace to delete the value before
    // entering a new number.  Replacing invalid numbers with a blank value
    // feels like a more natural way of editing.
    var focusRange = e.target.value < 1 ? '' : Number(e.target.value);
    setState(function (prevState) {
      return _extends({}, prevState, { focusRange: focusRange });
    });
  }
  /// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  function ui_DeselectNode(e) {
    UDATA.LocalCall('FILTER_DEFINE', {
      group: 'focus',
      filter: {
        deselectNode: true // hacky -- force m_FilterDefine to clear the selection
      }
    });
  }
  /// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  function BroadcastChange() {
    // even though we allow "" in the field, we always define the range to be 1
    // so that something will show
    var focusRange = state.focusRange < 1 ? 1 : state.focusRange;
    if (UDATA) UDATA.LocalCall('FILTER_DEFINE', {
      group: 'focus',
      filter: {
        range: focusRange
      }
    }); // set a SINGLE filter
  }
  /// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  function ui_OnSubmit(event) {
    // Prevent "ENTER" from triggering form submission!
    event.preventDefault();
    event.stopPropagation();
  }

  /// COMPONENT RENDER ////////////////////////////////////////////////////////
  /// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  // show button if node is selected
  // else show autosuugst
  // clicking enables autosuggest
  var selectedNodeJsx = void 0;
  var selectedNodeHelp = void 0;
  if (focusSourceLabel) {
    selectedNodeJsx = _react2.default.createElement(
      'button',
      { type: 'button', className: 'focusnode', onClick: ui_DeselectNode },
      focusSourceLabel
    );
    selectedNodeHelp = 'Click to select another node';
  } else {
    selectedNodeJsx = _react2.default.createElement(_NCAutoSuggest2.default, {
      value: state.focusInputLabel,
      onChange: ui_NodeInputUpdate,
      onSelect: ui_NodeSelect
    });
    selectedNodeHelp = 'Click a node or type a node name..';
  }

  return _react2.default.createElement(
    'div',
    { className: 'filter-group' },
    _react2.default.createElement('h1', null),
    _react2.default.createElement(
      'form',
      { className: 'filter-item', onSubmit: ui_OnSubmit },
      _react2.default.createElement(
        'fieldset',
        null,
        _react2.default.createElement('label', { className: 'help' }),
        _react2.default.createElement(
          'p',
          { className: 'help' },
          selectedNodeHelp
        )
      ),
      _react2.default.createElement(
        'fieldset',
        null,
        _react2.default.createElement(
          'label',
          { className: 'help' },
          'Selected Node:'
        ),
        selectedNodeJsx
      ),
      _react2.default.createElement(
        'fieldset',
        null,
        _react2.default.createElement(
          'label',
          { className: 'help' },
          'Range ',
          _react2.default.createElement(
            'i',
            null,
            '(>0)'
          ),
          ':\xA0'
        ),
        _react2.default.createElement('input', {
          type: 'number',
          min: '1',
          onChange: ui_OnChangeValue,
          value: focusRange,
          'aria-label': 'Range value'
        })
      )
    )
  );
}

/// EXPORT REACT COMPONENT ////////////////////////////////////////////////////
exports.default = NCFocusFilter;
});

require.register("view/netcreate/components/filter/NCHDateFilter.jsx", function(exports, require, module) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }(); /*//////////////////////////////// ABOUT \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\*\



ateFilter provides the UI for entering search strings for hdate-based
node and edge properties.

even Numeric  operators are supported:

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           * >=





atches will SHOW the resulting node or edge.
ny nodes/edges not matching will be hidden.

he filter definition is passed in via props.

props
{
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 group       // "nodes" or "edges"
filter: {
id,       // numeric id used for unique React key
type,     // filter type, e.g "string" vs "number"
key,      // node field key from the template
keylabel, // human friendly display name for the key.
his can be customized in the template.
operator, // the comparison function, e.g. 'contains' or '>'
value     // the search value to be used for matching
},
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 filterAction // selected action
}
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         
he `id` variable allows us to potentially support multiple search filters
using the same key, e.g. we could have two 'Label' filters.

n order to retain the input selection cursor between state updates, we use
a secondary state `inputval` that retains the cursor position.


                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         \*\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ * //////////////////////////////////////*/

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _client = require('unisys/client');

var _client2 = _interopRequireDefault(_client);

var _FilterEnums = require('./FilterEnums');

var _FilterEnums2 = _interopRequireDefault(_FilterEnums);

var _URDateField = require('../URDateField');

var _URDateField2 = _interopRequireDefault(_URDateField);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/// CONSTANTS & DECLARATIONS //////////////////////////////////////////////////
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/// Initialize UNISYS DATA LINK for react component
var UDATAOwner = { name: 'NCDateFilter' };
var UDATA = _client2.default.NewDataLink(UDATAOwner);
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
var OPERATORS = [_FilterEnums2.default.OPERATORS.NO_OP, _FilterEnums2.default.OPERATORS.EQ, _FilterEnums2.default.OPERATORS.NOT_EQ, _FilterEnums2.default.OPERATORS.LT, _FilterEnums2.default.OPERATORS.LT_EQ, _FilterEnums2.default.OPERATORS.GT, _FilterEnums2.default.OPERATORS.GT_EQ];

/// REACT FUNCTIONAL COMPONENT ////////////////////////////////////////////////
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
function NCHDateFilter(_ref) {
  var group = _ref.group,
      _ref$filter = _ref.filter,
      id = _ref$filter.id,
      type = _ref$filter.type,
      key = _ref$filter.key,
      keylabel = _ref$filter.keylabel,
      operator = _ref$filter.operator,
      value = _ref$filter.value,
      filterAction = _ref.filterAction;

  var _useState = (0, _react.useState)({
    operator: _FilterEnums2.default.OPERATORS.NO_OP.key, // Used locally to define result
    inputval: '', // Used to maintain input caret position
    value: '' // Used to define the final result
  }),
      _useState2 = _slicedToArray(_useState, 2),
      state = _useState2[0],
      setState = _useState2[1];

  /// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -


  (0, _react.useEffect)(function () {
    UDATA.HandleMessage('FILTER_CLEAR', urmsg_ClearFilters);
    return function () {
      UDATA.UnhandleMessage('FILTER_CLEAR', urmsg_ClearFilters);
    };
  });

  (0, _react.useEffect)(function () {
    BroadcastChange();
  }, [state]);

  /// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  function urmsg_ClearFilters() {
    setState(function (prevState) {
      return _extends({}, prevState, { inputval: '' });
    });
  }
  /// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  function ui_OnChangeOperator(event) {
    var newstate = { operator: event.target.value };
    // clear value if NO_OP
    if (event.target.value === _FilterEnums2.default.OPERATORS.NO_OP.key) {
      newstate.inputval = '';
      newstate.value = '';
    }
    setState(function (prevState) {
      return _extends({}, prevState, newstate);
    });
  }
  /// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  function ui_OnChangeValue(event) {
    var value = event.target.value;
    // deconstruct the URDate {value, format, formattedString } object
    // save the raw input string
    var inputString = value.value;
    // First update the input field, retaining cursor position
    setState(function (prevState) {
      return _extends({}, prevState, { inputval: value, value: value });
    });
  }
  /// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  function BroadcastChange() {
    // if no data has changed, skip update
    if (operator === state.operator && (state.value.value === undefined || value === state.value.value)) return;

    var filterDef = {
      id: id,
      type: type,
      key: key,
      keylabel: keylabel,
      operator: state.operator,
      value: state.inputval
    };
    if (UDATA) UDATA.LocalCall('FILTER_DEFINE', {
      group: group,
      filter: filterDef,
      filterAction: filterAction
    }); // set a SINGLE filter
  }
  /// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  function ui_OnSubmit(event) {
    // Prevent "ENTER" from triggering form submission!
    event.preventDefault();
    event.stopPropagation();
  }

  /// COMPONENT RENDER ////////////////////////////////////////////////////////
  /// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  return _react2.default.createElement(
    'form',
    { className: 'filter-item', key: id, onSubmit: ui_OnSubmit },
    _react2.default.createElement(
      'fieldset',
      null,
      _react2.default.createElement(
        'label',
        { className: 'help' },
        ' ',
        keylabel,
        ' '
      ),
      _react2.default.createElement(
        'select',
        {
          type: 'select',
          value: operator,
          onChange: ui_OnChangeOperator,
          'aria-label': keylabel + ' filter operator'
        },
        OPERATORS.map(function (op) {
          return _react2.default.createElement(
            'option',
            { value: op.key, key: '' + id + op.key },
            op.label
          );
        })
      ),
      _react2.default.createElement(_URDateField2.default, {
        id: key,
        key: key + 'value',
        value: state.inputval,
        isFilter: true,
        onChange: ui_OnChangeValue,
        disabled: operator === _FilterEnums2.default.OPERATORS.NO_OP.key
      })
    )
  );
}

/// EXPORT REACT COMPONENT ////////////////////////////////////////////////////
exports.default = NCHDateFilter;
});

require.register("view/netcreate/components/filter/NCNumberFilter.js", function(exports, require, module) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }(); /*//////////////////////////////// ABOUT \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\*\



umberFilter provides the UI for entering search strings for numeric-based
node and edge properties.

even Numeric  operators are supported:







atches will SHOW the resulting node or edge.
ny nodes/edges not matching will be hidden.

he filter definition is passed in via props.

props
{
group       // "nodes" or "edges"
filter: {
id,       // numeric id used for unique React key
type,     // filter type, e.g "string" vs "number"
key,      // node field key from the template
keylabel, // human friendly display name for the key.
his can be customized in the template.
operator, // the comparison function, e.g. 'contains' or '>'
value     // the search value to be used for matching
},
filterAction // selected action
}

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           The `id` variable allows us to potentially support multiple search filters
using the same key, e.g. we could have two 'Label' filters.

n order to retain the input selection cursor between state updates, we use
a secondary state `inputval` that retains the cursor position.




var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _client = require('unisys/client');

var _client2 = _interopRequireDefault(_client);

var _FilterEnums = require('./FilterEnums');

var _FilterEnums2 = _interopRequireDefault(_FilterEnums);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/// CONSTANTS & DECLARATIONS //////////////////////////////////////////////////
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/// Initialize UNISYS DATA LINK for react component
var UDATAOwner = { name: 'NCNumberFilter' };
var UDATA = _client2.default.NewDataLink(UDATAOwner);
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
var OPERATORS = [_FilterEnums2.default.OPERATORS.NO_OP, _FilterEnums2.default.OPERATORS.EQ, _FilterEnums2.default.OPERATORS.NOT_EQ, _FilterEnums2.default.OPERATORS.LT, _FilterEnums2.default.OPERATORS.LT_EQ, _FilterEnums2.default.OPERATORS.GT, _FilterEnums2.default.OPERATORS.GT_EQ];

/// REACT FUNCTIONAL COMPONENT ////////////////////////////////////////////////
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
function NCNumberFilter(_ref) {
  var group = _ref.group,
      _ref$filter = _ref.filter,
      id = _ref$filter.id,
      type = _ref$filter.type,
      key = _ref$filter.key,
      keylabel = _ref$filter.keylabel,
      operator = _ref$filter.operator,
      value = _ref$filter.value,
      filterAction = _ref.filterAction;

  var _useState = (0, _react.useState)({
    operator: _FilterEnums2.default.OPERATORS.NO_OP.key, // Used locally to define result
    inputval: '', // Used to maintain input caret position
    value: '' // Used to define the final result
  }),
      _useState2 = _slicedToArray(_useState, 2),
      state = _useState2[0],
      setState = _useState2[1];

  /// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -


  (0, _react.useEffect)(function () {
    UDATA.HandleMessage('FILTER_CLEAR', urmsg_ClearFilters);
    return function () {
      UDATA.UnhandleMessage('FILTER_CLEAR', urmsg_ClearFilters);
    };
  }, []);

  (0, _react.useEffect)(function () {
    BroadcastChange();
  }, [state]);

  /// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  function urmsg_ClearFilters() {
    setState(function (prevState) {
      return _extends({}, prevState, { inputval: '' });
    });
  }
  /// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  function ui_OnChangeOperator(event) {
    var newstate = { operator: event.target.value };
    // clear value if NO_OP
    if (event.target.value === _FilterEnums2.default.OPERATORS.NO_OP.key) {
      newstate.inputval = '';
      newstate.value = '';
    }
    setState(function (prevState) {
      return _extends({}, prevState, newstate);
    });
  }
  /// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  function ui_OnChangeValue(event) {
    var value = Number(event.target.value);
    // First update the input field, retaining cursor position
    // Then send the result
    setState(function (prevState) {
      return _extends({}, prevState, { inputval: value, value: value });
    });
  }
  /// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  function BroadcastChange() {
    // if no data has changed, skip update
    if (operator === state.operator && value === state.value) return;

    var filterDef = {
      id: id,
      type: type,
      key: key,
      keylabel: keylabel,
      operator: state.operator,
      value: state.inputval
    };
    UDATA.LocalCall('FILTER_DEFINE', {
      group: group,
      filter: filterDef,
      filterAction: filterAction
    }); // set a SINGLE filter
  }
  /// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  function ui_OnSubmit(event) {
    // Prevent "ENTER" from triggering form submission!
    event.preventDefault();
    event.stopPropagation();
  }

  /// COMPONENT RENDER ////////////////////////////////////////////////////////
  /// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  return _react2.default.createElement(
    'form',
    { className: 'filter-item', key: id, onSubmit: ui_OnSubmit },
    _react2.default.createElement(
      'fieldset',
      null,
      _react2.default.createElement(
        'label',
        { className: 'help' },
        keylabel
      ),
      _react2.default.createElement(
        'select',
        {
          type: 'select',
          value: operator,
          onChange: ui_OnChangeOperator,
          'aria-label': keylabel + ' filter operator'
        },
        OPERATORS.map(function (op) {
          return _react2.default.createElement(
            'option',
            { value: op.key, key: '' + id + op.key },
            op.label
          );
        })
      ),
      _react2.default.createElement('input', {
        type: 'number',
        value: state.inputval,
        placeholder: '...',
        onChange: ui_OnChangeValue,
        disabled: operator === _FilterEnums2.default.OPERATORS.NO_OP.key,
        'aria-label': keylabel + ' filter value'
      })
    )
  );
}

/// EXPORT REACT COMPONENT ////////////////////////////////////////////////////
exports.default = NCNumberFilter;
});

require.register("view/netcreate/components/filter/NCSelectFilter.js", function(exports, require, module) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }(); /*//////////////////////////////// ABOUT \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\*\



electFilter provides the UI for setting drop-down menu selection
style filters typically used for "type" node and edge properties.

he menu options are defined with the extra `options` property
of the filter.

wo Select operators are supported (These just use the string operators on
the values set via the menu selectios):
contains
not contains

atches will SHOW the resulting node or edge.
ny nodes/edges not matching will be hidden.

he filter definition is passed in via props.

props
{
group       // "nodes" or "edges"
filter: {
id,       // numeric id used for unique React key
type,     // filter type, e.g "string" vs "number"
key,      // node field key from the template
keylabel, // human friendly display name for the key.  This can be customized in the template.
operator, // the comparison function, e.g. 'contains' or '>'
value     // the search value to be used for matching
options   // array of select option strings, e.g. ['abc','def',..]
},
filterAction // selected action
}

he `id` variable allows us to potentially support multiple search filters
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           using the same key, e.g. we could have two 'Label' filters.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         


var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _client = require('unisys/client');

var _client2 = _interopRequireDefault(_client);

var _FilterEnums = require('./FilterEnums');

var _FilterEnums2 = _interopRequireDefault(_FilterEnums);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/// CONSTANTS & DECLARATIONS //////////////////////////////////////////////////
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/// Initialize UNISYS DATA LINK for react component
var UDATAOwner = { name: 'NCSelectFilter' };
var UDATA = _client2.default.NewDataLink(UDATAOwner);
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
var OPERATORS = [_FilterEnums2.default.OPERATORS.NO_OP, _FilterEnums2.default.OPERATORS.CONTAINS, _FilterEnums2.default.OPERATORS.NOT_CONTAINS];

/// REACT FUNCTIONAL COMPONENT ////////////////////////////////////////////////
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
function NCSelectFilter(_ref) {
  var group = _ref.group,
      _ref$filter = _ref.filter,
      id = _ref$filter.id,
      type = _ref$filter.type,
      key = _ref$filter.key,
      keylabel = _ref$filter.keylabel,
      operator = _ref$filter.operator,
      value = _ref$filter.value,
      options = _ref$filter.options,
      filterAction = _ref.filterAction;

  var _useState = (0, _react.useState)({
    operator: _FilterEnums2.default.OPERATORS.NO_OP.key, // Used locally to define result
    inputval: '', // Used to maintain input caret position
    value: '' // Autoselect the first item
  }),
      _useState2 = _slicedToArray(_useState, 2),
      state = _useState2[0],
      setState = _useState2[1];

  /// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -


  (0, _react.useEffect)(function () {
    BroadcastChange();
  }, [state]);

  /// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  function ui_OnChangeOperator(event) {
    // on first update, we also need to set the default selected value
    var value = state.value || options && options.length > 0 ? options[0] : 0;
    setState(function (prevState) {
      return _extends({}, prevState, { operator: event.target.value, value: value });
    });
  }
  /// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  function ui_OnChangeValue(event) {
    setState(function (prevState) {
      return _extends({}, prevState, { value: event.target.value });
    });
  }
  /// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  function BroadcastChange() {
    // if no data has changed, skip update
    if (operator === state.operator && value === state.value) return;

    var filterDef = {
      id: id,
      type: type,
      key: key,
      keylabel: keylabel,
      operator: state.operator,
      value: state.operator === _FilterEnums2.default.OPERATORS.NO_OP.key ? '' : state.value,
      options: options
    };
    if (UDATA) UDATA.LocalCall('FILTER_DEFINE', {
      group: group,
      filter: filterDef,
      filterAction: filterAction
    }); // set a SINGLE filter
  }
  /// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  function ui_OnSubmit(event) {
    // Prevent "ENTER" from triggering form submission!
    event.preventDefault();
    event.stopPropagation();
  }

  /// COMPONENT RENDER ////////////////////////////////////////////////////////
  /// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  return _react2.default.createElement(
    'form',
    { className: 'filter-item', key: id, onSubmit: ui_OnSubmit },
    _react2.default.createElement(
      'fieldset',
      null,
      _react2.default.createElement(
        'label',
        { className: 'help' },
        ' ',
        keylabel,
        ' '
      ),
      _react2.default.createElement(
        'select',
        {
          type: 'select',
          value: operator,
          onChange: ui_OnChangeOperator,
          'aria-label': keylabel + ' filter operator'
        },
        OPERATORS.map(function (op) {
          return _react2.default.createElement(
            'option',
            { value: op.key, key: '' + id + op.key },
            op.label
          );
        })
      ),
      _react2.default.createElement(
        'select',
        {
          type: 'select',
          value: value,
          onChange: ui_OnChangeValue,
          disabled: operator === _FilterEnums2.default.OPERATORS.NO_OP.key,
          'aria-label': keylabel + ' filter value'
        },
        operator !== _FilterEnums2.default.OPERATORS.NO_OP.key ? options.map(function (op) {
          return _react2.default.createElement(
            'option',
            { value: op, key: '' + id + op },
            op
          );
        }) : ''
      )
    )
  );
}

/// EXPORT REACT COMPONENT ////////////////////////////////////////////////////
exports.default = NCSelectFilter;
});

require.register("view/netcreate/components/filter/NCStringFilter.jsx", function(exports, require, module) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }(); /*//////////////////////////////// ABOUT \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\*\



tringFilter provides the UI for entering search strings for string-based
node and edge properties.

wo String operators are supported:
contains
not contains
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         
atches will SHOW the resulting node or edge.
ny nodes/edges not matching will be hidden.

he filter definition is passed in via props.

props
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               {
group       // "nodes" or "edges"
filter: {
id,       // numeric id used for unique React key
type,     // filter type, e.g "string" vs "number"
key,      // node field key from the template
keylabel, // human friendly display name for the key.  This can be customized in the template.
operator, // the comparison function, e.g. 'contains' or '>'
value     // the search value to be used for matching
},
filterAction // selected action
}

he `id` variable allows us to potentially support multiple search filters
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           using the same key, e.g. we could have two 'Label' filters.

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           In order to retain the input selection cursor between state updates, we use
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           a secondary state `inputval` that retains the cursor position.



var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _client = require('unisys/client');

var _client2 = _interopRequireDefault(_client);

var _FilterEnums = require('./FilterEnums');

var _FilterEnums2 = _interopRequireDefault(_FilterEnums);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/// CONSTANTS & DECLARATIONS //////////////////////////////////////////////////
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/// Initialize UNISYS DATA LINK for react component
var UDATAOwner = { name: 'NCStringFilter' };
var UDATA = _client2.default.NewDataLink(UDATAOwner);
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
var OPERATORS = [_FilterEnums2.default.OPERATORS.NO_OP, _FilterEnums2.default.OPERATORS.CONTAINS, _FilterEnums2.default.OPERATORS.NOT_CONTAINS, _FilterEnums2.default.OPERATORS.IS_EMPTY, _FilterEnums2.default.OPERATORS.IS_NOT_EMPTY];

/// REACT FUNCTIONAL COMPONENT ////////////////////////////////////////////////
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
function NCStringFilter(_ref) {
  var group = _ref.group,
      _ref$filter = _ref.filter,
      id = _ref$filter.id,
      type = _ref$filter.type,
      key = _ref$filter.key,
      keylabel = _ref$filter.keylabel,
      operator = _ref$filter.operator,
      value = _ref$filter.value,
      filterAction = _ref.filterAction;

  var _useState = (0, _react.useState)({
    operator: _FilterEnums2.default.OPERATORS.NO_OP.key, // Used locally to define result
    inputval: '', // Used to maintain input caret position
    value: '' // Used to define the final result
  }),
      _useState2 = _slicedToArray(_useState, 2),
      state = _useState2[0],
      setState = _useState2[1];

  /// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -


  (0, _react.useEffect)(function () {
    UDATA.HandleMessage('FILTER_CLEAR', urmsg_ClearFilters);
    return function () {
      UDATA.UnhandleMessage('FILTER_CLEAR', urmsg_ClearFilters);
    };
  }, []);

  (0, _react.useEffect)(function () {
    BroadcastChange();
  }, [state]);

  /// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  function urmsg_ClearFilters() {
    setState(function (prevState) {
      return _extends({}, prevState, { inputval: '' });
    });
  }
  /// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  function ui_OnChangeOperator(event) {
    var newstate = { operator: event.target.value };
    // clear value if NO_OP
    if (event.target.value === _FilterEnums2.default.OPERATORS.NO_OP.key) {
      newstate.inputval = '';
      newstate.value = '';
    }
    setState(function (prevState) {
      return _extends({}, prevState, newstate);
    });
  }
  /// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  function ui_OnChangeValue(event) {
    var value = event.target.value;
    // First update the input field, retaining cursor position
    setState(function (prevState) {
      return _extends({}, prevState, { inputval: value, value: value });
    });
  }
  /// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  function BroadcastChange() {
    // if no data has changed, skip update
    if (operator === state.operator && value === state.value) return;

    var filterDef = {
      id: id,
      type: type,
      key: key,
      keylabel: keylabel,
      operator: state.operator,
      value: state.inputval
    };
    if (UDATA) UDATA.LocalCall('FILTER_DEFINE', {
      group: group,
      filter: filterDef,
      filterAction: filterAction
    }); // set a SINGLE filter
  }
  /// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  function ui_OnSubmit(event) {
    // Prevent "ENTER" from triggering form submission!
    event.preventDefault();
    event.stopPropagation();
  }

  /// COMPONENT RENDER ////////////////////////////////////////////////////////
  /// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  return _react2.default.createElement(
    'form',
    { className: 'filter-item', key: id, onSubmit: ui_OnSubmit },
    _react2.default.createElement(
      'fieldset',
      null,
      _react2.default.createElement(
        'label',
        { className: 'help' },
        ' ',
        keylabel
      ),
      _react2.default.createElement(
        'select',
        {
          type: 'select',
          value: operator,
          onChange: ui_OnChangeOperator,
          'aria-label': keylabel + ' filter operator'
        },
        OPERATORS.map(function (op) {
          return _react2.default.createElement(
            'option',
            { value: op.key, key: '' + id + op.key },
            op.label
          );
        })
      ),
      _react2.default.createElement('input', {
        type: 'text',
        value: state.inputval,
        placeholder: '...',
        onChange: ui_OnChangeValue,
        disabled: operator === _FilterEnums2.default.OPERATORS.NO_OP.key,
        hidden: operator === _FilterEnums2.default.OPERATORS.IS_EMPTY.key || operator === _FilterEnums2.default.OPERATORS.IS_NOT_EMPTY.key,
        'aria-label': keylabel + ' filter value'
      })
    )
  );
}

/// EXPORT REACT COMPONENT ////////////////////////////////////////////////////
exports.default = NCStringFilter;
});

require.register("view/netcreate/components/react-settings-bridge.js", function(exports, require, module) {
'use strict';

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/** API: Update a property in the settings object.
 *  @param string dotProp - 'group.prop'
 *  @param any value - new value for the property */
var UpdateProperty = function () {
  var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(dotProp, value) {
    var opResult;
    return regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            _context.next = 2;
            return Settings.UpdateProperty(dotProp, value);

          case 2:
            opResult = _context.sent;

            if (!(opResult.status === 'ok')) {
              _context.next = 5;
              break;
            }

            return _context.abrupt('return', opResult);

          case 5:
            throw Error('Failed to update ' + dotProp + ' with value ' + value);

          case 6:
          case 'end':
            return _context.stop();
        }
      }
    }, _callee, this);
  }));

  return function UpdateProperty(_x, _x2) {
    return _ref.apply(this, arguments);
  };
}();
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/** API: Update a group in the settings object.
 *  @param string groupName - 'group'
 *  @param object propObj - { prop: value, prop2: value2 } */


var UpdateGroup = function () {
  var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(groupName, propObj) {
    var opResult;
    return regeneratorRuntime.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            _context2.next = 2;
            return Settings.UpdateGroup(groupName, propObj);

          case 2:
            opResult = _context2.sent;

            if (!(opResult.status === 'ok')) {
              _context2.next = 5;
              break;
            }

            return _context2.abrupt('return', opResult);

          case 5:
            throw Error('Failed to update group ' + groupName + ' with properties ' + propObj);

          case 6:
          case 'end':
            return _context2.stop();
        }
      }
    }, _callee2, this);
  }));

  return function UpdateGroup(_x3, _x4) {
    return _ref2.apply(this, arguments);
  };
}();

/// DECODERS //////////////////////////////////////////////////////////////////
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/** UTILITY: Return the name of the single key in an object, undefined
 *  otherwise */


function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

/*///////////////////////////////// ABOUT \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\*\

  React Settings Bridge
  bridges the difference legacy netcreate modules and new settings manager

\*\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ * /////////////////////////////////////*/

var React = require('react');

var _require = require('ursys-min'),
    Settings = _require.Settings,
    ConsoleStyler = _require.ConsoleStyler;

var UNISYS = require('unisys/client');

/// RUNTIME UNISYS HOOKS //////////////////////////////////////////////////////
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
var LOG = console.log.bind(console);
var PR = ConsoleStyler('SettingClient', 'TagBlue');
var DBG = true;
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
var MOD = UNISYS.NewModule(module.id);

/// SETTINGS CHANGE SUBSCRIPTION //////////////////////////////////////////////
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/** API: Subscribe to changes in the settings object
 *  @param string event - 'group', 'group.prop', or '*' for all changes
 *  @param function changeHandler - (propDef, eventObj) => {} */
function Subscribe(event, changeHandler) {
  Settings.Subscribe(event, changeHandler);
}
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/** API: Subscribe to changes in the settings object
 *  @param string event - 'group', 'group.prop', or '*' for all changes
 *  @param function changeHandler - (propDef, eventObj) => {} */
function Unsubscribe(event, changeHandler) {
  Settings.Unsubscribe(event, changeHandler);
}

/// REACT SETTINGS API ////////////////////////////////////////////////////////
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/** API: PropertyDefs define the type and default value of a property, but not
 *  the value itself. */
function GetPropertyDefs() {
  return Settings.Get('PropertyDefs');
}
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/** API: MetaDefs define metadata for a property's UI representation */
function GetMetaDefs() {
  return Settings.Get('MetaDefs');
}function GetSingularKey(obj) {
  var groupList = Object.keys(obj).filter(function (key) {
    return !key.startsWith('_');
  });
  if (groupList.length !== 1) return;
  return groupList[0];
}
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/** UTILITY: Dereference groupObj, returning groupName and properties list */
function DerefGroupDef(groupObj) {
  var groupName = GetSingularKey(groupObj);
  if (groupName === undefined) return { error: 'groupObj must have a single key' };
  var properties = groupObj[groupName];
  var deref = { groupName: groupName, properties: properties };
  //
  return deref; // { groupname, properties:{[propName]:{ definition props }} }
}
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/** UTILITY: Dereference metaObj, returning just the properites for the */
function DerefSingularMetaDef(metaObj) {
  var groupName = GetSingularKey(metaObj);
  if (groupName === undefined) return { error: 'metaObj must have a single key' };
  var deref = metaObj[groupName];
  //
  return deref; // { metadata props }
}
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/** UTILITY: promote a named key as the direct value of a property,
 *  converting { group:{prop:{value:1}} } to { group: {prop:1} } for using
 *  in a settings values structure */
function FlattenPropertyDefs(propDefs) {
  var key = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'value';

  var flat = {};
  Object.keys(propDefs).forEach(function (groupName) {
    flat[groupName] = {};
    var group = propDefs[groupName];
    Object.keys(group).forEach(function (propName) {
      var propDef = group[propName];
      flat[groupName][propName] = propDef[key];
    });
  });
  return flat;
}

/// SHARED STYLING OBJECTS ////////////////////////////////////////////////////
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
var padding = '0.2rem 0.4rem';
var margin = '0.2rem 0.4rem';
var border = '1px solid #cc8';
var modColor = '#ffff00a0';
// itemGrid is for the container of a label and input
var itemGrid = {
  display: 'grid',
  gridTemplateColumns: 'minmax(200px,max-content) auto',
  alignItems: 'baseline',
  margin: margin
};
// styling for the label and input
var labelStyle = { paddingRight: '0.5rem' };
var inputStyle = { border: border, padding: padding };
// popupStyle is for the tooltip
var popupStyle = {
  position: 'fixed',
  backgroundColor: 'gray',
  color: 'white',
  padding: padding,
  zIndex: 1000,
  maxWidth: '20rem',
  display: 'none'
};
// opBtnStyle is for operation buttons
var opBtnStyle = {
  backgroundColor: 'white',
  border: border,
  padding: padding,
  margin: margin,
  cursor: 'pointer'
};
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
function GetStyles() {
  return { itemGrid: itemGrid, labelStyle: labelStyle, inputStyle: inputStyle, popupStyle: popupStyle, opBtnStyle: opBtnStyle, modColor: modColor };
}
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
function EventTargetOffsetStyle(event) {
  var rect = event.target.getBoundingClientRect();
  return {
    left: rect.left + window.scrollX + 'px',
    top: rect.top + window.scrollY + rect.height + 2 + 'px'
  };
}

/// CUSTOM HOOK FOR SETTINGS CONTEXT //////////////////////////////////////////
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/** React Hook to manage settings context. The original reference
 *  implementation is in mur-settings-context */
function useSettings() {
  var _this = this;

  var initialSettings = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  //
  var _React$useState = React.useState({}),
      _React$useState2 = _slicedToArray(_React$useState, 2),
      lastSettingsUpdate = _React$useState2[0],
      _updateSettings = _React$useState2[1];

  /** universal get settings */


  var get = function get(dotProp) {
    return Settings.Get(dotProp);
  };

  /** update property via settings manager, then trigger rerender */
  var updateProperty = function () {
    var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(dotProp, value) {
      var opResult, error, changed;
      return regeneratorRuntime.wrap(function _callee3$(_context3) {
        while (1) {
          switch (_context3.prev = _context3.next) {
            case 0:
              _context3.next = 2;
              return Settings.UpdateProperty(dotProp, value);

            case 2:
              opResult = _context3.sent;
              error = opResult.error, changed = opResult.changed;

              if (!error) {
                _context3.next = 7;
                break;
              }

              console.error('updateProperty: ' + error);
              return _context3.abrupt('return', false);

            case 7:
              _updateSettings(opResult); // trigger a rerender
              return _context3.abrupt('return', true);

            case 9:
            case 'end':
              return _context3.stop();
          }
        }
      }, _callee3, _this);
    }));

    return function updateProperty(_x7, _x8) {
      return _ref3.apply(this, arguments);
    };
  }();

  /** update group of properties via settings manager, then trigger rerender */
  var updateGroup = function () {
    var _ref4 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(groupName, propObj) {
      var opResult, error, changed;
      return regeneratorRuntime.wrap(function _callee4$(_context4) {
        while (1) {
          switch (_context4.prev = _context4.next) {
            case 0:
              _context4.next = 2;
              return Settings.UpdateGroup(groupName, propObj);

            case 2:
              opResult = _context4.sent;
              error = opResult.error, changed = opResult.changed;

              if (!error) {
                _context4.next = 7;
                break;
              }

              console.error('updateGroup: ' + error);
              return _context4.abrupt('return', false);

            case 7:
              _updateSettings(opResult); // trigger a rerender
              return _context4.abrupt('return', true);

            case 9:
            case 'end':
              return _context4.stop();
          }
        }
      }, _callee4, _this);
    }));

    return function updateGroup(_x9, _x10) {
      return _ref4.apply(this, arguments);
    };
  }();

  return {
    // to trigger rerender
    lastSettingsUpdate: lastSettingsUpdate,
    // api
    get: get,
    updateProperty: updateProperty,
    updateGroup: updateGroup
  };
}

/// EXPORTS ///////////////////////////////////////////////////////////////////
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
module.exports = {
  GetPropertyDefs: GetPropertyDefs,
  GetMetaDefs: GetMetaDefs,
  //
  DerefGroupDef: DerefGroupDef,
  DerefSingularMetaDef: DerefSingularMetaDef,
  FlattenPropertyDefs: FlattenPropertyDefs,
  //
  UpdateProperty: UpdateProperty,
  UpdateGroup: UpdateGroup,
  //
  Subscribe: Subscribe,
  Unsubscribe: Unsubscribe,
  //
  GetStyles: GetStyles,
  EventTargetOffsetStyle: EventTargetOffsetStyle,
  //
  GetSettingsContext: Settings.GetSettingsContext,
  useSettings: useSettings // locally-defined to match react version/instance
};
});

require.register("view/netcreate/components/useeffects-library.js", function(exports, require, module) {
'use strict';

var _react = require('react');

// Improved version of https://usehooks.com/useOnClickOutside/
var useClickOutside = function useClickOutside(ref, handler) {
  (0, _react.useEffect)(function () {
    var startedInside = false;
    var startedWhenMounted = false;

    var listener = function listener(event) {
      // Do nothing if `mousedown` or `touchstart` started inside ref element
      if (startedInside || !startedWhenMounted) return;
      // Do nothing if clicking ref's element or descendent elements
      if (!ref.current || ref.current.contains(event.target)) return;

      handler(event);
    };

    var validateEventStart = function validateEventStart(event) {
      startedWhenMounted = ref.current;
      startedInside = ref.current && ref.current.contains(event.target);
    };

    document.addEventListener('mousedown', validateEventStart);
    document.addEventListener('touchstart', validateEventStart);
    document.addEventListener('click', listener);

    return function () {
      document.removeEventListener('mousedown', validateEventStart);
      document.removeEventListener('touchstart', validateEventStart);
      document.removeEventListener('click', listener);
    };
  }, [ref, handler]);
};

module.exports = { useClickOutside: useClickOutside };
});

require.register("view/netcreate/edge-mgr.js", function(exports, require, module) {
'use strict';

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

/*//////////////////////////////// ABOUT \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\*\

  EDGE MANAGER

  edge-mgr takes the incoming FILTEREDNCDATA and simplifies the
  edges, doing the following:
    1. Removes any duplicate edges between a source and target
    2. Caclulates the edge size using the edge.weight parameter
    3. Updates the VDATA app state

  When VDATA is updated, NCGraphRenderer will redraw.

\*\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ * //////////////////////////////////////*/

var UNISYS = require('unisys/client');

/// INITIALIZE MODULE /////////////////////////////////////////////////////////
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
var MOD = UNISYS.NewModule(module.id);
var UDATA = UNISYS.NewDataLink(MOD);

/// UNISYS HANDLERS ///////////////////////////////////////////////////////////
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/// lifecycle INITIALIZE handler
MOD.Hook('INITIALIZE', function () {
  // FILTEREDNCDATA is updated by filter-mgr after NCDATA is changed.
  UDATA.OnAppStateChange('FILTEREDNCDATA', function (data) {
    m_RenderEdges(data);
  });
}); // end UNISYS_INIT

/// PUBLIC METHODS ////////////////////////////////////////////////////////////
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/** Looks up the edge color defined in the passed TEMPLATE
 *  Fall back to default if type is not defined
 *  @param {Object} edge
 *  @param {Object} TEMPLATE
 *  @returns {string} e.g. '#FF00FF' as defined by TEMPLATE type.option
 *                   or `undefined` if no color type is defined
 */
MOD.LookupEdgeColor = function (edge, TEMPLATE) {
  var type = edge.type;
  var typeOption = TEMPLATE.edgeDefs.type.options.find(function (o) {
    return o.label === type;
  });
  return typeOption ? typeOption.color : TEMPLATE.edgeDefs.type.options[0].color;
};

/// MODULE METHODS ////////////////////////////////////////////////////////////
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/** m_RenderEdges uses a Map to reduce duplicate edges into a single
 *  edge, calculating edge size based on edge.weight parameter along the way.
 *  @param {Object} data FILTEREDNCDATA e.g. { nodes, edges }
 *  @return Updates VDATA AppState
 */
function m_RenderEdges(data) {
  var DEFAULT_SIZE = 1;
  var VDATA = data;

  var TEMPLATE = UDATA.AppState('TEMPLATE');

  /*/ ISSUES
      * How do we handle direction?
        => Can be handled with a single edge, we just need to determin directionlaity
      * How do we handle bidrectionality?  Is it a single edge?
        => Yes.  Just with two arrowheads.
  /*/

  // Prepare to check for color
  var colorsAreDefined = TEMPLATE.edgeDefs.type && TEMPLATE.edgeDefs.type.options && Array.isArray(TEMPLATE.edgeDefs.type.options) && TEMPLATE.edgeDefs.type.options.length > 0;

  // Synthesize duplicate edges into a single edge.
  var edgeMap = new Map(); // key = {source}{target}
  var cumulativeSize = new Map(); // key = {source}{target}
  var edgeColorWeightMap = new Map(); // key = {source}{target}, value = colorMap[[color, weightTotal]]
  VDATA.edges.forEach(function (e) {
    var edgeKey = m_GetEdgeKey(e); // single key for both directions
    var eWeight = Number(e.weight) || DEFAULT_SIZE; // weight defaults to 1, force Number

    // 1. Set Size
    e.size = eWeight;
    //     Calculate cumulative size
    var sum = (cumulativeSize.get(edgeKey) || 0) + e.size;
    cumulativeSize.set(edgeKey, sum);

    // 2. Update Color Weight Map
    if (colorsAreDefined) {
      var colorWeightMap = edgeColorWeightMap.get(edgeKey) || new Map(); // key = color, value = weight
      var color = MOD.LookupEdgeColor(e, TEMPLATE);
      var colorWeight = colorWeightMap.get(color) || 0; // default to weight 0 if color was not previously defined
      colorWeightMap.set(color, colorWeight + eWeight);
      edgeColorWeightMap.set(edgeKey, colorWeightMap);
    }

    // 3. Save value
    edgeMap.set(edgeKey, e);
  });

  // 4. Set Color and Cumulative Size
  VDATA.edges.forEach(function (e) {
    e.size = cumulativeSize.get(m_GetEdgeKey(e));
    e.color = m_GetWeightiestColor(e, edgeColorWeightMap);
  });

  UDATA.SetAppState('VDATA', VDATA);
}

/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/**
 * Returns a unique key in the form "<lowestID>,<highestID>"
 * Used to generate a key for all edges that share the same source and target
 * regardless of direction
 * @param {Object} edge
 * @returns {string}
 */
function m_GetEdgeKey(edge) {
  var skey = edge.source;
  var tkey = edge.target;
  return [skey, tkey].sort().toString();
}

/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/**
 * Finds the color with the most weight for each edge in edgeColorWeightMap
 * @param {Object} edge
 * @param {Map} edgeColorWeightMap
 * @returns
 */
function m_GetWeightiestColor(edge, edgeColorWeightMap) {
  var edgeKey = m_GetEdgeKey(edge);
  var colorWeightMap = edgeColorWeightMap.get(edgeKey); // Map[[ color, weight ]]
  var colors = [].concat(_toConsumableArray(colorWeightMap.keys()));
  colors.sort(function (a, b) {
    return colorWeightMap.get(b) - colorWeightMap.get(a);
  }); // descending
  return colors[0];
}

/// EXPORT CLASS DEFINITION ///////////////////////////////////////////////////
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
module.exports = MOD;
});

require.register("view/netcreate/filter-mgr.js", function(exports, require, module) {
'use strict';

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var _hdate = require('system/util/hdate');

var _hdate2 = _interopRequireDefault(_hdate);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

/*//////////////////////////////// ABOUT \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\*\

  FILTER MANAGER

  Filter Definitions

  The initial filter definitions are loaded from the current database template.

    FILTERDEFS = {
        nodes: {                    // group
            label: "Node Filters",  // group label
            filters: [              // array of filter objects
                {
                  id: '4',
                  type: 'string',
                  key: 'label',
                  keylabel: 'Label',
                  operator: 'no-op',
                  value: ''
                },
                {
                  id: '2',
                  type: 'select',
                  key: 'type',
                  keylabel: 'Type',
                  operator: 'no-op',
                  value: ''
                },
                ...
            ]
        },
        edges: {
            label: "Edge Filters",
            filters: [...]
        }
        focus: {
          source: undefined,
          sourceLabel: '',
          range: 1
        }
    }


    FILTEREDNCDATA = {
        nodes: [ ... ],
        edges: [ ... ],
        stats: {
            nodeCount: 0,
            edgeCount: 0,
            filteredNodeCount: 0,
            filteredEdgeCount: 0,
            statsSummary: '',     // NCFiltersPanel count of nodes/edges if filters are applied
                                  // (displayed at bottom of NCFiltersPanel)

            graphStats: ''        // NCInfoPanel count of nodes/edges if no filters
            filtersSummary: '',   // NCInfoPanel summary of active filters
        }
    }

  FEATURES

  * See Whimiscal [diagram](https://whimsical.com/d3-data-flow-B2tTGnQYPSNviUhsPL64Dz)

  * filterAction: "Highlight" vs "Filter"
    --  Version 1.4 introduces two different types of filtering:
        "Highlight" highlights the matching nodes/edges and fades the others
        "Filter" shows matching nodes/edges and removes the non-matching
        nodes/edges from the display without affecting the underlying data.

  * With Version 1.4, the only data that is graphed is FILTEREDNCDATA.
    --  d3-simplenetgraph no longer plots on NCDATA changes.
    --  Instead, it plots the new FILTEREDNCDATA state.  Whenever NCDATA changes,
        FILTERDD3DATA is udpated.
    --  This way there is only one source of truth: all draw updates
        are routed through filter-mgr.
    --  If filters have not been defined, we just pass the raw NCDATA

  * Filters can be stacked.
        You can define two "Label" filters, for example.
        The only reason you can't do it right now is because the filter template
        is reading directly from the _default.template file.  You can easily
        insert another filter into the mix programmatically.

  JD added some global settins for filters
    Settings
      Transparency
        Nodes
        Edges

  NOTE: Default is hand-set to 0 for now, but this should be in a / the template

\*\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ * //////////////////////////////////////*/

var FILTER = require('./components/filter/FilterEnums');
var UNISYS = require('unisys/client');
var clone = require('rfdc')();
var UTILS = require('./nc-utils');
var PROMPTS = require('system/util/prompts');
var NCLOGIC = require('./nc-logic');


/// INITIALIZE MODULE /////////////////////////////////////////////////////////
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
var MOD = UNISYS.NewModule(module.id);
var UDATA = UNISYS.NewDataLink(MOD);

/// CONSTANTS & DECLARATIONS //////////////////////////////////////////////////
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
var DBG = false;
var PR = 'filter-mgr: ';
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
var TEMPLATE = null; // template definition for prompts
var FILTERDEFS_RESTORE; // pristine FILTERDEFS for clearing
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
var NODE_DEFAULT_TRANSPARENCY = void 0;
var EDGE_DEFAULT_TRANSPARENCY = void 0;
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
var RemovedNodes = []; // nodes removed via COLLAPSE filter action
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
var DATASET = window.NC_CONFIG.dataset || 'netcreate';
var TEMPLATE_URL = 'templates/' + DATASET + '.json';

/// UNISYS HANDLERS ///////////////////////////////////////////////////////////
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/** lifecycle INITIALIZE handler
 */
MOD.Hook('INITIALIZE', function () {
  UDATA.OnAppStateChange('FILTERDEFS', function (data) {
    if (DBG) console.log(PR + 'OnAppStateChange: FILTERDEFS', data);
    // The filter defs have been updated, so apply the filters.
    m_FiltersApply();
  });

  /// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  /** FILTER_DEFINE is called by StringFilter when user has updated filter.
   */
  UDATA.HandleMessage('FILTER_DEFINE', function (data) {
    if (DBG) console.log(PR + 'FILTER_DEFINE', data);
    m_FilterDefine(data);
    UNISYS.Log('define filter', JSON.stringify(data));
  });

  /// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  /** FILTER_CLEAR is called by FiltersPanel when user clicks "Clear Filters" button
   */
  UDATA.HandleMessage('FILTER_CLEAR', function () {
    if (DBG) console.log(PR + 'FILTER_CLEAR');
    m_ClearFilters();
    UNISYS.Log('clear filters');
  });

  /// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  /** FILTERS_UPDATE is called by FiltersPanel switches between filters and highlights
   */
  UDATA.HandleMessage('FILTERS_UPDATE', function (data) {
    if (DBG) console.log(PR + 'FILTERS_UPDATE', data);
    var FILTERDEFS = UDATA.AppState('FILTERDEFS');
    FILTERDEFS.filterAction = data.filterAction;
    // if the Focus panel is being selected, grab update the selection so that
    // the selected node is immediately focused on (otherwise the system ignores
    // the currently selecte dnode and you have to click on it again)
    if (data.filterAction === FILTER.ACTION.FOCUS) {
      var SELECT = UDATA.AppState('SELECTION');
      var selectedNode = SELECT.nodes ? SELECT.nodes[0] : undefined;
      if (selectedNode) {
        FILTERDEFS.focus = {
          source: selectedNode.id,
          sourceLabel: selectedNode.label,
          range: FILTERDEFS.focus.range
        };
      }
    }
    UDATA.SetAppState('FILTERDEFS', FILTERDEFS);
  });
  /// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  /** Listen for NCDATA updates so we know to trigger change?
   */
  UDATA.OnAppStateChange('NCDATA', function (data) {
    if (DBG) console.log(PR + 'OnAppStateChange: NCDATA', data);
    m_FiltersApply();
  });
  /// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  /** Listen for TEMPLATE updates so we know to trigger change?
   */
  UDATA.OnAppStateChange('TEMPLATE', function (data) {
    if (DBG) console.log(PR + 'OnAppStateChange: TEMPLATE', data);
    // this is critical -- graph will not draw if this is
    // not called from nc-logic.LOADASSETS
    m_ImportFilters();
  });

  /// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  /** 2023-06 Interim Approach -- eventually should convert to new selection mgr
      Listen for SELECTION changes for setting Focus
   */
  UDATA.OnAppStateChange('SELECTION', function (data) {
    if (DBG) console.log(PR + 'OnAppStateChange: SELECTION', data);
    // Only if Focus is active
    var FILTERDEFS = UDATA.AppState('FILTERDEFS');
    if (FILTERDEFS.filterAction === FILTER.ACTION.FOCUS) {
      m_SetFocus(data);
    }
  });
}); // end UNISYS_INIT

/// IMPORT FILTER DEFINITIONS /////////////////////////////////////////////////
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/** Loads filters from template file
 */
function m_ImportFilters() {
  TEMPLATE = UDATA.AppState('TEMPLATE');
  var nodeDefs = TEMPLATE.nodeDefs;
  var edgeDefs = TEMPLATE.edgeDefs;
  NODE_DEFAULT_TRANSPARENCY = TEMPLATE.nodeDefaultTransparency;
  EDGE_DEFAULT_TRANSPARENCY = TEMPLATE.edgeDefaultTransparency;

  /** HACK Source / Target Filter Definitions
      Source and Target are normally built-in numeric id fields.
      But for filtering we want to use the corresponding source/target labels as strings.
      In m_FiltersDefine we are already injecting `sourceLabel` and `targetLabel` into the edge objects
      to facilitate filtering (saves an extra lookup).  So we can just repurpose the filter definitions
      to use sourceLabel and targetLabel.  The tricky part is hiding and re-ordering the numeric id filters.
  */
  edgeDefs.sourceLabel = {
    displayLabel: 'Source',
    exportLabel: 'Source Label',
    help: 'Source label',
    hidden: false,
    type: 'string'
  };
  edgeDefs.targetLabel = {
    displayLabel: 'Target',
    exportLabel: 'Target Label',
    help: 'Target label',
    hidden: false,
    type: 'string'
  };
  /* END HACK */

  var fdefs = {
    nodes: {
      group: 'nodes', // this needs to be passed to StringFilter
      label: 'Node Filters',
      filters: m_ImportPrompts(nodeDefs),
      transparency: 0.2 // Default transparency form for Highlight should be 0.2, not template default which is usu 1.0
    },
    edges: {
      group: 'edges', // this needs to be passed to StringFilter
      label: 'Edge Filters',
      filters: m_ReplaceSourceTargetIdsWithStrings(m_ImportPrompts(edgeDefs)),
      transparency: 0.2 // Default transparency form for Highlight should be 0.2, not template default which is usu 0.7
    },
    focus: {
      source: undefined, // nothing focused by default
      sourceLabel: '',
      range: 1
    }
  };

  UDATA.SetAppState('FILTERDEFS', fdefs);

  // Save off a copy for clearing the form.
  FILTERDEFS_RESTORE = clone(fdefs);
}
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
function m_ImportPrompts(prompts) {
  var filters = [];
  var counter = 0;

  var _iteratorNormalCompletion = true;
  var _didIteratorError = false;
  var _iteratorError = undefined;

  try {
    for (var _iterator = Object.entries(prompts)[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
      var _ref = _step.value;

      var _ref2 = _slicedToArray(_ref, 2);

      var key = _ref2[0];
      var prompt = _ref2[1];

      var operator = void 0;
      switch (prompt.type) {
        case FILTER.TYPES.MARKDOWN:
        case FILTER.TYPES.STRING:
        case FILTER.TYPES.NUMBER:
        case FILTER.TYPES.SELECT:
        case FILTER.TYPES.NODE:
        case FILTER.TYPES.DATE:
        case FILTER.TYPES.HDATE:
        case FILTER.TYPES.TIMESTAMP:
        case FILTER.TYPES.INFOORIGIN:
          operator = FILTER.OPERATORS.NO_OP.key;
          break;
        case FILTER.TYPES.HIDDEN:
          break; // hidden filters are not added
        default:
          // edge template item "edgeIsLockedMessage" will trigger this message
          // filters will not be created for entries with no `type` defined.
          if (DBG) console.warn(PR + ('Unknown node prompt type ' + prompt.type + ' for ' + prompt));
          break;
      }
      if (operator === undefined) continue; // don't add filter if operator is hidden
      if (prompt.hidden) continue; // don't add filter if "hidden": true
      var filter = {
        id: counter++,
        key: key,
        type: prompt.type,
        keylabel: prompt.displayLabel,
        operator: operator,
        value: ''
      };
      // Add "Options" for "select" filter types
      if (prompt.type === FILTER.TYPES.SELECT) {
        (function () {
          var options = [];
          prompt.options.forEach(function (opt) {
            if (opt.label === '') return;
            options.push(opt.label);
          });
          filter.options = options;
        })();
      }

      filters.push(filter);
    }
  } catch (err) {
    _didIteratorError = true;
    _iteratorError = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion && _iterator.return) {
        _iterator.return();
      }
    } finally {
      if (_didIteratorError) {
        throw _iteratorError;
      }
    }
  }

  return filters;
}
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/** Used to replace the `source` and `target` numeric id filter definitions
 *  with `sourceLabel` and `targetLabel` string defintions.
 *  m_ImportPrompts converts the edgeDefs object to an array
 *  We then insert sourceLabel and targetLabel in place of source and target
 *  and then remove the now extraneous sourceLabel and targetLabel definitions.
 *  This is a hacky brute force solution but it gives us better control over
 *  the field order.
 */
function m_ReplaceSourceTargetIdsWithStrings(filters) {
  var reorderedFilters = [].concat(_toConsumableArray(filters));
  // Replace `source` with 'sourceLabel'
  var sourceIndex = 1; // force seccond item // reorderedFilters.findIndex(f => f.key === 'source');
  var sourceLabelIndex = reorderedFilters.findIndex(function (f) {
    return f.key === 'sourceLabel';
  });
  reorderedFilters.splice(sourceIndex, 1, reorderedFilters[sourceLabelIndex]);
  reorderedFilters.splice(sourceLabelIndex, 1);
  // and 'target' with 'targetLabel'
  var targetIndex = 2; // force third item // reorderedFilters.findIndex(f => f.key === 'target');
  var targetLabelIndex = reorderedFilters.findIndex(function (f) {
    return f.key === 'targetLabel';
  });
  reorderedFilters.splice(targetIndex, 1, reorderedFilters[targetLabelIndex]);
  reorderedFilters.splice(targetLabelIndex, 1);
  return reorderedFilters;
}

/// UDATA HANDLERS ////////////////////////////////////////////////////////////
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/** Define an individual filter
 *  @param {Object} data {group, filter}
 */
function m_FilterDefine(data) {
  var FILTERDEFS = UDATA.AppState('FILTERDEFS');
  FILTERDEFS.filterAction = data.filterAction || FILTERDEFS.filterAction; // if 'transparency' then filterAction is not passed, so default to existing
  if (data.group === 'nodes') {
    if (data.type === 'transparency') {
      FILTERDEFS.nodes.transparency = data.transparency;
    } else {
      var nodeFilters = FILTERDEFS.nodes.filters;
      var index = nodeFilters.findIndex(function (f) {
        return f.id === data.filter.id;
      });
      nodeFilters.splice(index, 1, data.filter);
      FILTERDEFS.nodes.filters = nodeFilters;
    }
  } else if (data.group === 'edges') {
    if (data.type === 'transparency') {
      FILTERDEFS.edges.transparency = data.transparency;
    } else {
      var edgeFilters = FILTERDEFS.edges.filters;
      var _index = edgeFilters.findIndex(function (f) {
        return f.id === data.filter.id;
      });
      edgeFilters.splice(_index, 1, data.filter);
      FILTERDEFS.edges.filters = edgeFilters;
    }
  } else if (data.group === 'focus') {
    if (data.filter.deselectNode) {
      // clear out sourceLabel to allow focus filter to select a new node
      FILTERDEFS.focus.source = undefined;
      FILTERDEFS.focus.sourceLabel = '';
    }
    if (data.filter.sourceLabel) FILTERDEFS.focus.sourceLabel = data.filter.sourceLabel;
    if (data.filter.source) FILTERDEFS.focus.source = data.filter.source;
    if (data.filter.range) FILTERDEFS.focus.range = data.filter.range;
  } else {
    throw 'FILTER_DEFINE called with unknown group: ' + data.group;
  }
  UDATA.SetAppState('FILTERDEFS', FILTERDEFS);
}
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/** Walk down the list of filters and apply them all
 *  @param {Object} data A UDATA pkt {defs}
 *  @returns {string} Summary of the filter statistics
 */
function m_FiltersApply() {
  var NCDATA = UDATA.AppState('NCDATA');
  var FILTERDEFS = UDATA.AppState('FILTERDEFS');
  var FILTEREDNCDATA = { nodes: [].concat(_toConsumableArray(NCDATA.nodes)) };

  // skip if FILTERDEFS has not been defined yet
  if (Object.keys(FILTERDEFS).length < 1) return;

  // sourceLabel, targetLabel are available
  // stuff 'sourceLabel' and 'targetLabel' into edges for quicker filtering
  // otherwise we have to constantly look up the node label
  FILTEREDNCDATA.edges = NCDATA.edges.map(function (e) {
    var source = NCDATA.nodes.find(function (n) {
      return n.id === e.source;
    });
    var target = NCDATA.nodes.find(function (n) {
      return n.id === e.target;
    });
    e.sourceLabel = source ? source.label : 'deleted';
    e.targetLabel = target ? target.label : 'deleted';
    return e;
  });

  m_FiltersApplyToNodes(FILTERDEFS, FILTEREDNCDATA);
  m_FiltersApplyToEdges(FILTERDEFS, FILTEREDNCDATA);

  // REVIEW 2023-0530
  // -- If "Filter/Hide" functionality is going to be kept, this needs to be reworked!
  //    We SHOULD NOT recalculate sizes in "Filter/Hide" mode, otherwise, the size will change.
  //
  // Recalculate sizes
  // ALWAYS recalculate, e.g. if switching from Collapse to Highlight or clearing data
  UTILS.RecalculateAllEdgeSizes(FILTEREDNCDATA);
  UTILS.RecalculateAllNodeDegrees(FILTEREDNCDATA);

  // Calculate Stats and Send with FILTEREDNCDATA
  FILTEREDNCDATA.stats = m_UpdateFilterStats(NCDATA, FILTEREDNCDATA, FILTERDEFS.filterAction);

  // Update Filter Summary
  var filterSummary = m_UpdateFilterSummary(FILTEREDNCDATA.stats.statsSummary);
  FILTEREDNCDATA.stats = _extends({}, FILTEREDNCDATA.stats, filterSummary);

  // Update FILTEREDNCDATA
  UDATA.SetAppState('FILTEREDNCDATA', FILTEREDNCDATA);
  // edge-mgr handles this call and updates VDATA, which is rendered by d3-simplenetgraph
}
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
function m_ClearFilters() {
  // Reload fdata
  var FILTERDEFS = clone(FILTERDEFS_RESTORE);
  UDATA.SetAppState('FILTERDEFS', FILTERDEFS);
}
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
function m_UpdateFilterStats(NCDATA, FILTEREDNCDATA, filterAction) {
  var FILTERDEFS = UDATA.AppState('FILTERDEFS');
  var transparencyNode = FILTERDEFS.nodes.transparency;
  var transparencyEdge = FILTERDEFS.edges.transparency;


  var nodeCount = NCDATA.nodes.length;
  var edgeCount = NCDATA.edges.length;
  var filteredNodeCount = void 0,
      filteredEdgeCount = void 0;
  if (filterAction === FILTER.ACTION.FADE) {
    filteredNodeCount = nodeCount - FILTEREDNCDATA.nodes.filter(function (n) {
      return n.filteredTransparency <= transparencyNode;
    }).length;
    filteredEdgeCount = edgeCount - FILTEREDNCDATA.edges.filter(function (e) {
      return e.filteredTransparency <= transparencyEdge;
    }).length;
  } else {
    filteredNodeCount = FILTEREDNCDATA.nodes.length;
    filteredEdgeCount = FILTEREDNCDATA.edges.length;
  }
  var statsSummary = 'Showing ' + filteredNodeCount + '/' + nodeCount + ' nodes, ' + filteredEdgeCount + '/' + edgeCount + ' edges';

  return { nodeCount: nodeCount, edgeCount: edgeCount, filteredNodeCount: filteredNodeCount, filteredEdgeCount: filteredEdgeCount, statsSummary: statsSummary };
}
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
function m_UpdateFilterSummary(statsSummary) {
  var FILTERDEFS = UDATA.AppState('FILTERDEFS');
  var FILTEREDNCDATA = UDATA.AppState('FILTEREDNCDATA');

  var graphStats = (FILTEREDNCDATA.nodes && FILTEREDNCDATA.nodes.length) + ' nodes, ' + (FILTEREDNCDATA.edges && FILTEREDNCDATA.edges.length) + ' edges';

  var typeSummary = FILTERDEFS.filterAction; // text for filter action is the label, e.g. 'HIGHLIGHT'
  var nodeSummary = m_FiltersToString(FILTERDEFS.nodes.filters);
  var edgeSummary = m_FiltersToString(FILTERDEFS.edges.filters);
  var filtersSummary = '';
  if (nodeSummary || edgeSummary) filtersSummary = typeSummary + ' ' + (nodeSummary ? 'NODES: ' : '') + nodeSummary + ' ' + (edgeSummary ? 'EDGES: ' : '') + edgeSummary;
  if (filtersSummary) filtersSummary += ' ' + statsSummary;

  return { filtersSummary: filtersSummary, graphStats: graphStats };
}
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
function m_FiltersToString(filters) {
  var summary = '';
  filters.forEach(function (filter) {
    if (filter.operator === undefined || filter.value === undefined || filter.value === '' || _typeof(filter.value) === 'object' && filter.value.value === '' // hdate values are objects
    ) return;
    summary += filter.keylabel + ' ';
    summary += m_OperatorToString(filter.operator) + ' ';
    if (_typeof(filter.value) === 'object') {
      // hdate value
      summary += '"' + filter.value.value + '"; ';
    } else {
      summary += '"' + filter.value + '"; ';
    }
  });
  return summary;
}
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
function m_OperatorToString(operator) {
  return FILTER.OPERATORS[operator].label;
}

/// UTILITY FUNCTIONS /////////////////////////////////////////////////////////
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
function clean(str) {
  return NCLOGIC.EscapeRegexChars(String(str).trim());
}
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/**
 *  Match strings, allowing use of `&&` and `||`
 *  * Matches strings in a flat list of pairs, starting with ORs
 *  * Does not support grouping
 *  * Operator precedence: ORs are evaluated first, follwed by ANDs.
 *  * Extra spaces will be trimmed.
 *  @param {string} needle aka "needle" in the haystack
 *  @param {*} haystack
 *  @param {*} contains
 *  @returns booleean
 */
function m_MatchString(needle, haystack) {
  var contains = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;

  var ANDNeedles = String(needle).split('&&');
  var ORNeedleArrs = ANDNeedles.map(function (ands) {
    return String(ands).split(/\|\|/).map(function (str) {
      return String(str).trim();
    });
  });
  // For each set of OR Array matches, evaluate the pair
  var ResultsOR = ORNeedleArrs.map(function (pair) {
    return pair.reduce(function (a, b) {
      return a || m_MatchStringSnippet(clean(b), haystack, true);
    }, false);
  });
  var ResultsAND = ResultsOR.reduce(function (a, b) {
    return a && b;
  }, true);
  return contains ? ResultsAND : !ResultsAND;
}
function m_MatchStringSnippet(needle, haystack) {
  var contains = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;

  // Normalize and strip diacritics

  needle = UTILS.RemoveDiacriticMarks(needle);
  haystack = UTILS.RemoveDiacriticMarks(haystack);

  var regex = new RegExp( /*'^'+*/needle, 'i');
  var matches = void 0;
  if (needle === '') {
    // empty string matches everything
    matches = true;
  } else if (contains) {
    matches = regex.test(haystack);
  } else {
    matches = !regex.test(haystack);
  }
  return matches;
}
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
function m_MatchNumber(operator, filterVal, objVal) {
  var matches = void 0;
  if (filterVal === '') {
    matches = true;
  } else {
    switch (operator) {
      case FILTER.OPERATORS.GT.key:
        matches = objVal > filterVal;
        break;
      case FILTER.OPERATORS.GT_EQ.key:
        matches = objVal >= filterVal;
        break;
      case FILTER.OPERATORS.LT.key:
        matches = objVal < filterVal;
        break;
      case FILTER.OPERATORS.LT_EQ.key:
        matches = objVal <= filterVal;
        break;
      case FILTER.OPERATORS.EQ.key:
        matches = objVal === filterVal;
        break;
      case FILTER.OPERATORS.NOT_EQ.key:
        matches = objVal !== filterVal;
        break;
      default:
        console.error('filter-mgr.js: Unknown operator ' + operator);
        break;
    }
  }
  return matches;
}
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
function m_MatchHDate(operator, filterVal, objVal) {
  // deconstruct the hdate
  var value = objVal.value,
      format = objVal.format,
      formattedString = objVal.formattedString;

  var akey = _hdate2.default.Parse(value); // parseResult
  var bkey = _hdate2.default.Parse(filterVal);
  if (akey.length < 1 || bkey.length < 1) return false;
  var da = akey[0].start.knownValues;
  var db = bkey[0].start.knownValues;

  // first make sure that the dates share common values
  // if they do not share common values, then there's no match
  var dakeys = Object.keys(da);
  var dbkeys = Object.keys(db);
  var commonKeys = dbkeys.filter(function (k) {
    return dakeys.includes(k);
  });
  if (commonKeys.length < 1) {
    // no common keys, so there's nothing to match
    return false;
  }

  var order = void 0;
  if (commonKeys.includes('year') && da.year !== db.year) {
    order = da.year - db.year;
  } else if (commonKeys.includes('month') && da.month !== db.month) {
    order = da.month - db.month;
  } else if (commonKeys.includes('day') && da.day !== db.day) {
    order = da.day - db.day;
  } else if (commonKeys.includes('hour') && da.hour !== db.hour) {
    order = da.hour - db.hour;
  } else if (commonKeys.includes('minute') && da.minute !== db.minute) {
    order = da.minute - db.minute;
  } else if (commonKeys.includes('second') && da.second !== db.second) {
    order = da.second - db.second;
  } else {
    // matched!
    order = 0;
  }

  var matches = void 0;
  if (filterVal === '') {
    matches = true;
  } else {
    switch (operator) {
      case FILTER.OPERATORS.GT.key:
        matches = order > 0;
        break;
      case FILTER.OPERATORS.GT_EQ.key:
        matches = order >= 0;
        break;
      case FILTER.OPERATORS.LT.key:
        matches = order < 0;
        break;
      case FILTER.OPERATORS.LT_EQ.key:
        matches = order <= 0;
        break;
      case FILTER.OPERATORS.EQ.key:
        matches = order === 0;
        break;
      case FILTER.OPERATORS.NOT_EQ.key:
        matches = order !== 0;
        break;
      default:
        console.error('filter-mgr.js: Unknown operator ' + operator + ' for HDATE filter');
        break;
    }
  }
  return matches;
}
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/**
 * This uses the HDate Filter UI to construct a search string
 * But then converts the HDate filter definition to a timestamp
 * And then does a simple numeric comparison
 * @param {number} operator filter operator
 * @param {hdate} filterVal hdate
 * @param {number} objVal timestamp
 * @returns
 */
function m_MatchTimestamp(operator, filterVal, objVal) {
  var value = filterVal.value,
      format = filterVal.format,
      formattedString = filterVal.formattedString;

  var hdateValue = _hdate2.default.Parse(value); // deconstruct the HDate filter into a timestamp

  if (hdateValue.length < 1) return false;

  var knownValues = hdateValue[0].start.knownValues;

  // When filtering, use only as much precision as the HDate filter requests
  // if a value is missing, assume it is 0
  var filterTimestamp = new Date(knownValues.year !== undefined ? knownValues.year : 0, knownValues.month !== undefined ? knownValues.month - 1 : 0, knownValues.day !== undefined ? knownValues.day : 1, knownValues.hour !== undefined ? knownValues.hour : 0, knownValues.minute !== undefined ? knownValues.minute : 0, knownValues.second !== undefined ? knownValues.second : 0);
  var objValDate = new Date(objVal);
  var objValTimestamp = new Date(knownValues.year !== undefined ? objValDate.getFullYear() : 0, knownValues.month !== undefined ? objValDate.getMonth() : 0, knownValues.day !== undefined ? objValDate.getDate() : 1, knownValues.hour !== undefined ? objValDate.getHours() : 0, knownValues.minute !== undefined ? objValDate.getMinutes() : 0, knownValues.second !== undefined ? objValDate.getSeconds() : 0);

  return m_MatchNumber(operator, filterTimestamp.getTime(), objValTimestamp.getTime());
}

/// NODE FILTERS //////////////////////////////////////////////////////////////
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/** Side effect: FILTEREDNCDATA.nodes are updated with a new `filterTransparency`. */
function m_FiltersApplyToNodes(FILTERDEFS, FILTEREDNCDATA) {
  RemovedNodes = [];

  // if current filter is focus, calculate bacon_values
  if (FILTERDEFS.filterAction === FILTER.ACTION.FOCUS) m_FocusPrep(FILTERDEFS, FILTEREDNCDATA);

  FILTEREDNCDATA.nodes = FILTEREDNCDATA.nodes.filter(function (node) {
    return m_NodeIsFiltered(node, FILTERDEFS);
  });
}

function m_NodeIsFiltered(node, FILTERDEFS) {
  var filterAction = FILTERDEFS.filterAction;
  var _FILTERDEFS$nodes = FILTERDEFS.nodes,
      filters = _FILTERDEFS$nodes.filters,
      transparency = _FILTERDEFS$nodes.transparency;
  var _FILTERDEFS$focus = FILTERDEFS.focus,
      source = _FILTERDEFS$focus.source,
      range = _FILTERDEFS$focus.range;

  // let all_no_op = true;

  var keepNode = true;

  // 1. Look for matches
  // implicit AND.  ALL filters must return true.
  filters.forEach(function (filter) {
    if (filter.operator === FILTER.OPERATORS.NO_OP.key) return; // skip no_op
    // all_no_op = false;
    if (!m_IsNodeMatchedByFilter(node, filter)) {
      keepNode = false;
    }
  });

  // 2. Decide based on filterAction
  node.filteredTransparency = NODE_DEFAULT_TRANSPARENCY; // always reset if not HIGHLIGHT
  if (filterAction === FILTER.ACTION.FILTER) {
    // not using highlight, so restore transparency
    if (keepNode) return true;
    return false; // remove from array
  } else if (filterAction === FILTER.ACTION.FADE) {
    if (!keepNode) {
      node.filteredTransparency = transparency; // set the transparency value ... right now it is inefficient to set this at the node / edge level, but that's more flexible
    }
    return true; // don't filter out
  } else if (filterAction === FILTER.ACTION.REDUCE) {
    if (keepNode) return true; // matched, so keep
    // filter out (remove) and add to `RemovedNodes` for later removal of linked edge
    RemovedNodes.push(node.id);
    return false;
  } else if (filterAction === FILTER.ACTION.FOCUS) {
    // Remove nodes outside of range
    if (source !== undefined && (node.bacon_value === undefined || node.bacon_value > range)) {
      RemovedNodes.push(node.id);
      return false;
    }
    return true;
  } else {
    // no filter, keep the node!
    return true;
  }

  // all_no_op
  // This is currently redundant because matchesFilter will always
  // be true if there are no filters.  If matchesFilter is true,
  // then the node will not be removed/faded.
  //
  // if (all_no_op) {
  //   // all filters are "no_op", so no filters defined, don't filter anything
  //   node.filteredTransparency = 1.0; // opaque, not tranparent
  // }
}
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
function m_IsNodeMatchedByFilter(node, filter) {
  if (filter.key === undefined || filter.operator === undefined || filter.value === undefined) {
    return false; // nothing to filter
  }

  var nodeValue = ['created', 'updated'].includes(filter.key) ? node.meta[filter.key] // timestamps are stored in loki meta object
  : node[filter.key];

  switch (filter.operator) {
    case FILTER.OPERATORS.CONTAINS.key:
      return m_MatchString(filter.value, nodeValue, true);
    case FILTER.OPERATORS.NOT_CONTAINS.key:
      return m_MatchString(filter.value, nodeValue, false);
    case FILTER.OPERATORS.IS_EMPTY.key:
      return nodeValue === undefined || nodeValue === '';
    case FILTER.OPERATORS.IS_NOT_EMPTY.key:
      return nodeValue !== undefined && nodeValue !== '';
    default:
      if (nodeValue === undefined) return false; // no value to match
      if (filter.type === FILTER.TYPES.TIMESTAMP) return m_MatchTimestamp(filter.operator, filter.value, nodeValue);
      if (filter.type === FILTER.TYPES.HDATE) return m_MatchHDate(filter.operator, filter.value, nodeValue);
      // else assume it's a number
      return m_MatchNumber(filter.operator, filter.value, nodeValue);
  }
}

/// EDGE FILTERS //////////////////////////////////////////////////////////////
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
function m_FiltersApplyToEdges(FILTERDEFS, FILTEREDNCDATA) {
  var filterAction = FILTERDEFS.filterAction;
  var _FILTERDEFS$edges = FILTERDEFS.edges,
      filters = _FILTERDEFS$edges.filters,
      transparency = _FILTERDEFS$edges.transparency;

  if (!FILTEREDNCDATA.edges) return; // no data
  FILTEREDNCDATA.edges = FILTEREDNCDATA.edges.filter(function (edge) {
    return m_EdgeIsFiltered(edge, filters, transparency, filterAction, FILTEREDNCDATA);
  });
}
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/**
 *  Side effect: FILTEREDNCDATA.edges are updated with a new `filterTransparency`.
 */
function m_EdgeIsFiltered(edge, filters, transparency, filterAction, FILTEREDNCDATA) {
  // let all_no_op = true; // all filters are no_op
  var keepEdge = true;
  var source = FILTEREDNCDATA.nodes.find(function (e) {
    if (edge.source === undefined) return false;
    // on init, edge.source is just an id.  only with d3 processing does it
    // get transformed into a node object.  so we have to check the type.
    var sourceId = typeof edge.source === 'number' ? edge.source : edge.source.id;
    return e.id === sourceId;
  });
  var target = FILTEREDNCDATA.nodes.find(function (e) {
    if (edge.target === undefined) return false;
    // on init, edge.target is just an id.  only with d3 processing does it
    // get transformed into a node object.  so we have to check the type.
    var targetId = typeof edge.target === 'number' ? edge.target : edge.target.id;
    return e.id === targetId;
  });

  // 0. First set default transparency
  // restore default transparency, otherwise it could remain faded out
  edge.filteredTransparency = EDGE_DEFAULT_TRANSPARENCY; // opaque

  // 1. If source or target are missing, then remove the edge
  if (source === undefined || target === undefined) return false;

  // 2. If source or target have been removed via collapse or focus, remove the edge
  if (RemovedNodes.includes(source.id) || RemovedNodes.includes(target.id)) return false;
  // 3. if source or target is transparent, then we are transparent too
  if (source.filteredTransparency < 1.0 || target.filteredTransparency < 1.0) {
    // regardless of filter definition...
    // ...if filterAction is FILTER
    // always hide edge if it's attached to a filtered node
    if (filterAction === FILTER.ACTION.FILTER) return false;
    // ...else if filterAction is HIGHLIGHT
    // don't filter, just fade
    edge.filteredTransparency = transparency; // set the transparency value ... right now it is inefficient to set this at the node / edge level, but that's more flexible
    return true;
  }

  // 4. otherwise, look for matches
  // implicit AND.  ALL filters must return true.
  // edge is filtered out if it fails ANY filter tests
  filters.forEach(function (filter) {
    if (filter.operator === FILTER.OPERATORS.NO_OP.key) return; // skip no_op
    // Found a filter!  Apply it!
    // all_no_op = false;
    if (!m_IsEdgeMatchedByFilter(edge, filter)) {
      keepEdge = false;
    }
  });

  // 3. Decide how to filter based on filterAction
  if (filterAction === FILTER.ACTION.FILTER) {
    // FILTER!
    // not using highlight, so restore transparency
    edge.filteredTransparency = EDGE_DEFAULT_TRANSPARENCY; // opaque
    if (keepEdge) return true; // keep in array
    return false; // remove from array
  } else if (filterAction === FILTER.ACTION.FADE) {
    if (!keepEdge) {
      edge.filteredTransparency = transparency; // set the transparency value ... right now it is inefficient to set this at the node / edge level, but that's more flexible
    }
    return true; // always keep in array
  } else if (filterAction === FILTER.ACTION.REDUCE) {
    if (keepEdge) return true; // matched, so keep
    // else filter out (remove)
    return false;
  } else {
    // keep by default if no filter
    return true;
  }

  // all_no_op
  // This is currently redundant because matchesFilter will always
  // be true if there are no filters.  If matchesFilter is true,
  // then the node will not be removed/faded.
  //
  // if (all_no_op) {
  //   // no filters defined, undo isFilteredOut
  //   edge.filteredTransparency = 1.0;
  // } else {
  // }
}
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
function m_IsEdgeMatchedByFilter(edge, filter) {
  if (filter.key === undefined || filter.operator === undefined || filter.value === undefined) {
    return false; // nothing to filter
  }

  var edgeValue = void 0;
  if (filter.type === FILTER.TYPES.NODE) {
    // edges fields that point to nodes require special handling because `source` and `target`
    // point to node objects, not simple strings.
    if (filter.key === 'source') edgeValue = edge.sourceLabel;
    if (filter.key === 'target') edgeValue = edge.targetLabel;
  } else {
    edgeValue = ['created', 'updated'].includes(filter.key) ? edge.meta[filter.key] // timestamps are stored in loki meta object
    : edge[filter.key];
  }

  switch (filter.operator) {
    case FILTER.OPERATORS.CONTAINS.key:
      return m_MatchString(filter.value, edgeValue, true);
    case FILTER.OPERATORS.NOT_CONTAINS.key:
      return m_MatchString(filter.value, edgeValue, false);
    case FILTER.OPERATORS.IS_EMPTY.key:
      return edgeValue === undefined || edgeValue === '';
    case FILTER.OPERATORS.IS_NOT_EMPTY.key:
      return edgeValue !== undefined && edgeValue !== '';
    default:
      if (edgeValue === undefined) return false; // no value to match
      if (filter.type === FILTER.TYPES.TIMESTAMP) return m_MatchTimestamp(filter.operator, filter.value, edgeValue);
      if (filter.type === FILTER.TYPES.HDATE) return m_MatchHDate(filter.operator, filter.value, edgeValue);
      // else assume it's a number
      return m_MatchNumber(filter.operator, filter.value, edgeValue);
  }
}

/// FOCUS FILTERS /////////////////////////////////////////////////////////////
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/** Returns an Map of node ids that are directly connected to the passed `nodeId`
 *  Uses a Map so there are no redundancies.
 *  A more efficient search targeted on looking up nodes
 *  @param {object} puredata Raw/pure data from NCData
 *  @param {array} puredata.nodes
 *  @param {array} puredata.edges where edge.source and edge.target are numeric ids
 *  @param {string} nodeId The source nodeId to start the search from
 *  @returns {map} Map of matching nodeIds {number}
 */
function m_FindConnectedNodeIds(puredata, nodeId) {
  var returnMatches = new Map();
  puredata.edges.forEach(function (edge) {
    if (edge.source === nodeId) returnMatches.set(edge.target, nodeId); // nodeId in returnMatches is not necessary
    if (edge.target === nodeId) returnMatches.set(edge.source, nodeId);
  });
  return returnMatches;
}
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/** Recursively walks down the network starting from the sourceNodes
 *  There can be more than one sourceNodes, e.g. this can set values starting with any number of nodes
 *  Modifies puredata by reference
 *  @param {object} puredata {nodes, edges}
 *  @param {array} sourceNodes {string}
 *  @param {number} range
 */
function m_SetBaconValue(bacon_value, max_bacon_value, puredata, sourceNodes) {
  if (bacon_value > max_bacon_value) return;
  sourceNodes.forEach(function (source) {
    var newNodes = []; // collect new nodes that we need to walk down
    var connectedNodeIds = m_FindConnectedNodeIds(puredata, source); // map
    puredata.nodes = puredata.nodes.map(function (node) {
      if (node.bacon_value !== undefined) return node; // skip bacon_value if ready set

      if (node.id === source) {
        node.bacon_value = 0; // the focused node has a value of 0
      } else if (connectedNodeIds.has(node.id)) {
        node.bacon_value = bacon_value;
        newNodes.push(node.id);
      }
      return node; // returns node with updated bacon_value
    });

    // recursive call
    if (newNodes.length > 0 && bacon_value + 1 <= max_bacon_value) m_SetBaconValue(bacon_value + 1, max_bacon_value, puredata, newNodes);
  });
}
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/** Prepares `puredata` (aka FILTEREDNCDATA) for filtering by
 *  seeding node data with "degrees of separation" (aka "bacon_value") from the selected node
 *  Uses FILTERDEFS specifications for the focus selection and range
 *  Modifies puredata by reference
 *  This should generally be called right before filtering is applied
 *  @param {*} FILTERDEFS
 *  @param {*} puredata
 */
function m_FocusPrep(FILTERDEFS, puredata) {
  var _FILTERDEFS$focus2 = FILTERDEFS.focus,
      source = _FILTERDEFS$focus2.source,
      range = _FILTERDEFS$focus2.range;
  // first clear bacon_value

  puredata.nodes = puredata.nodes.map(function (node) {
    node.bacon_value = undefined;
    return node;
  });
  if (range < 1) {
    return; // show all if range=0
  }
  // Then set bacon_value
  // Initiate the crawl starting at 1 with the source node
  m_SetBaconValue(1, range, puredata, [source]);
}
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/** Called when SELECTION appState changes, e.g. user has clicked on a node
 *  while in FOCUS View.
 *  @param {object} data
 *  @param {array} data.nodes array of node objects
 */
function m_SetFocus(data) {
  var selectedNode = data.nodes[0];
  var selectedNodeId = selectedNode ? selectedNode.id : undefined;
  var selectedNodeLabel = selectedNode ? selectedNode.label : '';

  // Set FILTERDEFS
  var FILTERDEFS = UDATA.AppState('FILTERDEFS');
  FILTERDEFS.focus = {
    source: selectedNodeId,
    sourceLabel: selectedNodeLabel,
    range: FILTERDEFS.focus.range
  };
  UDATA.SetAppState('FILTERDEFS', FILTERDEFS);
  // Actual filtering is done by m_FiltersApply call after FILTERDEFS change
}

/// EXPORT CLASS DEFINITION ///////////////////////////////////////////////////
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
module.exports = MOD;
});

require.register("view/netcreate/hilite-mgr.js", function(exports, require, module) {
'use strict';

/*//////////////////////////////// ABOUT \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\*\

  HILITE MANAGER

  hilite-mgr handles UI highlighting events like:
  * mouse over graph node
  * mouse over Node Table row
  * highlighting found nodes via search
  * Others TBD

\*\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ * //////////////////////////////////////*/

var UNISYS = require('unisys/client');

/// INITIALIZE MODULE /////////////////////////////////////////////////////////
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
var MOD = UNISYS.NewModule(module.id);
var UDATA = UNISYS.NewDataLink(MOD);

/// CONSTANTS & DECLARATIONS //////////////////////////////////////////////////
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
var DBG = false;
var PR = 'hilite-mgr: ';

/// UNISYS HANDLERS ///////////////////////////////////////////////////////////
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
MOD.Hook('INITIALIZE', function () {
  UDATA.HandleMessage('USER_HILITE_NODE', m_UserHighlightNode);
  UDATA.HandleMessage('AUTOSUGGEST_HILITE_NODE', m_AutoSuggestHiliteNode);
  UDATA.HandleMessage('TABLE_HILITE_NODE', m_TableHiliteNode);
}); // end UNISYS_INIT

/// MODULE METHODS ////////////////////////////////////////////////////////////
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
function m_UserHighlightNode(data) {
  // console.log('mouseover', data.nodeId)
  var HILITE = UDATA.AppState('HILITE');
  HILITE.userHighlightNodeId = data.nodeId;
  UDATA.SetAppState('HILITE', HILITE);
}
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/** AUTOSUGGEST_HILITE_NODE shows the current mouse-over node name in a list of
 *  autosuggested/autocompleted node names from AutoComplete.
 */
function m_AutoSuggestHiliteNode(data) {
  var HILITE = UDATA.AppState('HILITE');
  HILITE.autosuggestHiliteNodeId = data.nodeId;
  UDATA.SetAppState('HILITE', HILITE);
}
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/** User is hovering over a row in the NodeTable.
 *  The corresponding node in the graph will also highlighted.
 */
function m_TableHiliteNode(data) {
  var HILITE = UDATA.AppState('HILITE');
  HILITE.tableHiliteNodeId = data.nodeId;
  UDATA.SetAppState('HILITE', HILITE);
}

/// EXPORT CLASS DEFINITION ///////////////////////////////////////////////////
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
module.exports = MOD;
});

require.register("view/netcreate/importexport-mgr.js", function(exports, require, module) {
'use strict';

/// NODE IMPORT ///////////////////////////////////////////////////////////////
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/** Loads the file and checks the first row headers to make sure all the required
 *  headers have been defined.
 *  @param {Object} data
 *  @param {File} data.nodefile - https://developer.mozilla.org/en-US/docs/Web/API/File
 *  @returns {isValid:boolean, messageJsx:jsx, headers:[], lines:[]}
 */
var m_NodefileCheckHeaders = function () {
  var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(data) {
    var isValid, missingKeys, messageJsx, TEMPLATE, NODEKEYS, nodefile, result, lines, headers, nodeKeys, fileKeys;
    return regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            isValid = true;
            missingKeys = [];
            messageJsx = '';

            // Retrieve import file node keys defined in template

            TEMPLATE = UDATA.AppState('TEMPLATE');
            NODEKEYS = Object.values(TEMPLATE.nodeDefs).filter(function (k) {
              return !k.hidden || ENUM.BUILTIN_FIELDS_NODE.includes(k);
            }) // Ignore hidden keys but keep built-in fields, even if hidden
            .map(function (k) {
              return k.exportLabel;
            });
            nodefile = data.nodefile;

            if (!(nodefile === undefined)) {
              _context.next = 8;
              break;
            }

            return _context.abrupt('return', { isValid: false, missingKeys: missingKeys, fileKeys: [] });

          case 8:
            _context.next = 10;
            return nodefile.text();

          case 10:
            result = _context.sent;

            // Validate Data
            lines = result.split(REGEXMatchLFNotInQuotes);
            // First line should list the headers
            // Remove headers, so 'lines' is just data

            headers = lines.shift().trim().split(',');
            // get keys

            nodeKeys = m_flattenKeys(NODEKEYS);
            fileKeys = m_flattenKeys(headers);
            // check that ALL nodeKeys are in the fileKeys

            nodeKeys.forEach(function (k) {
              if (!fileKeys.includes(k)) {
                isValid = false;
                missingKeys.push('"' + k + '"');
              }
            });
            if (!isValid) {
              // construct missing keys jsx
              messageJsx = React.createElement(
                'div',
                { style: { color: 'red' } },
                React.createElement(
                  'div',
                  null,
                  'Error trying to import ',
                  data.nodefile.name,
                  '!'
                ),
                React.createElement(
                  'div',
                  null,
                  'Missing keys: ',
                  missingKeys.join(', ')
                ),
                React.createElement(
                  'div',
                  null,
                  'Keys found in file: ',
                  fileKeys.join(', ')
                )
              );
            }
            return _context.abrupt('return', { isValid: isValid, messageJsx: messageJsx, headers: headers, lines: lines });

          case 18:
          case 'end':
            return _context.stop();
        }
      }
    }, _callee, this);
  }));

  return function m_NodefileCheckHeaders(_x) {
    return _ref.apply(this, arguments);
  };
}();
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/** Reads each line, mapping data fields to internal representation fields
 *  @param {array} headers
 *  @param {array} lines
 *  @returns { isValid:boolean, messageJsx:jsx, nodes:[] }
 */


/// EDGE IMPORT ///////////////////////////////////////////////////////////////
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/** Loads the file and checks the first row headers to make sure all the
 *  required headers have been defined.
 *  See https://developer.mozilla.org/en-US/docs/Web/API/File for File
 *  @param {Object} data
 *  @param {File} data.edgefile
 *  @returns {isValid:boolean, messageJsx:jsx, headers:[], lines:[]}
 */
var m_EdgefileCheckHeaders = function () {
  var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(data) {
    var isValid, missingKeys, messageJsx, TEMPLATE, EDGEKEYS, edgefile, result, lines, headers, edgeKeys, fileKeys;
    return regeneratorRuntime.wrap(function _callee3$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            isValid = true;
            missingKeys = [];
            messageJsx = '';

            // Retrieve import file node keys defined in template

            TEMPLATE = UDATA.AppState('TEMPLATE');
            EDGEKEYS = Object.values(TEMPLATE.edgeDefs).filter(function (k) {
              return !k.hidden || ENUM.BUILTIN_FIELDS_EDGE.includes(k);
            }) // Ignore hidden keys but keep built-in fields, even if hidden
            .map(function (k) {
              return k.exportLabel;
            });
            edgefile = data.edgefile;

            if (!(edgefile === undefined)) {
              _context3.next = 8;
              break;
            }

            return _context3.abrupt('return', { isValid: false, missingKeys: missingKeys, fileKeys: [] });

          case 8:
            _context3.next = 10;
            return edgefile.text();

          case 10:
            result = _context3.sent;

            // Validate Data
            lines = result.split(REGEXMatchLFNotInQuotes);
            // First line should list the headers
            // Remove headers, so 'lines' is just data

            headers = lines.shift().trim().split(',');
            // get keys

            edgeKeys = m_flattenKeys(EDGEKEYS);
            fileKeys = m_flattenKeys(headers);
            // check that ALL edgeKeys are in the fileKeys

            edgeKeys.forEach(function (k) {
              if (!fileKeys.includes(k)) {
                isValid = false;
                missingKeys.push('"' + k + '"');
              }
            });
            if (!isValid) {
              // construct missing keys jsx
              messageJsx = React.createElement(
                'div',
                { style: { color: 'red' } },
                React.createElement(
                  'div',
                  null,
                  'Error trying to import ',
                  data.edgefile.name,
                  '!'
                ),
                React.createElement(
                  'div',
                  null,
                  'Missing keys: ',
                  missingKeys.join(', ')
                ),
                React.createElement(
                  'div',
                  null,
                  'Keys found in file: ',
                  fileKeys.join(', ')
                )
              );
            }
            return _context3.abrupt('return', { isValid: isValid, messageJsx: messageJsx, headers: headers, lines: lines });

          case 18:
          case 'end':
            return _context3.stop();
        }
      }
    }, _callee3, this);
  }));

  return function m_EdgefileCheckHeaders(_x3) {
    return _ref3.apply(this, arguments);
  };
}();
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/** Reads each line, mapping data fields to internal representation fields
 *  @param {array} headers
 *  @param {array} lines
 *  @returns { isValid:boolean, messageJsx:jsx, nodes:[] }
 */


function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

/*//////////////////////////////// ABOUT \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\*\

  ## Import / Export Manager

  See ImportExport.jsx for the UI.

  #### Data Format

  The import/export data format is '.csv'.

  The first row should define the headers.
  Each data row should be comma-delimited and ended with a CR/LF.

  We support:
  * CR/LF inside of double quotes
  * Double quotes need to be escaped by repeating the quote, e.g. `""quoted text"""
  * Dates can be exported and imported as UTCStrings

  In general, any valid '.csv' file exported by Excel ought to work.

  #### Permissions

  Everyone is allowed to EXPORT data.
  * The data fields that are exported are defined in the project's template.
    Any field that is NOT marked "hidden" is exported.

  In general, only admins are allowed IMPORT data.
  * If the `allowLoggedInUserToImport` flag is set in the template, then
    logged-in users are also allowed to import data.
  * When anyone on the net is importing data, "Edit Lock" is set and no
    one else is allowed to import, edit a node or edge, or edit a template.
    This is because each of those activities can potentially conflict with
    each other.


  #### How it works

  Coordinating the selection of node and edge files for imports is a complex
  dance of selection, validation, and reporting.  When an import file is
  selected, we:

  1. Make sure any headers required by the Template are present
  2. Attempt to load the field data into memory
  3. Validate the data, either adding new objects or replacing existing objects
     For edges, we also check that the sources and targets point to valid nodes
  4. Display the expected import -- kind of like a dry run output.
  5. Wait fo the user to confirm and click Import.
  6. After the user clicks import, erge the data into the database and
  refresh global NCDATA.

  If there is a failure at any point, we abort immediately and display an error
  and clear the UI for the user to fix the import file and select a
  replacement file.  Importing can be a complex process, so we want to provide
  as much feedback as we can along the way so users know how to fix problems.

  Node and edge import files can be selected separately and in any order.
  The import data is temporarily stored in `IMPORT_NCDATA` for validation.

  The DB is NOT updated until the user clicks "Import".

\*\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ * //////////////////////////////////////*/

var React = require('react');
var UNISYS = require('unisys/client');
var DATASTORE = require('system/datastore');
var TOML = require('@iarna/toml');
var clone = require('rfdc')();
var UTILS = require('./nc-utils');
var ENUM = require('system/util/enum');

/// CONSTANTS & DECLARATIONS //////////////////////////////////////////////////
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
var DBG = true;
var PR = 'importexport-mgr: ';

/// INITIALIZE MODULE /////////////////////////////////////////////////////////
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
var MOD = UNISYS.NewModule(module.id);
var UDATA = UNISYS.NewDataLink(MOD);

/// CONSTANTS /////////////////////////////////////////////////////////////////
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/// For CSV Importing
/// * new id keyword
var NEW_ID_KEYWORD = 'new'; // use id "new" to add a new record during import
/// We need to match:
/// * To split lines, we need to split on LF that is NOT wrapped in quotes
var REGEXMatchLFNotInQuotes = /\n(?=(?:[^"]*"[^"]*")*[^"]*$)/;
/// * To read fields, we need to ignore commas that are between two double quotes
var REGEXMatchCommasNotInQuotes = /,(?=(?:[^"]*"[^"]*")*[^"]*$)/;

/// UTILITIES /////////////////////////////////////////////////////////////////
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
function m_formatDate(date) {
  // wrap in quotes because time includes a comma
  if (date) return '"' + new Date(date).toUTCString() + '"';
  return '';
}
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
function m_encode(data) {
  var res = void 0;
  // double quotes need to be escaped
  res = String(data).replace(/"/g, '""');
  // Don't encode carriage returns, csv should support LF inside of quotes
  // `REGEXMatchLFNotInQuotes` should work.
  // // encode carriage returns
  // res = String(res).replace(/\n/g, 'nnn');
  return res;
}
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
function m_decode(data) {
  var res = void 0;
  // double quotes need to be escaped
  res = String(data).replace(/""/g, '"');
  return res;
}
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
// DEPRECATED -- Used to flatten 'attributes'
//    'attributes' have been removed, so this should not be needed anymore
// Converts nested key definitions into a flat array, e.g.
//     from ['id', { attributes: ['type', 'info'] } ]
//     into ['id', 'attributes:type', 'attributes:info']
function m_flattenKeys(keys, prefix) {
  if (!Array.isArray(keys)) {
    // Recurse
    var pre = Object.keys(keys)[0];
    return m_flattenKeys(keys[pre], pre);
  } else {
    var flattenedKeys = keys.map(function (k) {
      if (typeof k !== 'string') return m_flattenKeys(k);
      if (prefix) return prefix + ':' + k;else return k;
    });
    return flattenedKeys.flat();
  }
}

/// IMPORT/EXPORT HELPERS ///////////////////////////////////////////////////
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/** Returns an array of export values for a given node record
 *  Used during export.
 *  @param {array} nodes - array of source nodes to export
 *  @param {array} keys - node def keys, e.g. 'id' and 'label'
 *                        NOTE this is usually a subset of nodeDef keys
 *                        with `hidden` keys removed so they won't export
 *  @returns - array of node values, e.g. [1,'Tacitus','Person',...]
 */
function m_renderNodeValues(node, keys) {
  var TEMPLATE = UDATA.AppState('TEMPLATE');

  var RESULT = [];
  keys.forEach(function (key) {
    // If the key is an object, recurse
    // eslint-disable-next-line prefer-reflect
    if (Object.prototype.toString.call(key) === '[object Object]') {
      // DEPRECATED -- 'attribute' handler.
      var subKeys = Object.keys(key); // can have multiple subKeys
      subKeys.forEach(function (k) {
        RESULT.push(m_renderNodeValues(node[k], key[k]));
      });
    }
    // Special Data Handling
    // -- Number
    if (['id'].includes(key)) {
      // Export as a number
      RESULT.push(node[key]);
      return;
    }
    // -- Revision
    if (['revision'].includes(key)) {
      // Export as a number from meta
      RESULT.push(node.meta[key]);
      return;
    }
    // -- DATE
    if (['created', 'updated'].includes(key)) {
      RESULT.push(m_formatDate(node.meta[key]));
      return;
    }
    // -- Special processing for custom fields
    var nodeDef = TEMPLATE.nodeDefs[key];
    if (nodeDef.type === 'infoOrigin') {
      if (node[key]) RESULT.push('"' + m_encode(node[key]) + '"');else RESULT.push('"' + UTILS.DeriveInfoOriginString(node.createdBy, node.meta.created) + '"');
      return;
    }
    // -- Normal processing -- wrap in quotes
    if (Object.prototype.hasOwnProperty.call(node, key)) {
      RESULT.push('"' + m_encode(node[key]) + '"'); // enclose in quotes to support commas
      return;
    }
    // -- Else, data missing/not defined, add empty string
    RESULT.push('');
  });
  return RESULT;
}
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/** Returns an array of node records
 *  Used during export.
 *  @param {array} nodes - array of source nodes to export
 *  @param {array} nodekeys - node def keys, e.g. 'id' and 'label'
 *                            NOTE this is usually a subset of nodeDef keys
 *                            with `hidden` keys removed so they won't export
 *  @returns - array of nodes, e.g. [[<tacitus>], [<marc antony>], ...]
 */
function m_GenerateNodesArray(nodes, nodekeys) {
  /// Define Node KEYS
  var nodesArr = [];
  nodes.forEach(function (n) {
    return nodesArr.push(m_renderNodeValues(n, nodekeys));
  });
  return nodesArr;
}
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/** Returns an array of export values for a given edge record
 *  Used during export.
 *  @param {array} edge - array of source nodes to export
 *  @param {array} keys - edge def keys, e.g. 'id' and 'label'
 *                       NOTE this is usually a subset of edgeDef keys
 *                       with `hidden` keys removed so they won't export
 *  @returns - array of edge values, e.g. [1,'is enemy of',2,...]
 */
function m_renderEdgeValues(edge, keys) {
  var TEMPLATE = UDATA.AppState('TEMPLATE');

  var RESULT = [];
  keys.forEach(function (key) {
    // If the key is an object, recurse
    // eslint-disable-next-line prefer-reflect
    if (Object.prototype.toString.call(key) === '[object Object]') {
      // DEPRECATED -- 'attribute' handler.
      var subKeys = Object.keys(key); // can have multiple subKeys
      subKeys.forEach(function (k) {
        RESULT.push(m_renderEdgeValues(edge[k], key[k]));
      });
    }
    // Special Data Handling
    // -- Number
    if (['id'].includes(key)) {
      // Export as a number
      RESULT.push(edge[key]);
      return;
    }
    // -- SOURCE / TARGET
    if (['source', 'target'].includes(key)) {
      // source/target is an id not an object
      RESULT.push(edge[key]);
      return;
    }
    // -- Revision
    if (['revision'].includes(key)) {
      // Export as a number from meta
      RESULT.push(edge.meta[key]);
      return;
    }
    // -- DATE
    if (['created', 'updated'].includes(key)) {
      RESULT.push(m_formatDate(edge.meta[key]));
      return;
    }
    // -- Special processing for custom fields
    var edgeDefs = TEMPLATE.edgeDefs[key];
    if (edgeDefs.type === 'infoOrigin') {
      if (edge[key]) RESULT.push('"' + m_encode(edge[key]) + '"');else RESULT.push('"' + UTILS.DeriveInfoOriginString(edge.createdBy, edge.meta.created) + '"');
      return;
    }
    // -- normal processing -- wrap in quotes
    if (Object.prototype.hasOwnProperty.call(edge, key)) {
      RESULT.push('"' + m_encode(edge[key]) + '"'); // enclose in quotes to support commas
      return;
    }
    // -- Else, data missing/not defined, add empty string
    RESULT.push('');
  });
  return RESULT;
}
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/** Returns an array of edge records
 *  Used during export.
 *  @param {array} edges - array of source edges to export
 *  @param {array} edgekeys - edge def keys, e.g. 'id' and 'label'
 *                           NOTE this is usually a subset of edgeDef keys
 *                           with `hidden` keys removed so they won't export
 *  @returns - array of edges, e.g. [[<1:2>], [<1:4>], ...]
 */
function m_GenerateEdgesArray(edges, edgekeys) {
  /// Define Edge KEYS
  var edgeArr = [];
  edges.forEach(function (e) {
    return edgeArr.push(m_renderEdgeValues(e, edgekeys));
  });
  return edgeArr;
}

/// EXPORT NODES //////////////////////////////////////////////////////////////
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/** API METHOD
 *  Exports FILTERED data, not the full data set.
 */
MOD.ExportNodes = function () {
  var DATA = UDATA.AppState('FILTEREDNCDATA');
  var TEMPLATE = UDATA.AppState('TEMPLATE');
  var nodes = DATA.nodes;

  var EXPORT = '';

  /// 1. Export Nodes
  /// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  /// Define Node KEYS to export
  /// Use nodekeys from TEMPLATE
  /// Skip hidden fields that are not built-in fields
  /// Built-in fields are ALWAYS exported
  var nodekeys = Object.keys(TEMPLATE.nodeDefs).filter(function (k) {
    return TEMPLATE.nodeDefs[k].hidden && !ENUM.BUILTIN_FIELDS_NODE.includes(k) ? false : k;
  });

  /// 2. Expand to CSV
  /// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  ///    2.1. NODES
  ///    2.1.1. Create headers
  var nodeHeadersArr = [];
  nodekeys.forEach(function (key) {
    // eslint-disable-next-line prefer-reflect
    if (Object.prototype.toString.call(key) === '[object Object]') {
      // DEPRECATED -- 'attribute' handler.
      throw new Error('Unexpected node type for ' + JSON.stringify(key));
      // This shouldn't be called anymore as of 2/2022 because the data fields
      // have been flattened. See #198.
      // const subKeys = Object.keys(key); // can have multiple subKeys
      // const internalkeys = subKeys.map(sk => key[sk].map(k => `${sk}:${k}`)).flat();
      // return internalkeys.map(k => NODEKEY_LABELS[k]);
    } else {
      nodeHeadersArr.push(TEMPLATE.nodeDefs[key].exportLabel);
    }
  });
  var nodeHeaders = nodeHeadersArr.flat();
  ///    2.1.2 Export Nodes with filtered headers
  var nodesArr = m_GenerateNodesArray(nodes, nodekeys);
  ///    2.1.3 Attach headers to front of file
  nodesArr.unshift(nodeHeaders); // add headers
  ///    2.1.4 Expand Nodes to CSV
  var commaDelimitedNodes = nodesArr.map(function (n) {
    return n.join(',');
  });
  EXPORT += commaDelimitedNodes.join('\n');

  /// 3. Save to File
  /// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  // const encodedURI = encodeURI(EXPORT);
  var link = document.createElement('a');
  var blob = new Blob(['\uFEFF', EXPORT]);
  var url = URL.createObjectURL(blob);
  link.href = url;
  var DATASET = window.NC_CONFIG.dataset || 'netcreate';
  link.download = DATASET + '_nodes.csv';
  // link.setAttribute('href', encodedURI);
  // link.setAttribute('download', 'netcreate_export.csv');
  document.body.appendChild(link); // Required for FF
  link.click();
  document.body.removeChild(link);
};

/// EXPORT EDGES //////////////////////////////////////////////////////////////
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/** API METHOD
 *  Exports FILTERED data, not the full data set.
 */
MOD.ExportEdges = function () {
  var DATA = UDATA.AppState('FILTEREDNCDATA');
  var TEMPLATE = UDATA.AppState('TEMPLATE');
  var edges = DATA.edges;

  var EXPORT = '';

  /// 1. Export Edges
  /// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  /// Define Edge KEYS

  // Old attributes method
  // const edgesArr = m_GenerateEdgesArray(edges, EDGEKEYS);

  // New Template method
  // Use edgekeys from TEMPLATE
  // Skip hidden fields that are not built-in fields
  // const edgekeys = Object.keys(TEMPLATE.edgeDefs);
  var edgekeys = Object.keys(TEMPLATE.edgeDefs).filter(function (k) {
    return TEMPLATE.edgeDefs[k].hidden && !ENUM.BUILTIN_FIELDS_EDGE.includes(k) ? false : k;
  });

  // const edgesArr = m_GenerateEdgesArray(edges, edgekeys);

  /// 3. Expand to CSV
  /// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  ///   3.1. EDGES
  ///   3.1.1. Create headers
  var edgeHeadersArr = [];
  edgekeys.forEach(function (key) {
    // eslint-disable-next-line prefer-reflect
    if (Object.prototype.toString.call(key) === '[object Object]') {
      // DEPRECATED -- 'attribute' handler.
      throw new Error('Unexpected edge type for ' + JSON.stringify(key));
      // const subKeys = Object.keys(key); // can have multiple subKeys
      // return subKeys.map(sk => key[sk].map(k => `${sk}:${k}`)).flat();
    } else {
      edgeHeadersArr.push(TEMPLATE.edgeDefs[key].exportLabel);
    }
  });
  var edgeHeaders = edgeHeadersArr.flat();
  ///    3.1.2 Export Nodes with filtered headers
  var edgesArr = m_GenerateEdgesArray(edges, edgekeys);
  ///    3.1.3 Attach headers to front of file
  edgesArr.unshift(edgeHeaders);
  ///    3.1.4 Expand Edges to CSV
  var commaDelimitedEdges = edgesArr.map(function (e) {
    return e.join(',');
  });
  EXPORT += commaDelimitedEdges.join('\n');

  /// 4. Save to File
  /// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  // const encodedURI = encodeURI(EXPORT);
  var link = document.createElement('a');
  var blob = new Blob(['\uFEFF', EXPORT]);
  var url = URL.createObjectURL(blob);
  link.href = url;
  var DATASET = window.NC_CONFIG.dataset || 'netcreate';
  link.download = DATASET + '_edges.csv';
  // link.setAttribute('href', encodedURI);
  // link.setAttribute('download', 'netcreate_export.csv');
  document.body.appendChild(link); // Required for FF
  link.click();
  document.body.removeChild(link);
};

/// IMPORT METHODS ////////////////////////////////////////////////////////////
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
var nodeFile = void 0;
var edgeFile = void 0;
var nodesToImport = [];
var edgesToImport = [];
var IMPORT_NCDATA = void 0;
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/** API METHOD
 *  Called by ImportExport when user clicks "Clear File Selections".
 *  Resets the loaded/validated data for a new set of data
 */
MOD.ResetImportData = function () {
  nodeFile = undefined;
  edgeFile = undefined;
  nodesToImport = [];
  edgesToImport = [];
  IMPORT_NCDATA = clone(UDATA.AppState('NCDATA'));
};

/// IMPORT HELPERS ////////////////////////////////////////////////////////////
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/// Make sure source and target have valid ids
/// If not, add message to edgeImportErrors
/// `row` is the line number in the import csv file
function m_hasValidSourceTarget(edge, NCDATA, edgeImportErrors, row) {
  var source = NCDATA.nodes.find(function (n) {
    return n.id === Number(edge.source);
  });
  var target = NCDATA.nodes.find(function (n) {
    return n.id === Number(edge.target);
  });
  if (source === undefined) edgeImportErrors.push('Edge id ' + edge.id + ', row ' + row + ' references unknown source node id ' + edge.source);
  if (target === undefined) edgeImportErrors.push('Edge id ' + edge.id + ', row ' + row + ' references unknown target node id ' + edge.target);
  return source && target;
}

/// IMPORT MODULE METHODS /////////////////////////////////////////////////////
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/** API METHOD
 *  Called by ImportExport if the user Cancels selecting a node file
 */
MOD.ResetNodeImportData = function () {
  nodeFile = undefined;
  nodesToImport = [];
  if (IMPORT_NCDATA) IMPORT_NCDATA.nodes = clone(UDATA.AppState('NCDATA').nodes);
};
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/** API METHOD
 *  Called by IMportExport if the user Cancels selecting a node file
 */
MOD.ResetEdgeImportData = function () {
  edgeFile = undefined;
  edgesToImport = [];
  if (IMPORT_NCDATA) IMPORT_NCDATA.edges = clone(UDATA.AppState('NCDATA').edges);
};function m_NodefileLoadNodes(headers, lines) {
  // Map import fields (exportLabel) to internal representation fields, e.g. ID => id,
  // essentially a reverse look up map
  var TEMPLATE = UDATA.AppState('TEMPLATE');
  var INTERNAL_FIELDS_MAP = new Map();
  Object.entries(TEMPLATE.nodeDefs).map(function (e) {
    return INTERNAL_FIELDS_MAP.set(e[1].exportLabel, e[0]);
  });
  // convert nodefileData to JSON
  // Load JSON
  var isValid = true;
  var messageJsx = '';
  var nodes = lines.map(function (l) {
    if (l === '') return undefined; // skip blank lines
    var node = { meta: {} };
    var subcategories = new Map();
    var importFields = l.split(REGEXMatchCommasNotInQuotes); // ?=" needed to match commas in strings
    importFields.forEach(function (f, index) {
      var field = f.replace(/^"/, '').replace(/"$/, ''); // strip start and end quotes from strings
      var key = headers[index];
      var keysplit = String(key).split(':');
      // Subcategory and subkey are DEPRECATED
      var subcategory = keysplit[0]; // e.g. 'attributes' of 'attributes:Node_type'
      var subkey = keysplit[1]; // e.g. 'Node_type'
      if (subkey) {
        isValid = false;
        messageJsx = React.createElement(
          'div',
          { color: 'red' },
          '`subkey $',
          subkey,
          ' is deprecated!`'
        );
        console.error(PR, 'subkey ' + subkey + ' is deprecated!');
        // DEPRECATED: Review if we decide to use this again.
        // // Using a sub category?  e.g. 'attributes:Node_type'
        // const currSubfields = subcategories.get(subcategory) || {};
        // console.log('...currSubfields', currSubfields, field)
        // currSubfields[subkey] = field;
        // subcategories.set(subcategory, currSubfields);
        // console.log('adding subfields', key, currSubfields, subcategories)
      } else {
        // not using a subcategory, just a regular field
        var exportLabel = headers[index];
        if (exportLabel === undefined) console.error(PR, 'could not find exportLabel for index', index, 'in', headers);
        var internalLabel = INTERNAL_FIELDS_MAP.get(exportLabel);
        // special handling for internal fields
        if (['id'].includes(internalLabel)) {
          // Note that Number("") => 0
          // We don't want empty ids to be converted to id 0
          // so we explicitly replace it with NaN
          node[internalLabel] = field === '' ? NaN : field; // ids are numbers
        } else if (['created', 'updated'].includes(internalLabel)) {
          // meta fields: date
          node.meta[internalLabel] = new Date(field).getTime();
        } else if (['revision'].includes(internalLabel)) {
          // meta fields: revision
          node.meta[internalLabel] = field;
        } else {
          node[internalLabel] = m_decode(field); // convert double quotes
        }
      }
    });

    // DEPRECATED
    // collapse 'attributes' and 'meta' into objects
    // subcategories.forEach((val, key) => {
    //   node[key] = val
    // });

    // Add meta data if missing
    if (isNaN(node.meta.created)) node.meta.created = new Date().getTime();
    if (isNaN(node.meta.revision)) node.meta.revision = 0;

    return node;
  }).filter(function (n) {
    return n !== undefined;
  });
  return { isValid: isValid, messageJsx: messageJsx, nodes: nodes };
}
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/** Checks to make sure all nodes to import have a valid id or specify "new"
 *  At the end of this method, IMPORT_NCDATA will have imported nodes added
 *  EXCEPT for "new" id nodes
 *  @param {array} nodes
 *  @returns { isValid:boolean, messageJsx:jsx, nodes, IMPORT_NCDATA }
 */
function m_NodefileValidateNodes(nodes) {
  var isValid = true;
  var messageJsx = '';
  var nodesAdded = 0; // counter
  var nodesReplaced = 0; // counter
  var importMsgs = [];
  var nodeImportErrors = [];
  nodes.forEach(function (n, i) {
    var row = i + 2; // to account for header row
    if (String(n.id).toLowerCase() === NEW_ID_KEYWORD) {
      //  A1.1 "new" node
      importMsgs.push('New node "' + n.label + '" with auto-generated id will be added.');
      //  NOTE: "new" nodes are not added until after DB_MERGE since they do not have an id
      //        Edge imports should not be referencing these new nodes.
      nodesAdded++;
    } else {
      n.id = Number(n.id); // csv imports as string, so convert to Number
      if (isNaN(n.id)) {
        // A1.2 Invalid node id, usually a string
        isValid = false;
        nodeImportErrors.push('Node in row ' + row + ' does not have a valid id.  Found: "' + n.id + '".');
      } else {
        var existingNodeIdx = IMPORT_NCDATA.nodes.findIndex(function (node) {
          return node.id === n.id;
        });
        if (existingNodeIdx > -1) {
          // A1.3 Replace existing node
          importMsgs.push('Existing node id ' + n.id + ' "' + IMPORT_NCDATA.nodes[existingNodeIdx].label + '" will be replaced by node "' + n.label + '" in row ' + row + ' with matching id.');
          IMPORT_NCDATA.nodes.splice(existingNodeIdx, 1, n);
          nodesReplaced++;
        } else {
          // A1.4 Referenced unknown id, add if valid
          importMsgs.push('New node id ' + n.id + ' "' + n.label + '" will be added.');
          IMPORT_NCDATA.nodes.push(n);
          nodesAdded++;
        }
      }
    }
  });
  if (isValid) {
    messageJsx = React.createElement(
      'ul',
      null,
      importMsgs.map(function (e, i) {
        return React.createElement(
          'li',
          { key: i },
          e
        );
      })
    );
  } else {
    messageJsx = React.createElement(
      'ul',
      { style: { color: 'red' } },
      nodeImportErrors.map(function (e, i) {
        return React.createElement(
          'li',
          { key: i },
          e
        );
      })
    );
  }
  return { isValid: isValid, messageJsx: messageJsx, nodes: nodes, IMPORT_NCDATA: IMPORT_NCDATA };
}
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/** API METHOD
 *  Walks down the checkers/validators one by one and aborts/returns an error message if an
 *  an error is encountered.  Data is stored temporarily in `IMPORT_NCDATA` so that we can
 *  process edges -- e.g. an edge might refer to a node that is currently being imported.
 *
 *  Data is not actually imported in the DB until the user clicks "Import"
 *
 *  Side effect: Updates `nodesToImport` with validated nodes
 *  @param {object} data
 *  @param {File} data.nodefile - https://developer.mozilla.org/en-US/docs/Web/API/File
 *  @return { isValid:boolean, messages:[], errors:[] }
 */
MOD.NodefileValidate = function () {
  var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(data) {
    var nodeFileName, headerResults, importResults, nodeResults;
    return regeneratorRuntime.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            if (data.nodefile) {
              _context2.next = 2;
              break;
            }

            return _context2.abrupt('return', { isValid: false });

          case 2:

            if (!IMPORT_NCDATA) IMPORT_NCDATA = clone(UDATA.AppState('NCDATA'));
            nodeFileName = data.nodefile.name;
            _context2.next = 6;
            return m_NodefileCheckHeaders(data);

          case 6:
            headerResults = _context2.sent;

            if (headerResults.isValid) {
              _context2.next = 9;
              break;
            }

            return _context2.abrupt('return', Object.assign(headerResults, {
              messageTitle: 'Nodes import file "' + nodeFileName + '" will not be imported: Header Validation Failed!'
            }));

          case 9:
            importResults = m_NodefileLoadNodes(headerResults.headers, headerResults.lines);

            if (importResults.isValid) {
              _context2.next = 12;
              break;
            }

            return _context2.abrupt('return', Object.assign(importResults, {
              messageTitle: 'Nodes import file "' + nodeFileName + '" will not be imported: Load File Failed!'
            }));

          case 12:
            nodeResults = m_NodefileValidateNodes(importResults.nodes, IMPORT_NCDATA);

            if (nodeResults.isValid) {
              _context2.next = 15;
              break;
            }

            return _context2.abrupt('return', Object.assign(nodeResults, {
              messageTitle: 'Nodes import file "' + nodeFileName + '" will not be imported: Data Validation Failed!'
            }));

          case 15:

            // set module-wide vars
            nodesToImport = nodeResults.nodes;
            nodeFile = data.nodefile;
            IMPORT_NCDATA.nodes = Object.assign(IMPORT_NCDATA.nodes, nodeResults.nodes);
            return _context2.abrupt('return', Object.assign(nodeResults, {
              messageTitle: 'Nodes import file "' + nodeFileName + '": Validated!'
            }));

          case 19:
          case 'end':
            return _context2.stop();
        }
      }
    }, _callee2, undefined);
  }));

  return function (_x2) {
    return _ref2.apply(this, arguments);
  };
}();function m_EdgefileLoadEdges(headers, lines) {
  // Map import fields (exportLabel) to internal representation fields, e.g. ID => id,
  // essentially a reverse look up map
  var TEMPLATE = UDATA.AppState('TEMPLATE');
  var INTERNAL_FIELDS_MAP = new Map();
  Object.entries(TEMPLATE.edgeDefs).map(function (e) {
    return INTERNAL_FIELDS_MAP.set(e[1].exportLabel, e[0]);
  });

  // convert nodefileData to JSON
  // Load JSON
  var isValid = true;
  var messageJsx = '';
  var edges = lines.map(function (l) {
    if (l === '') return undefined; // skip blank lines
    var edge = { meta: {} };
    var subcategories = new Map();
    var importFields = l.split(REGEXMatchCommasNotInQuotes); // ?=" needed to match commas in strings
    importFields.forEach(function (f, index) {
      var field = f.replace(/^"/, '').replace(/"$/, ''); // strip start and end quotes from strings
      var key = headers[index];
      var keysplit = String(key).split(':');
      // Subcategory and subkey are DEPRECATED
      var subcategory = keysplit[0]; // e.g. 'attributes' of 'attributes:Node_type'
      var subkey = keysplit[1]; // e.g. 'Node_type'
      if (subkey) {
        isValid = false;
        messageJsx = React.createElement(
          'div',
          { color: 'red' },
          '`subkey $',
          subkey,
          ' is deprecated!`'
        );
        console.error(PR, 'subkey ' + subkey + ' is deprecated!');
        // DEPRECATED: Review if we decide to use this again.
        // // Using a sub category?  e.g. 'attributes:Node_type'
        // const currSubfields = subcategories.get(subcategory) || {};
        // console.log('...currSubfields', currSubfields, field)
        // currSubfields[subkey] = field;
        // subcategories.set(subcategory, currSubfields);
        // console.log('adding subfields', key, currSubfields, subcategories)
      } else {
        // not using a subcategory, just a regular field
        // meta field?
        var exportLabel = headers[index];
        if (exportLabel === undefined) console.error(PR, 'could not find exportLabel for index', index, 'in', headers);
        var internalLabel = INTERNAL_FIELDS_MAP.get(exportLabel);
        // special handling for internal fields
        if (['id', 'source', 'target'].includes(internalLabel)) {
          // Note that Number("") => 0
          // We don't want empty ids to be converted to id 0
          // so we explicitly replace it with NaN
          edge[internalLabel] = field === '' ? NaN : field; // ids are numbers
        } else if (['created', 'updated'].includes(internalLabel)) {
          // meta fields: date
          edge.meta[internalLabel] = new Date(field).getTime();
        } else if (['revision'].includes(internalLabel)) {
          // meta fields: revision
          edge.meta[internalLabel] = field;
        } else {
          edge[internalLabel] = m_decode(field); // convert double quotes
        }
      }
    });

    // DEPRECATED
    // collapse 'attributes' and 'meta' into objects
    // subcategories.forEach((val, key) => {
    //   node[key] = val
    // });

    // Add meta data if missing
    if (isNaN(edge.meta.created)) edge.meta.created = new Date().getTime();
    if (isNaN(edge.meta.revision)) edge.meta.revision = 0;

    return edge;
  }).filter(function (e) {
    return e !== undefined;
  });
  return { isValid: isValid, messageJsx: messageJsx, edges: edges };
}
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/** Checks to make sure all edges to import have a valid id or specify "new"
 *  @param {array} edges
 *  @returns { isValid:boolean, messageJsx:jsx, nodes, IMPORT_NCDATA }
 *          At the end of this method, IMPORT_NCDATA will have imported edges added EXCEPT for "new" id edges
 */
function m_EdgefileValidateEdges(edges) {
  var isValid = true;
  var messageJsx = '';
  var edgesAdded = 0; // counter
  var edgesReplaced = 0; // counter
  var importMsgs = [];
  var edgeImportErrors = [];
  edges.forEach(function (e, i) {
    var row = i + 2; // to account for header row
    e.size = 1; // Set default edge size

    // Make sure each edge has a valid source and target
    if (!m_hasValidSourceTarget(e, IMPORT_NCDATA, edgeImportErrors, row)) isValid = false;

    if (String(e.id).toLowerCase() === NEW_ID_KEYWORD) {
      //  A1.1 "new" edge
      importMsgs.push('New edge with auto-generated id will be added.');
      //  NOTE: "new" edges are not added until after DB_MERGE since they do not have an id
      edgesAdded++;
    } else {
      e.id = Number(e.id); // csv imports as string, so convert to Number
      if (isNaN(e.id)) {
        // A1.2 Invalid edge id, usually a string
        isValid = false;
        edgeImportErrors.push('Edge in row ' + row + ' does not have a valid id.  Found: "' + e.id + '".');
      } else {
        var existingEdgeIdx = IMPORT_NCDATA.edges.findIndex(function (edge) {
          return edge.id === e.id;
        });
        if (existingEdgeIdx > -1) {
          // A1.3 Replace existing node
          importMsgs.push('Existing edge id ' + e.id + ' will be replaced by edge in row ' + row + ' with matching id.');
          IMPORT_NCDATA.edges.splice(existingEdgeIdx, 1, e);
          edgesReplaced++;
        } else {
          // A1.4 Referenced unknown id, add if valid
          importMsgs.push('New edge id ' + e.id + ' will be added.');
          IMPORT_NCDATA.edges.push(e);
          edgesAdded++;
        }
      }
    }
  });
  if (isValid) {
    messageJsx = React.createElement(
      'ul',
      null,
      importMsgs.map(function (e, i) {
        return React.createElement(
          'li',
          { key: i },
          e
        );
      })
    );
  } else {
    messageJsx = React.createElement(
      'ul',
      { style: { color: 'red' } },
      edgeImportErrors.map(function (e, i) {
        return React.createElement(
          'li',
          { key: i },
          e
        );
      })
    );
  }
  return { isValid: isValid, messageJsx: messageJsx, edges: edges, IMPORT_NCDATA: IMPORT_NCDATA };
}
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/** API METHOD
 *  Walks down the checkers/validators one by one and aborts/returns an error
 *  message if an an error is encountered.  Data is stored temporarily in
 *  `IMPORT_NCDATA` so that we can process edges -- e.g. an edge might refer to
 *  a node that is currently being imported.
 *
 *  Data is not actually imported in the DB until the user clicks "Import"
 *
 *  Side effect: Updates `edgesToImport` with validated edges
 *  @param {object} data
 *  @param {File} data.edgefile - developer.mozilla.org/en-US/docs/Web/API/File
 *  @return { isValid:boolean, messages:[], errors:[] }
 */
MOD.EdgefileValidate = function () {
  var _ref4 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(data) {
    var edgeFileName, headerResults, importResults, edgeResults;
    return regeneratorRuntime.wrap(function _callee4$(_context4) {
      while (1) {
        switch (_context4.prev = _context4.next) {
          case 0:
            if (data.edgefile) {
              _context4.next = 2;
              break;
            }

            return _context4.abrupt('return', { isValid: false });

          case 2:

            if (!IMPORT_NCDATA) IMPORT_NCDATA = clone(UDATA.AppState('NCDATA'));
            edgeFileName = data.edgefile.name;
            _context4.next = 6;
            return m_EdgefileCheckHeaders(data);

          case 6:
            headerResults = _context4.sent;

            if (headerResults.isValid) {
              _context4.next = 9;
              break;
            }

            return _context4.abrupt('return', Object.assign(headerResults, {
              messageTitle: 'Edges import file "' + edgeFileName + '" will not be imported: Header Validation Failed!'
            }));

          case 9:
            importResults = m_EdgefileLoadEdges(headerResults.headers, headerResults.lines);

            if (importResults.isValid) {
              _context4.next = 12;
              break;
            }

            return _context4.abrupt('return', Object.assign(importResults, {
              messageTitle: 'Edges mport file "' + edgeFileName + '" will not be imported: Load File Failed!'
            }));

          case 12:
            edgeResults = m_EdgefileValidateEdges(importResults.edges, IMPORT_NCDATA);

            if (edgeResults.isValid) {
              _context4.next = 15;
              break;
            }

            return _context4.abrupt('return', Object.assign(edgeResults, {
              messageTitle: 'Edges import file "' + edgeFileName + '" will not be imported: Data Validation Failed!'
            }));

          case 15:

            // set module-wide vars
            edgesToImport = edgeResults.edges; // set module-wide var
            edgeFile = data.edgefile; // set module-wide var
            return _context4.abrupt('return', Object.assign(edgeResults, {
              messageTitle: 'Edges import file "' + edgeFileName + '": Validated!'
            }));

          case 18:
          case 'end':
            return _context4.stop();
        }
      }
    }, _callee4, undefined);
  }));

  return function (_x4) {
    return _ref4.apply(this, arguments);
  };
}();

/// MAIN IMPORT ///////////////////////////////////////////////////////////////
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/** API METHOD
 *  This is triggered when the user clicks the "Import" button.
 *  Forces a RELOAD_DB after the import data is merged into the database.
 *  `replace` is used to "load" a project with Turbo360
 *  @param {boolean} replace -- replace data instead of merge
 *  @returns {messageJsx} -- summary of file imported
 */
MOD.Import = function () {
  var _ref5 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5(replace) {
    var mergeData, importedFiles, importedFileNames;
    return regeneratorRuntime.wrap(function _callee5$(_context5) {
      while (1) {
        switch (_context5.prev = _context5.next) {
          case 0:
            if (!replace) {
              _context5.next = 4;
              break;
            }

            return _context5.abrupt('return', new Promise(function (resolve, reject) {
              var d3data = { nodes: nodesToImport, edges: edgesToImport };
              UDATA.Call('SRV_DBREPLACE', d3data).then(function (res) {
                if (res.OK) {
                  console.log(PR, 'database set OK', res);
                  // Reload NCDATA from the DB to get new Node and Edge Ids created during the merge
                  UDATA.LocalCall('RELOAD_DB');
                  resolve(res);
                } else {
                  reject(new Error(JSON.stringify(res)));
                }
              });
            }));

          case 4:
            // Merge data
            // Write to database!
            mergeData = { nodes: nodesToImport, edges: edgesToImport };
            _context5.next = 7;
            return UDATA.LocalCall('DB_MERGE', mergeData).then(function (res) {
              // Reload NCDATA from the DB to get new Node and Edge Ids created during the merge
              UDATA.LocalCall('RELOAD_DB');
            });

          case 7:
            importedFiles = [];

            if (nodeFile) importedFiles.push(nodeFile.name);
            if (edgeFile) importedFiles.push(edgeFile.name);
            importedFileNames = importedFiles.join(', ');
            return _context5.abrupt('return', {
              messageJsx: React.createElement(
                'div',
                null,
                importedFileNames,
                ' Import Completed!'
              )
            });

          case 12:
          case 'end':
            return _context5.stop();
        }
      }
    }, _callee5, undefined);
  }));

  return function (_x5) {
    return _ref5.apply(this, arguments);
  };
}();

/// EXPORT CLASS DEFINITION ///////////////////////////////////////////////////
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
module.exports = MOD;
});

require.register("view/netcreate/lock-mgr.js", function(exports, require, module) {
'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

/*//////////////////////////////// ABOUT \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\*\

  lock-mgr

  lock-mgr maintains the LOCKMGR app state, which is used to track the
  status of locks on nodes, edges, and comments.

  When a lock is requested or released, LOCKMGR state is updated.
  Any components that are subscribed to the state update will be notified.

  Calls
  - RequestLockNode
  - RequestUnlockNode
  - RequestLockEdge
  - RequestUnlockEdge

  How it works
  - A component requests a lock, e.g. NCNode.LockNode
    which calls LOCKMGR.RequestLockNode
  - lock-mgr makes to request to the server
  - server passes the call to server-database.GetEditStatus
  - server-database returns the new value
  - server sends EDIT_PERMISSIONS_UPDATE to all clients
  - EDIT_PERMISSIONS_UPDATE tells lock-mgr to update the LOCKMGR state

  Used by:
  - NCNode
  - NCEdge


\*\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ * //////////////////////////////////////*/

var UNISYS = require('unisys/client');

var _require = require('system/util/enum'),
    EDITORTYPE = _require.EDITORTYPE;

/// CONSTANTS & DECLARATIONS //////////////////////////////////////////////////
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -


var DBG = false;
var PR = 'lock-mgr: ';

/// MODULE INITIALIZATION /////////////////////////////////////////////////////
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
var MOD = UNISYS.NewModule(module.id);
var UDATA = UNISYS.NewDataLink(MOD);

/// UTILITIES /////////////////////////////////////////////////////////////////

/// LIFECYCLE HANDLERS ////////////////////////////////////////////////////////
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/*/ lifecycle INITIALIZE handler
/*/
MOD.Hook('INITIALIZE', function () {
  m_Init();
  UDATA.HandleMessage('EDIT_PERMISSIONS_UPDATE', m_UpdateLockState);
  UDATA.HandleMessage('COMMENT_UPDATE_PERMISSIONS', m_UpdateLockState);
}); // end UNISYS_INIT

/// PRIVATE METHODS ///////////////////////////////////////////////////////////
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
function m_Init() {
  var LOCKSTATE = {
    templateBeingEdited: false,
    importActive: false,
    nodeOrEdgeBeingEdited: false,
    // commentBeingEditedByMe: false, // NOT IMPLEMENTED
    lockedNodes: [],
    lockedEdges: [],
    lockedComments: []
  };
  UDATA.SetAppState('LOCKSTATE', LOCKSTATE);
}
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/**
 *
 * @param {object} data
 * @param {boolean} data.templateBeingEdited
 * @param {boolean} data.importActive
 * @param {boolean} data.nodeOrEdgeBeingEdited
//  * @param {boolean} data.commentBeingEditedByMe // NOT IMPLEMENTED
 * @param {Array} data.lockedNodes
 * @param {Array} data.lockedEdges
 * @param {Array} data.lockedComments
 */
function m_UpdateLockState(data) {
  var LOCKSTATE = UDATA.AppState('LOCKSTATE');
  UDATA.SetAppState('LOCKSTATE', _extends({}, LOCKSTATE, data));
}

/// PUBLIC METHODS ////////////////////////////////////////////////////////////
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
function RequestLockNode(nodeId, cb) {
  UDATA.Call('SRV_DBLOCKNODE', { nodeID: nodeId }).then(function (data) {
    if (typeof cb === 'function') cb(data.locked);
  });
}
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
function RequestUnlockNode(nodeId, cb) {
  UDATA.Call('SRV_DBUNLOCKNODE', { nodeID: nodeId }).then(function (data) {
    if (typeof cb === 'function') cb(data.locked);
  });
}
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
function RequestLockEdge(edgeId, cb) {
  UDATA.Call('SRV_DBLOCKEDGE', { edgeID: edgeId }).then(function (data) {
    if (typeof cb === 'function') cb(data.locked);
  });
}
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
function RequestUnlockEdge(edgeId, cb) {
  UDATA.Call('SRV_DBUNLOCKEDGE', { edgeID: edgeId }).then(function (data) {
    if (typeof cb === 'function') cb(data.locked);
  });
}
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
function RequestEditLock(editorType, cb) {
  if (cb) UDATA.NetCall('SRV_REQ_EDIT_LOCK', { editor: editorType }).then(function (data) {
    if (typeof cb === 'function') cb(data);
  });else UDATA.NetSignal('SRV_REQ_EDIT_LOCK', { editor: editorType });
}
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
function RequestEditUnlock(editorType, cb) {
  if (cb) UDATA.NetCall('SRV_RELEASE_EDIT_LOCK', { editor: editorType }).then(function (data) {
    if (typeof cb === 'function') cb(data.locked);
  });else UDATA.NetSignal('SRV_RELEASE_EDIT_LOCK', { editor: editorType });
}

/// EXPORT REACT COMPONENT ////////////////////////////////////////////////////
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
module.exports = {
  RequestLockNode: RequestLockNode,
  RequestUnlockNode: RequestUnlockNode,
  RequestLockEdge: RequestLockEdge,
  RequestUnlockEdge: RequestUnlockEdge,
  RequestEditLock: RequestEditLock,
  RequestEditUnlock: RequestEditUnlock
};
});

require.register("view/netcreate/nc-logic.js", function(exports, require, module) {
'use strict';

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

/* eslint-disable no-alert */
/*//////////////////////////////// ABOUT \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\*\

  nc-logic

  Net.Create application logic

  * EVENTS: D3 Graph Updates

    Mark Node/Edge          Nodes in the graph are marked via a stroke around
                            the circle.  There are two types of marks:

                            1. SEARCH -- when a node matches a search, its
                            strokeColor is set to green.

                            2. SELECTION -- when a node is selected by the
                            user and shown in the NodeSelector either by
                            directly clicking on it or by clicking on a
                            item in the search suggestion list, the node
                            data is marked `selected` and a blue strokeColor
                            is applied.

                            The two marks are orthogonal to each other: a
                            node can be both searched and selected, though
                            the selection mark will override the search
                            mark.

                            The rendering is handled by modifying the
                            node data in NCDATA.  d3-simplenetgraph will
                            then read any NCDATA updates and redraw
                            the graph based on the updated data.

    Add New Node/Edge       When the user adds a new edge or node, handlers in
                            NetCreate will update its `this.state.data`
                            with the new nodes/edges.  This is passed on to
                            `NetGraph.jsx` and in turn to `D3SimpleNetGraph.js`
                            which will display the new data during its update
                            cycle.


\*\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ * //////////////////////////////////////*/

var SETTINGS = require('settings');
var UNISYS = require('unisys/client');
var JSCLI = require('system/util/jscli');
var D3 = require('d3');
var UTILS = require('./nc-utils');

var NETWORK = require('unisys/client-network');
var DATASTORE = require('system/datastore');
var SESSION = require('unisys/common-session');
var PROMPTS = require('system/util/prompts');
var CMTMGR = require('./comment-mgr');

/// CONSTANTS & DECLARATIONS //////////////////////////////////////////////////
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
var DBG = false;
var PR = PROMPTS.Pad('NCLOGIC');
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
var DESELECTED_COLOR = '';
// For backwards compatability, if the template is not setting these
// Ideally we want to centralize the backwards compatability at some point into one spot
// OR just remove it, but this was easier to test and shouldn't impact performance substantively
var DEFAULT_SEARCH_COLOR = '#008800';
var DEFAULT_SOURCE_COLOR = '#FFa500';
var TARGET_COLOR = '#FF0000';
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
var DATASET = window.NC_CONFIG.dataset || 'netcreate';
var TEMPLATE_URL = 'templates/' + DATASET + '.toml';

/// INITIALIZE MODULE /////////////////////////////////////////////////////////
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
var MOD = UNISYS.NewModule(module.id);
var UDATA = UNISYS.NewDataLink(MOD);

/// APP STATE/DATA STRUCTURES /////////////////////////////////////////////////
/*/ - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - \*\

  SELECTION

  The SELECTION state maintains the list of nodes and edges that are
  currently selected and loaded in the forms.

  Set by      AutoComplete's call to SOURCE_SELECT
              D3SimpleNetGraph's call to SOURCE_SELECT
              EdgeEditor's call to EDGE_UPDATE
  Handled by  NodeSelector to load the currently selected node
              NodeSelector also sets the edges in EdgeEditor
              EdgeEditor to select the target node when creating new edge

  * nodes     An array of current selected nodes for editing.
              This is the node the user clicked on in the graph or selected from
              the suggestions list
  * edges     An array of edge objects for editing
              *REVIEW*: Should this be renamed "selectedEdges" to distinguish from
              *NCDATA.edge



  SEARCH

  The SEARCH state keeps track of the text being searched for in the
  main AutoComplete field.  It also provides a list of the nodes that match
  the search string so that AutoComplete and D3 can display them.  (D3
  doesn't actually process the SEARCH state change.  Instead it's processed
  by nc-logic in response to SOURCE_SEARCH calls -- nc-logic
  will set the node's `selected` or `stroke-color` state if a node
  is currently selected or matches a search parameter, respectively.)

  Set by      AutoComplete's call to SOURCE_SEARCH when its input changes.
  Handled by  AutoComplete for its controlled input field
              NodeSelector for validating when editing the form.

  * searchLabel     A string that the user has typed into AutoComplete
  * suggestedNodes  An array of nodes that match the searchLabel



  ACTIVEAUTOCOMPLETE

  The ACTIVEAUTOCOMPLETE state points to the id of the AutoComplete
  field (either search, or NodeSElector, or EdgeEditor) that has the
  current focus.  Search results and d3 clicks are routed to the
  active AutComplete component.

  Set by      Search's call to AUTOCOMPLETE_SELECT on startup
              NodeSelector's call to AUTOCOMPLETE_SELECT when Edit Node is clicked
              " when changes are submitted
              EdgeEditor's call to AUTOCOMPLETE_SELECT when a new Edge is created
              " an edge is selected externally for editing
              " an edge being editted is closed (hand back to search)
              " changes are submitted

  Handled by  AutoComplete to enable/disable its mode active state,
              know when and when not to handle SEARCH and SELECTION state updates.

  Looked up   NodeSelector to check if it's the current activeAutoCompleteId

  * activeAutoCompleteId
              id of active <AutoComplete> field
              of form: 'node-xx' or 'edge-source-xx' or 'edge-target-xx'
              where xx = the id of the <AutoComplete> field that has input focus.
              This is used to keep track of the currently active
              AutoComplete field. Inactive fields and updates are determined by
              the value of this property.


  NCDATA

  NCDATA is the core pristine network data of nodes and edges. It is read
  directly from the database, or, when importing data, data is imported
  into NCDATA.  It is an object consisting of two arrays:
    `NCDATA = { nodes: [], edges: [] }`
  See https://whimsical.com/network-data-flow-63qtRETqrfDVfp7EchUdzp
  NCDATA is maintained as a application-wide AppState, though some modules
  may keep a local copy.  (This needs to be reviewed and revised).
  It includes:
  * nodes: all nodes (not all may be actually changed)
  * edges: all edges (not all may be actually changed)


  FILTEREDNCDATA

  FILTEREDNCDATA is the processed network data. It is derived from NCDATA.
  It represents a subset of NCDATA with filtered items tagged (for highlight)
  or removed. d3 will alter FILTEREDNCDATA, replacing edge source/targets
  ids with node objects.
  FILTEREDNCDATA is updated whenever NCDATA is updated.

  There are three key differences between NCDATA and FILTEREDNCDATA:
  1. edge.source and edge.target in NCDATA refer to node ids
      whereas in FILTEREDNCDATA, edge.source and edge.target are node objects
  2. Only FILTEREDNCDATA is passed to d3.  d3 never directly touches NCDATA.
  3. FILTEREDNCDATA is directly derived from NCDATA, and can contain a subset
      of the nodes or edges of NCDATA. In contrast, NCDATA contains ALL nodes
      and edges.  When a filter is set, FILTEREDNCDATA is updated from
      NCDATA, with nodes and edges removed or marked according to the filter.

\*\ - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -/*/
var NCDATA = null; // see above for description
var TEMPLATE = null; // template definition for prompts

/// DB LOADER HELPERS /////////////////////////////////////////////////////////
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/** Used by LOADASSETS and RELOAD_DB to reload NCDATA from the database.
 */
function m_PromiseLoadDB() {
  return DATASTORE.PromiseD3Data().then(function (data) {
    if (DBG) console.log(PR, 'DATASTORE returned data', data);
    m_MigrateData(data.d3data);
    UTILS.RecalculateAllEdgeSizes(data.d3data);
    UTILS.RecalculateAllNodeDegrees(data.d3data);
    UDATA.SetAppState('NCDATA', data.d3data);
    UDATA.SetAppState('TEMPLATE', data.template);
    UDATA.LocalCall('LOAD_COMMENT_DATACORE', data);
    // Save off local reference because we don't have NCDATA AppStateChange handler
    NCDATA = data.d3data;
    TEMPLATE = data.template;
  });
}

/// UNISYS LIFECYCLE HOOKS ////////////////////////////////////////////////////
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/** LOADASSETS fires before react components are loaded
    see client-lifecycle.js for description
 */
MOD.Hook('LOADASSETS', function () {
  if (UNISYS.IsStandaloneMode()) {
    // STANDALONE MODE
    // Load read-only database from exported db file.

    var USE_CACHE = false;
    if (USE_CACHE) {
      console.warn(PR, "STANDALONE MODE: 'LOADASSETS' using browser cache");
      return new Promise(function (resolve, reject) {
        var lstore = window.localStorage;
        var ld3 = lstore.getItem('NCDATA');
        NCDATA = JSON.parse(ld3);
        if (!NCDATA) reject(Error("couldn't get NCDATA from Local Store"));
        UDATA.SetAppState('NCDATA', NCDATA);
        var tem = lstore.getItem('TEMPLATE');
        TEMPLATE = JSON.parse(tem);
        console.log(NCDATA, TEMPLATE);
        if (!TEMPLATE) reject(Error("couldn't get TEMPLATE from Local Store"));
        UDATA.SetAppState('TEMPLATE', TEMPLATE);
        console.warn('USE_CACHE does not support Comments!'); // See non cached version with LOAD_COMMENT_DATACORE
        resolve();
      });
    }
    // don't use cache, but instead try loading standalone files
    console.warn(PR, "STANDALONE MODE: 'LOADASSETS' is using files (USE_CACHE=false)");
    // added by Joshua to check for alternative datasets in the folder
    var urlParams = new URLSearchParams(window.location.search);
    var dataset = urlParams.get('dataset');
    if (dataset === null) dataset = 'standalone';
    return new Promise(function (resolve) {
      _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
        var p1, p2;
        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _context.next = 2;
                return DATASTORE.PromiseJSONFile('data/' + dataset + '-db.json').then(function (d3data) {
                  m_MigrateData(d3data);
                  UTILS.RecalculateAllEdgeSizes(d3data);
                  UTILS.RecalculateAllNodeDegrees(d3data);
                  UDATA.SetAppState('NCDATA', d3data);
                  // Save off local reference because we don't have NCDATA AppStateChange handler
                  NCDATA = d3data;
                  // Load Comment Data
                  UDATA.LocalCall('LOAD_COMMENT_DATACORE', d3data);
                });

              case 2:
                p1 = _context.sent;
                _context.next = 5;
                return DATASTORE.PromiseTOMLFile('data/' + dataset + '.template.toml').then(function (data) {
                  TEMPLATE = data;
                  UDATA.SetAppState('TEMPLATE', TEMPLATE);
                });

              case 5:
                p2 = _context.sent;

                resolve();

              case 7:
              case 'end':
                return _context.stop();
            }
          }
        }, _callee, undefined);
      }))();
    });
  }
  return Promise.all([m_PromiseLoadDB()]);
}); // loadassets

/// UNISYS LIFECYCLE HOOKS ////////////////////////////////////////////////////
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/** CONFIGURE fires after LOADASSETS, so this is a good place to put TEMPLATE
 *  validation.
 */
MOD.Hook('CONFIGURE', function () {
  // Process Node, NodeColorMap and Edge options
  m_UpdateColorMap();
}); // end CONFIGURE HOOK

/// UNISYS LIFECYCLE HOOKS ////////////////////////////////////////////////////
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/** DISCONNECT fires when NetMessage.GlobalOfflineMode()
 */
MOD.Hook('DISCONNECT', function () {
  console.log('DISCONNECT HOOK');
  var lstore = window.localStorage;
  lstore.setItem('NCDATA', JSON.stringify(NCDATA));
  lstore.setItem('TEMPLATE', JSON.stringify(TEMPLATE));
  console.log('saving d3data, template to localstore');
});

/// UNISYS HANDLERS ///////////////////////////////////////////////////////////
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/** lifecycle INITIALIZE handler
 */
MOD.Hook('INITIALIZE', function () {
  /// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - inside hook
  UDATA.OnAppStateChange('SESSION', function (session) {
    var userId = session.userId;
    // Push updates to sub modules

    CMTMGR.SetCurrentUserId(userId);
  });
  /// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - inside hook
  /** RELOAD_DB
   *  Called by importexport-mgr.js.MOD.Import:818
   *  During import, DB_MERGE will be called to merge the import data
   *  into the DB.  Then it will call RELOAD_DB to re-read the updated
   *  NCDATA from the database.  This is necessary because new ids will
   *  have been generated during the merge.
   */
  UDATA.HandleMessage('RELOAD_DB', function () {
    return Promise.all([m_PromiseLoadDB()]);
  });
  /// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - inside hook
  /// NCDATA
  UDATA.OnAppStateChange('NCDATA', function (stateChange) {
    if (DBG) console.log('nc-logic: Got NCDATA', stateChange);
    NCDATA = stateChange;
  });
  /// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - inside hook
  /** Handle D3-related updates based on state changes. Subcomponents are
   *  responsible for updating themselves.
   */
  UDATA.OnAppStateChange('SELECTION', function (stateChange) {
    if (DBG) console.log('nc-logic: Got SELECTION', stateChange);
    var nodes = stateChange.nodes,
        edges = stateChange.edges;
    // NODE LIST UPDATE

    if (nodes !== undefined) {
      if (nodes.length > 0) {
        var color = '#0000DD';
        nodes.forEach(function (node) {
          UNISYS.Log('select node', node.id, node.label);
          var googlea = NC_CONFIG.googlea;

          if (googlea != '0') {
            ga('send', {
              hitType: 'event',
              eventCategory: 'Node',
              eventAction: '' + node.label,
              eventLabel: '' + window.location
            });
          }
        });
      }
    }
  }); // StateChange SELECTION
  /// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - inside hook
  /// Search field has been updated
  UDATA.OnAppStateChange('SEARCH', function (stateChange) {
    if (DBG) console.log('nc-logic: Got SEARCH', stateChange);
    var nodes = stateChange.nodes,
        edges = stateChange.edges;
    var searchLabel = stateChange.searchLabel;
    var activeAutoCompleteId = stateChange.activeAutoCompleteId;
    // SEARCH LABEL UPDATE

    if (NCDATA.nodes.length < 150) {
      // JD to speedup processing for large sets
      if (searchLabel === '') {
        m_UnStrokeAllNodes();
      } else if (searchLabel !== undefined) {
        m_SetStrokeColorThatMatch(searchLabel, TEMPLATE.searchColor || DEFAULT_SEARCH_COLOR);
      }
    }
  }); // StateChange SELECTION

  /// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - inside hook
  /** User has clicked on a suggestion from the AutoComplete suggestion list.
   *  The source node should be loaded in NodeSelector.
   *
   *  OR, user has clicked on a node in the D3 graph.
   *  SOURCE_SELECT select node by LABEL. There is only one selected node
   *  in the app at any one time, though nodeLabels is passed as an array.
   *  SEE ALSO: AutoComplete.onSuggestionSelected() and
   *  D3SimpleNetGraph._UpdateGraph click handler
   */
  UDATA.HandleMessage('SOURCE_SELECT', m_sourceSelect);
  function m_sourceSelect(data) {
    if (DBG) console.log(PR, 'SOURCE_SELECT got data', data);

    var _data$nodeLabels = data.nodeLabels,
        nodeLabels = _data$nodeLabels === undefined ? [] : _data$nodeLabels,
        _data$nodeIDs = data.nodeIDs,
        nodeIDs = _data$nodeIDs === undefined ? [] : _data$nodeIDs;

    var nodeLabel = nodeLabels.shift();
    var nodeID = nodeIDs.shift();
    var node = void 0,
        newSelection = void 0,
        newHilite = void 0;

    if (nodeID) {
      node = m_FindNodeById(nodeID); // Node IDs should be integers, not strings
      if (DBG) console.log(PR, 'SOURCE_SELECT found by nodeID', nodeID, 'node:', node);
    } else if (nodeLabel) {
      node = m_FindMatchingNodesByLabel(nodeLabel).shift();
      if (DBG) console.log(PR, 'SOURCE_SELECT found by nodeLabel', nodeLabel, 'node:', node);
    } else {
      // No node selected, so deselect
      if (DBG) console.log(PR, 'SOURCE_SELECT found no node', node);
    }

    if (DBG) console.log(PR, 'SOURCE_SELECT found', node);

    if (node === undefined) {
      // Node not found, create a new state
      newSelection = {
        nodes: [],
        edges: []
      };
      newHilite = {
        autosuggestHiliteNodeId: undefined
      };
    } else {
      // Load existing node and edges
      var edges = [];
      if (NCDATA.edges) {
        // if no edges are defined, skip, otherwise chokes on NCDATA.edges.filter
        if (nodeID) {
          edges = edges.concat(NCDATA.edges.filter(function (edge) {
            return edge.source === nodeID || edge.target === nodeID;
          }));
        } else {
          console.error(PR, 'SOURCE_SELECT trying to match edge using "label" ' + nodeLabel + '.  This is deprecated!');
          // REVIEW: are we actually matching label anymore?
          // This should fail because source/target is no longer an object, just an id
          // edges = edges.concat(
          //   NCDATA.edges.filter(
          //     edge => edge.source.label === nodeLabel || edge.target.label === nodeLabel
          //   )
          // );
        }
      }
      // create state change object
      newSelection = {
        nodes: [node],
        edges: edges
      };
      newHilite = {
        autosuggestHiliteNodeId: undefined
      };
    }

    // Set the SELECTION state so that listeners such as NodeSelectors update themselves
    UDATA.SetAppState('SELECTION', newSelection);
    UDATA.SetAppState('HILITE', newHilite);
  }

  /// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - inside hook
  /** SOURCE_SEARCH sets the current matching term as entered in an
   *  AutoComplete field.
   */
  UDATA.HandleMessage('SOURCE_SEARCH', function (data) {
    var searchString = data.searchString;

    var matches = m_FindMatchingNodesByLabel(searchString);
    var newState = {
      suggestedNodes: matches.map(function (n) {
        return { id: n.id, label: n.label };
      }),
      searchLabel: searchString
    };
    // let SELECTION state listeners handle display updates
    UDATA.SetAppState('SEARCH', newState);
  });

  /// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - inside hook
  /** SOURCE_SEARCH_AND_SELECT first searches for an exact matching node
   *  and if found, selects it.
   *  This is called by AutoComplete onBlur in case we need to make an
   *  implicit selection.
   */
  UDATA.HandleMessage('SOURCE_SEARCH_AND_SELECT', function (data) {
    var searchString = data.searchString;

    var node = m_FindMatchingNodesByLabel(searchString).shift();
    if (node && node.label === searchString) {
      console.log(PR, 'SOURCE_SEARCH_AND_SELECT about to trigger SOURCE_SELECT data was', data);
      m_sourceSelect({ nodeIDs: [node.id] });
    }
  });

  /// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - inside hook
  /** SOURCE_UPDATE is called when the properties of a node has changed
   *  Globally updates DATASTORE and working NCDATA objects with the new node data.
   *  NOTE: SOURCE_UPDATE can be invoked remotely by the server on a DATABASE
   *  update.
   */
  UDATA.HandleMessage('SOURCE_UPDATE', function (data) {
    var node = data.node;
    // REVIEW: NodeSelector should probably not be submitting data
    //         directly to the database.  Instead, it should be notifying
    //         nc-logic and we handle the degree insertion and db call.
    // if degrees has not already been set (e.g. this is a new node), default to 0

    node.degrees = node.degrees || 0;
    // try updating existing nodes with this id?
    var updatedNodes = m_SetMatchingNodesByProp({ id: node.id }, node);
    if (DBG) console.log('SOURCE_UPDATE: updated', updatedNodes);
    if (updatedNodes.length > 1) {
      // if more than one matched, then there are duplicate ids
      throw Error('SOURCE_UPDATE: found duplicate IDs');
    } else if (updatedNodes.length === 1) {
      // if one matched, update NCDATA with the refreshed node from the db
      var index = NCDATA.nodes.findIndex(function (n) {
        return n.id === node.id;
      });
      NCDATA.nodes.splice(index, 1, node);
    } else if (updatedNodes.length === 0) {
      // if no nodes had matched, then add a new node!
      NCDATA.nodes.push(node);
    }
    UDATA.SetAppState('NCDATA', NCDATA);
  });
  /// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - inside hook
  UDATA.HandleMessage('NODE_CREATE', function (data) {
    // provenance
    var session = UDATA.AppState('SESSION');
    var timestamp = new Date().toLocaleString('en-US');
    var provenance = [];
    var createdBy = MOD.GetCurrentUserId();
    var updatedBy = createdBy;

    return DATASTORE.PromiseNewNodeID().then(function (newNodeID) {
      var node = {
        id: newNodeID,
        label: data.label,
        provenance: provenance,
        createdBy: createdBy,
        updatedBy: updatedBy
      };
      return UDATA.LocalCall('DB_UPDATE', { node: node }).then(function () {
        NCDATA.nodes.push(node);
        UDATA.SetAppState('NCDATA', NCDATA);
        return node;
      });
    });
  });
  /// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - inside hook
  /** NODE_DELETE is called by NodeSelector via datastore.js and
   *  Server.js when an node should be removed
   */
  UDATA.HandleMessage('NODE_DELETE', function (data) {
    var nodeID = data.nodeID,
        replacementNodeID = data.replacementNodeID;

    // Remove or replace edges

    var edgesToProcess = void 0;
    if (replacementNodeID !== -1) {
      // replace source/target with replacement node ID
      var replacementNode = m_FindNodeById(replacementNodeID);
      edgesToProcess = NCDATA.edges.map(function (edge) {
        if (edge.source === nodeID) edge.source = replacementNodeID;
        if (edge.target === nodeID) edge.target = replacementNodeID;
        return edge;
      });
    } else {
      // delete edges
      edgesToProcess = NCDATA.edges.filter(function (edge) {
        var pass = false;
        if (edge.source !== nodeID && edge.target !== nodeID) {
          pass = true;
        } else {
          // filter out AND also remove comments
          var _cref = CMTMGR.GetEdgeCREF(edge.id);
          CMTMGR.RemoveAllCommentsForCref(_cref);
        }
        return pass;
      });
    }
    NCDATA.edges = edgesToProcess;

    // Remove Comments
    var cref = CMTMGR.GetNodeCREF(nodeID);
    CMTMGR.RemoveAllCommentsForCref(cref);

    // Remove node
    var updatedNodes = m_DeleteMatchingNodesByProp({ id: nodeID });
    NCDATA.nodes = updatedNodes;
    UDATA.SetAppState('NCDATA', NCDATA);

    // Also update selection so nodes in EdgeEditor will update
    UDATA.SetAppState('SELECTION', {
      nodes: undefined,
      edges: undefined
    });
    // FIXME: need to also update AutoUpdate!!!
    // FIXME: Need to also trigger resize!
  });
  /// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - inside hook
  /** NODE_TYPES_UPDATE is called by template-editor-mgr after user has changed the
   *  node type options.  This maps changed options to a new name,
   *  and deleted type options to existing options.
   *  This updates:
   *  - The template file with new new node types
   *  - NCDATA and the databse file with node type changes
   *
   *  @param {object} data
   *  @param {object} data.nodeTypesChanges - { label, color, replacement, delete }
   *  @param {string} data.nodeTypesChanges.label - orig label, used for matching to current node setting
   *  @param {string} data.nodeTypesChanges.color
   *  @param {string} data.nodeTypesChanges.replacement - text to replace label
   *  @param {boolean} data.nodeTypesChanges.delete - option should be removed after mapping
   */
  UDATA.HandleMessage('NODE_TYPES_UPDATE', function (data) {
    var nodeTypesChanges = data.nodeTypesChanges;

    var changeMap = new Map();
    nodeTypesChanges.forEach(function (c) {
      changeMap.set(c.label, c);
    });
    NCDATA.nodes = NCDATA.nodes.map(function (n) {
      var type = n.type;
      var change = changeMap.get(n.type);
      if (change && change.replacement) {
        n.type = change.replacement;
      }
      return n;
    });
    // DEPRECATED
    // As of 3/2022 edge source and target use ids, so there's no longer
    // a need to convert them.
    // // Convert D3 source/target nodes objects into ids
    // NCDATA.edges = m_ConvertSourceTarget2ID(NCDATA.edges);

    // Write to database!
    // IMPORTANT: We have to update the db BEFORE calling SetAppState
    // because SetAppseState will cause d3 to convert edge source/targets
    // from ids back to node objects.
    UDATA.LocalCall('DBUPDATE_ALL', NCDATA);
    UDATA.SetAppState('NCDATA', NCDATA);
  });
  /// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - inside hook
  UDATA.HandleMessage('FIND_NODE_BY_PROP', function (data) {
    var searchParameters = {};
    searchParameters[data.key] = data.searchString;
    return { nodes: m_FindMatchingNodeByProp(searchParameters) };
  });
  /// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - inside hook
  UDATA.HandleMessage('FIND_MATCHING_NODES', function (data) {
    return { nodes: m_FindMatchingNodesByLabel(data.searchString) };
  });
  /// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - inside hook
  /** When creating a new edge, we first
   *  1. Add a bare bones edge object with a new ID to the local state.edges
   *  2. Pass it to render, so that a new EdgeEditor will be created.
   *  3. In EdgeEditor, we create a dummy edge object
   *  @param {Object} data
   *  @param {string} data.nodeId
   */
  UDATA.HandleMessage('EDGE_CREATE', function (data) {
    // provenance
    var session = UDATA.AppState('SESSION');
    var timestamp = new Date().toLocaleString('en-US');
    var provenance = [];
    var createdBy = MOD.GetCurrentUserId();
    var updatedBy = createdBy;

    // weight -- weight is a built in property, so always record it even it is not displayed
    TEMPLATE = UDATA.AppState('TEMPLATE');
    var DEFAULT_EDGE_WEIGHT = 1; // default to 1 in case `weight` is not defined in the template
    var weight = TEMPLATE.edgeDefs['weight'] && TEMPLATE.edgeDefs['weight'].defaultValue ? TEMPLATE.edgeDefs['weight'].defaultValue : DEFAULT_EDGE_WEIGHT;

    // call server to retrieve an unused edge ID
    return DATASTORE.PromiseNewEdgeID().then(function (newEdgeID) {
      // Add it to local state for now
      var edge = {
        id: newEdgeID,
        source: data.nodeId,
        target: undefined,
        attributes: {},
        provenance: provenance,
        weight: weight,
        createdBy: createdBy,
        updatedBy: updatedBy
      };
      return UDATA.LocalCall('DB_UPDATE', { edge: edge }).then(function () {
        console.log('...DB_UPDATE node is now', edge);
        NCDATA.edges.push(edge);
        UDATA.SetAppState('NCDATA', NCDATA);
        return edge;
      });
    });
  });
  /// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - inside hook
  /** EDGE_TYPES_UPDATE is called by template-editor-mgr after user has changed the
   *  edge type options.  This maps changed options to a new name,
   *  and deleted type options to existing options.
   *  This updates:
   *  - The template file with new new edge types
   *  - NCDATA and the databse file with edge type changes
   *
   *  @param {object} data
   *  @param {object} data.nodeTypesChanges - { label, color, replacement, delete }
   *  @param {string} data.nodeTypesChanges.label - orig label, used for matching to current edge setting
   *  @param {string} data.nodeTypesChanges.color
   *  @param {string} data.nodeTypesChanges.replacement - text to replace label
   *  @param {boolean} data.nodeTypesChanges.delete - option should be removed after mapping
   */
  UDATA.HandleMessage('EDGE_TYPES_UPDATE', function (data) {
    var edgeTypesChanges = data.edgeTypesChanges;

    var changeMap = new Map();
    edgeTypesChanges.forEach(function (c) {
      changeMap.set(c.label, c);
    });
    NCDATA.edges = NCDATA.edges.map(function (e) {
      var type = e.type;
      var change = changeMap.get(e.type);
      if (change && change.replacement) {
        console.log('replacing', e.type, 'with', change.replacement);
        e.type = change.replacement;
      }
      return e;
    });
    // Write to database!
    // IMPORTANT: We have to update the db BEFORE calling SetAppState
    // because SetAppState will cause d3 to convert edge source/targets
    // from ids back to node objects.
    UDATA.LocalCall('DBUPDATE_ALL', NCDATA);
    UDATA.SetAppState('NCDATA', NCDATA);
  });
  /// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - inside hook
  /** EDGE_UPDATE is called when the properties of an edge has changed
   *  NOTE: SOURCE_UPDATE can be invoked remotely by the server on a DATABASE
   *  update.
   */
  UDATA.HandleMessage('EDGE_UPDATE', function (data) {
    var edge = data.edge;

    if (DBG) console.log('nc-logic.EDGE_UPDATE: received edge', edge);
    // set matching edges
    var updatedEdges = m_SetMatchingEdgesByProp({ id: edge.id }, edge);
    if (DBG) console.log('nc-logic.EDGE_UPDATE: updated', updatedEdges);

    if (updatedEdges.length === 0) {
      // if no edges had matched, then add a new edge!
      if (DBG) console.log('nc-logic.EDGE_UPDATE: adding new edge', edge);
      // created edges should have a default size
      edge.size = 1;
      NCDATA.edges.push(edge);
    } else if (updatedEdges.length === 1) {
      // if there was one edge, update it
      var index = NCDATA.edges.findIndex(function (e) {
        return e.id === edge.id;
      });
      NCDATA.edges.splice(index, 1, edge);
      if (DBG) console.log('nc-logic.EDGE_UPDATE: updating existing edge', updatedEdges);
    } else if (updatedEdges.length > 1) {
      // if there were more edges than expected
      throw Error('EdgeUpdate found duplicate IDs');
    }

    UTILS.RecalculateAllEdgeSizes(NCDATA);
    UTILS.RecalculateAllNodeDegrees(NCDATA);
    UDATA.SetAppState('NCDATA', NCDATA);
  });
  /// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - inside hook
  /** EDGE_DELETE is called when an edge should be removed from...something?
   */
  UDATA.HandleMessage('EDGE_DELETE', function (data) {
    var edgeID = data.edgeID;

    var edges = [];
    // remove specified edge from edge list
    NCDATA.edges = m_DeleteMatchingEdgeByProp({ id: edgeID });
    UTILS.RecalculateAllEdgeSizes(NCDATA);
    UTILS.RecalculateAllNodeDegrees(NCDATA);
    UDATA.SetAppState('NCDATA', NCDATA);
    // Also update selection so edges in EdgeEditor will update
    var selection = UDATA.AppState('SELECTION');
    if (selection.nodes === undefined || selection.nodes.length < 1 || selection.nodes[0].id === undefined) {
      if (DBG) console.log(PR, 'no selection:', selection);
    } else {
      if (DBG) console.log(PR, 'updating selection:', selection);
      var nodeID = selection.nodes[0].id;
      // Remove the deleted edge from the selection
      if (selection.edges !== undefined && selection.edges.length > 0) {
        edges = edges.concat(selection.edges.filter(function (edge) {
          return edge.id !== edgeID;
        }));
      }
    }
    UDATA.SetAppState('SELECTION', {
      nodes: selection.nodes,
      edges: edges
    });
  });
  /// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - inside hook
  /** AUTOCOMPLETE_SELECT is called by <AutoComplete> components to tell the
   *  module which one has the current focus.
   */
  UDATA.HandleMessage('AUTOCOMPLETE_SELECT', function (data) {
    m_HandleAutoCompleteSelect(data);
  });
  /// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - inside hook
  /** TEMPLATE has been edited
   *  This message is sent from server.js over the net.
   *  This is the main handler for the local app.  It updates the appState.
   */
  UDATA.HandleMessage('NET_TEMPLATE_UPDATE', function (stateChange) {
    if (DBG) console.log(PR, 'NET_TEMPLATE_UPDATE state change', stateChange);
    TEMPLATE = stateChange;
    UDATA.SetAppState('TEMPLATE', TEMPLATE);
    m_UpdateColorMap();
  });
  /// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  UDATA.HandleMessage('EDIT_CURRENT_TEMPLATE', function () {
    return { template: TEMPLATE };
  });
}); // end UNISYS_INIT

/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/** INIT HANDLERS
 */
function m_HandleAutoCompleteSelect(data) {
  if (DBG) console.log('ACL: Setting activeAutoCompleteId to', data.id);
  UDATA.SetAppState('ACTIVEAUTOCOMPLETE', {
    activeAutoCompleteId: data.id
  });
}

/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/** lifecycle RESET handler
 */
MOD.Hook('RESET', function () {
  // Force an AppState update here so that the react components will load
  // the data after they've been initialized.  The SetAppState call in
  // LOADASSETS is broadcast before react components have been loaded.
  UDATA.SetAppState('NCDATA', NCDATA);
}); // end UNISYS_RESET

/// APP_READY MESSAGE REGISTRATION ////////////////////////////////////////////
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/** The APP_READY hook is fired after all initialization phases have finished
 *  and may also fire at other times with a valid info packet
 */
MOD.Hook('APP_READY', function (info) {
  /// RETURN PROMISE to prevent phase from continuing until after registration
  /// of messages is successful
  return new Promise(function (resolve, reject) {
    if (DBG) console.log(PR + 'HOOK \'UNISYS_INIT\' Registering Message Handlers...');
    // timeout for broken network registration
    var timeout = setTimeout(function () {
      reject(new Error('UNISYS REGISTER TIMEOUT'));
    }, 5000);

    // register ONLY messages we want to make public
    UNISYS.RegisterMessagesPromise(['SOURCE_UPDATE', 'NODE_DELETE', 'EDGE_UPDATE', 'EDGE_DELETE', 'COMMENT_UPDATE', 'COMMENTS_UPDATE', 'READBY_UPDATE', 'EDIT_PERMISSIONS_UPDATE', 'NET_TEMPLATE_UPDATE']).then(function (d) {
      clearTimeout(timeout);
      if (DBG) console.log(PR + 'HOOK \'UNISYS_INIT\' Registered Message Handlers ' + JSON.stringify(d.registered));
      if (DBG) console.log('INFO: %cMy socket address is ' + UNISYS.SocketUADDR(), 'color:blue;font-weight:bold');
      resolve();
    });
  });
}); // end UNISYS_READY

/// GLOBAL HELPERS ////////////////////////////////////////////////////////////
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

MOD.GetCurrentUserId = function () {
  // always get the current session value because it might change at any time
  var session = UDATA.AppState('SESSION');
  var userId = session.userId;

  return userId;
};

/// OBJECT HELPERS ////////////////////////////////////////////////////////////
/// these probably should go into a utility class
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/** Return array of objects that match the match_me object keys/values
 *  NOTE: make sure that strings are compared with strings, etc
 */
function m_FindMatchingObjsByProp(obj_list) {
  var match_me = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

  // operate on arrays only
  if (!Array.isArray(obj_list)) throw Error('FindMatchingObjectsByProp arg1 must be array');
  var matches = obj_list.filter(function (obj) {
    var pass = true;
    for (var key in match_me) {
      if (match_me[key] !== obj[key]) pass = false;
      break;
    }
    return pass;
  });
  // return array of matches (can be empty array)
  return matches;
}
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/** Set array of objects that match to key/values of yes/no respectively
 *  Returns array of matched objects
 */
function m_SetMatchingObjsByProp(obj_list) {
  var match_me = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  var yes = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
  var no = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};

  // operate on arrays only
  if (!Array.isArray(obj_list)) throw Error('SetMatchingObjsByPropp arg1 must be array');

  var returnMatches = [];
  obj_list.forEach(function (node) {
    var matched = true;
    for (var key in match_me) {
      if (match_me[key] !== node[key]) matched = false;
      break;
    }
    if (matched) {
      for (var _key in yes) {
        node[_key] = yes[_key];
      }returnMatches.push(node);
    } else {
      for (var _key2 in no) {
        node[_key2] = no[_key2];
      }
    }
  });
  return returnMatches;
}
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/** Update props of everything in obj_list
 */
function m_SetAllObjs(obj_list) {
  var all = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

  // operate on arrays only
  if (!Array.isArray(obj_list)) throw Error('SetAllNodes arg1 must be array');
  obj_list.forEach(function (obj) {
    for (var key in all) {
      obj[key] = all[key];
    }
  });
}
MOD.SetAllObjs = m_SetAllObjs; // Expose for filter-mgr.js

/// NODE HELPERS //////////////////////////////////////////////////////////////
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/** Update ColorMap
 */
function m_UpdateColorMap() {
  // REVIEW: Load ColorMap in d3?  or elsewhere?  does it need its own state?
  // Joshua added Edges in here ... it should either be renamed or kept separate
  // but this was a proof of concept. Probably they should be kept separate in case
  // someone ever chooses to use the same label twice, but ...
  try {
    var nodeColorMap = {};
    if (TEMPLATE.nodeDefs.type && TEMPLATE.nodeDefs.type.options) {
      TEMPLATE.nodeDefs.type.options.forEach(function (o) {
        nodeColorMap[o.label] = o.color;
      });
    }

    var edgeColorMap = {};
    var defaultEdgeColor = TEMPLATE.edgeDefs.color || '#999'; //for backwards compatability
    if (TEMPLATE.edgeDefs.type && TEMPLATE.edgeDefs.type.options) {
      TEMPLATE.edgeDefs.type.options.forEach(function (o) {
        edgeColorMap[o.label] = o.color || defaultEdgeColor;
      });
    }

    UDATA.SetAppState('COLORMAP', { nodeColorMap: nodeColorMap, edgeColorMap: edgeColorMap });
  } catch (error) {
    console.error(PR, 'received bad TEMPLATE node options.  ERROR:', error, '. DATA:', TEMPLATE);
  }
}
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/** Return array of nodes that DON'T match del_me object keys/values
 */
function m_DeleteMatchingNodesByProp() {
  var del_me = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  var matches = NCDATA.nodes.filter(function (node) {
    var pass = false;
    for (var key in del_me) {
      if (del_me[key] !== node[key]) {
        pass = true;
        break;
      }
    }
    return pass;
  });
  // return array of matches (can be empty array)
  return matches;
}
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/** Return array of nodes that match the match_me object keys/values
 *  NOTE: make sure that strings are compared with strings, etc
 */
function m_FindMatchingNodeByProp() {
  var match_me = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  return m_FindMatchingObjsByProp(NCDATA.nodes, match_me);
}
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/** Convenience function to retrieve node by ID
 */function m_FindNodeById(id) {
  return m_FindMatchingNodeByProp({ id: id })[0];
}
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/** Return array of nodes with labels that partially match str
 */
MOD.FindMatchingNodesByLabel = function (label) {
  return m_FindMatchingNodesByLabel(label);
};
function m_FindMatchingNodesByLabel() {
  var str = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';

  if (!str) return [];
  // Normalize and remove diacritics from input
  str = UTILS.RemoveDiacriticMarks(str);
  str = u_EscapeRegexChars(str.trim());
  if (str === '') return [];
  var regex = new RegExp( /*'^'+*/str, 'i');
  return NCDATA.nodes.filter(function (node) {
    // Normalize and remove diacritics from node label
    var label = UTILS.RemoveDiacriticMarks(node.label);
    return regex.test(label);
  });
}
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/** Set nodes that PARTIALLY match 'str' to 'yes' props.
 *  All others nodes are set to 'no' props. Return matches
 *  Optionally resets all the NON matching nodes as well
 */
function m_SetMatchingNodesByLabel() {
  var str = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';
  var yes = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  var no = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

  var returnMatches = [];

  // Escape special regex characters in the search string and remove diacritics
  str = RemoveDiacriticMarks(str.trim());
  str = u_EscapeRegexChars(str); // Escape special regex characters

  if (str === '') return undefined;
  var regex = new RegExp( /*'^'+*/str, 'i');
  NCDATA.nodes.forEach(function (node) {
    if (regex.test(node.label)) {
      for (var key in yes) {
        node[key] = yes[key];
      }returnMatches.push(node);
    } else {
      for (var _key3 in no) {
        node[_key3] = no[_key3];
      }
    }
  });
  return returnMatches;
}
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/** Update props of exact matching nodes, returns matches
 *  Optionally resets all the NON matching nodes as well
 */
function m_SetMatchingNodesByProp() {
  var match_me = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var yes = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  var no = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

  return m_SetMatchingObjsByProp(NCDATA.nodes, match_me, yes, no);
}

/// EDGE HELPERS //////////////////////////////////////////////////////////////
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/** Return array of edges that DON'T match del_me object keys/values
 */
function m_DeleteMatchingEdgeByProp() {
  var del_me = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  var matches = NCDATA.edges.filter(function (edge) {
    var pass = false;
    for (var key in del_me) {
      if (del_me[key] !== edge[key]) {
        pass = true;
        break;
      }
    }
    if (!pass) {
      // filter out AND also remove comments
      var cref = CMTMGR.GetEdgeCREF(edge.id);
      CMTMGR.RemoveAllCommentsForCref(cref);
    }
    return pass;
  });
  // return array of matches (can be empty array)
  return matches;
}
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/** Update props of exact matching edges, returns matches
 */
function m_SetMatchingEdgesByProp() {
  var match_me = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var yes = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  var no = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

  return m_SetMatchingObjsByProp(NCDATA.edges, match_me, yes, no);
}

/// UTILITIES /////////////////////////////////////////////////////////////////
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/** REGEX: the chars in brackets are part of matching character set.
 *  Declaring this as a constant makes the RegEx run faster (I think).
 */
var REGEX_REGEXCHARS = /[.*+?^${}()|[\]\\]/g;
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/** Adds a \ in front of characters that have special RegEx meaning
 *  From https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expression
 */
function u_EscapeRegexChars(string) {
  return string.replace(REGEX_REGEXCHARS, '\\$&'); // $& means the whole matched string
}
MOD.EscapeRegexChars = u_EscapeRegexChars; // Expose for filter-mgr.js
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/** Migrate Data from older formats
 *
 *  1. Convert all IDs to integers
 *      Node and Edge IDs should be integers.
 *      This isn't a problem with newly created datasets as the network-generated IDs
 *      are integers.  However, with older data sets, the IDs may have been strings.
 *      e.g. exports from Gephi will have string IDs.
 *      This mismatch is a problem when looking up nodes by ID.
 *        `data` is passed by reference
 *        This modifies `data`
 *        data = { nodes: [], edges: [] }
 *  2. Convert 'attributes' from pre v1.4 datasets
 *      NODES
 *        attributes.Node_type => type
 *        attributes[Extra Info] => info
 *        attributes.Notes => notes
 *      EDGES
 *        attributes.Relationship => type
 *        attributes.Info => info
 *        attributes.Citations = citation
 *        attributes.Notes => notes
 *  3. Remove the old `attributes` key
 *  4. Clean built-in fields
 */
function m_MigrateData(data) {
  data.nodes.forEach(function (node) {
    node.id = parseInt(node.id);
    if (node.attributes) {
      // don't clobber if value is already set
      node.type = node.type || node.attributes.Node_Type;
      node.info = node.info || node.attributes['Extra Info'];
      node.notes = node.notes || node.attributes.Notes;
      // clear it
      Reflect.deleteProperty(node, 'attributes');
    }
    // clean built-in fields
    // NOTE: This just cleans up the data, but does not SAVE the fix!
    node.meta = node.meta || {};
    node.meta.revision = parseInt(node.meta.revision) || 1;
  });
  data.edges.forEach(function (edge) {
    edge.id = parseInt(edge.id);
    // before D3 processing, edge.source and edge.target are ids
    edge.source = parseInt(edge.source);
    edge.target = parseInt(edge.target);
    if (edge.attributes) {
      // don't clobber if value is already set
      edge.type = edge.type || edge.attributes.Relationship;
      edge.info = edge.info || edge.attributes.Info;
      edge.citation = edge.citation || edge.attributes.Citations;
      edge.notes = edge.notes || edge.attributes.Notes;
      edge.category = edge.category || edge.attributes.Category;
      // clear it
      Reflect.deleteProperty(edge, 'attributes');
    }
    // clean built-in fields
    // NOTE: This just cleans up the data, but does not SAVE the fix!
    edge.meta = edge.meta || {};
    edge.meta.revision = parseInt(edge.meta.revision) || 1;
  });
}
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
// DEPRECATED
// As of 3/2022 edge source and target use ids, so there's no longer
// a need to convert them.
//
// /** Converts edge.source and edge.target from objects to ids
//     d3 converts edge.source and edget.target from ids to node objects
//     when it renders NCDATA.  When getting ready to save edges to the database
//     we need to convert them back to ids.
//  */
// function m_ConvertSourceTarget2ID(edges) {
//   return edges.map(e => {
//     e.source = e.source && e.source.id;
//     e.target = e.target && e.target.id;
//     return e;
//   });
// }

/// NODE MARKING METHODS //////////////////////////////////////////////////////
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/** Visually change all nodes to the deselected color
 */
function m_UnMarkAllNodes() {
  var props = { selected: DESELECTED_COLOR };
  m_SetAllObjs(NCDATA.nodes, props);
  UDATA.SetAppState('NCDATA', NCDATA);
}
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/** Remove the stroke color.  Used to unmark search matches.
 */
function m_UnStrokeAllNodes() {
  var props = { strokeColor: undefined };
  m_SetAllObjs(NCDATA.nodes, props);
  UDATA.SetAppState('NCDATA', NCDATA);
}
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/** Sets matching node labels to the passed selection color
 */
function m_MarkNodesThatMatch(searchString, color) {
  if (searchString === '') {
    m_UnMarkAllNodes();
    return;
  }
  var select = { selected: color };
  var deselect = { selected: DESELECTED_COLOR };
  m_SetMatchingNodesByLabel(searchString, select, deselect);
  UDATA.SetAppState('NCDATA', NCDATA);
}
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/** Sets matching node labels to the passed selection color
 *  This sets the stroke color, which is used to display
 *  the matching nodes during a search.  If the node is
 *  also selected, the selected color will override this color.
 */
function m_SetStrokeColorThatMatch(searchString, color) {
  var matched = { strokeColor: color };
  var notmatched = { strokeColor: undefined };
  m_SetMatchingNodesByLabel(searchString, matched, notmatched);
  UDATA.SetAppState('NCDATA', NCDATA);
}
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/* Sets the 'selected' state of edges that are attached to the node
 */
function m_MarkSelectedEdges(edges, node) {
  // Delesect all edges first
  edges.forEach(function (edge) {
    edge.selected = false;
  });
  // Find connected edges
  var id = node.id;
  NCDATA.edges.forEach(function (edge) {
    if (edge.source === id || edge.target === id) {
      edge.selected = true;
    } else {
      edge.selected = false;
    }
  });
  UDATA.SetAppState('NCDATA', NCDATA);
}

/// COMMAND LINE UTILITIES ////////////////////////////////////////////////////
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/** Command: REGENERATE DEFAULT TEMPLATE
 *  This will regenerate the `_default.template.toml` file from
 *  the current `template-schema.js` spec.  This is only necessary to do
 *  if you've edited the `template.schema.js`` file.
 */
JSCLI.AddFunction(function ncRegenerateDefaultTemplate() {
  UDATA.Call('SRV_TEMPLATE_REGENERATE_DEFAULT');
  console.log('_default.template.toml regenerated from `template-schema.js`');
});
/** Command: RESET THE DATABASE from default data
 */
JSCLI.AddFunction(function ncPushDatabase(jsonFile) {
  jsonFile = jsonFile || 'data.reducedlinks.json';
  DATASTORE.PromiseJSONFile(jsonFile).then(function (data) {
    // data is { nodes, edges }
    console.log(PR, 'Sending data from ' + jsonFile + ' to Server', data);
    // UDATA.Call() returns a promise, so return it to
    // continue the asynchronous chain
    return UDATA.Call('SRV_DBSET', data);
  }).then(function (d) {
    if (d.OK) {
      window.alert('assets/data/' + jsonFile + ' was pushed to Server.\nPress OK to refresh this page and MANUALLY REFRESH other clients.\n\n(note: if data hasn\'t changed, try command again)');
      console.log(PR + ' %cServer Database has been overwritten with ' + jsonFile, 'color:blue');
      console.log(PR + ' Reload apps to see new data');
      setTimeout(UNISYS.IsReloadRequired, 1000);
    } else {
      console.error(PR, 'Server Error', d);
      window.alert('Error ' + JSON.stringify(d));
    }
  });
  // return syntax help
  return 'FYI: ncPushDatabase(jsonFile) can load file in assets/data';
});
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/** Command: EMPTY THE DATABASE from default data
 */
JSCLI.AddFunction(function ncEmptyDatabase() {
  window.ncPushDatabase('_nclogic_resetdb.json');
  return 'FYI: pushing empty database from assets/data/_nclogic_resetdb...reloading';
});
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/** Command: Unlock the database.  Used to recover from error conditions where
 *  a node or edge is inadvertently left locked.
 */
JSCLI.AddFunction(function ncUnlockAll() {
  UDATA.NetCall('SRV_DBUNLOCKALL', {});
  return 'Unlocking all nodes and edges in the database, and enabling template edits.';
});
JSCLI.AddFunction(function ncUnlockAllNodes() {
  UDATA.NetCall('SRV_DBUNLOCKALLNODES', {});
  return 'Unlocking all nodes in the database.';
});
JSCLI.AddFunction(function ncUnlockAllEdges() {
  UDATA.NetCall('SRV_DBUNLOCKALLEDGES', {});
  return 'Unlocking all edges in the database.';
});
JSCLI.AddFunction(function ncNodeColorMap() {
  console.log(UDATA.AppState('COLORMAP'));
  return 'ncNodeColorMap.';
});
JSCLI.AddFunction(function ncDumpData() {
  console.log('NCDATA', NCDATA);
  return 'ncDumpData: ' + JSON.stringify(NCDATA);
});
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/** Command: Token Generator
 */
/// ncMakeSharedTokens is a variant on ncMakeTokens
/// This command skips `dataset` so tokens can be shared across graphs.
/// Use ncMakeSharedTokens instead of ncMakeTokens to create shared tokens
JSCLI.AddFunction(function ncMakeSharedTokens(clsId, projId, numGroups) {
  return ncMakeTokens(clsId, projId, undefined, numGroups);
});
/// `datatset` is not being used but is retained for backwards compatibility
JSCLI.AddFunction(function ncMakeTokens(clsId, projId, dataset, numGroups) {
  // type checking
  if (typeof clsId !== 'string') return 'args: str classId, str projId, str dataset, int numGroups';
  if (typeof projId !== 'string') return 'args: str classId, str projId, str dataset, int numGroups';

  // 2024/08 Make 'dataset' optional so tokens can be shared across graphs
  // `dataset` can still be defined, but it is now optional and does not return an error
  // if (typeof dataset !== 'string')
  //   return 'args: str classId, str projId, str dataset, int numGroups';

  if (clsId.length > 12) return 'classId arg1 should be 12 chars or less';
  if (projId.length > 12) return 'classId arg1 should be 12 chars or less';
  if (!Number.isInteger(numGroups)) return 'numGroups arg3 must be integer';
  if (numGroups < 1) return 'numGroups arg3 must be positive integer';
  // let's do this!
  var out = '\nTOKEN LIST for class \'' + clsId + '\' project \'' + projId + '\'\n\n';
  var pad = String(numGroups).length;
  for (var i = 1; i <= numGroups; i++) {
    var id = String(i);
    id = id.padStart(pad, '0');
    out += 'group ' + id + '\t' + SESSION.MakeToken(clsId, projId, i, dataset) + '\n';
  }
  if (window && window.location) {
    var ubits = new URL(window.location);
    var hash = ubits.hash.split('/')[0];
    var url = ubits.protocol + '//' + ubits.host + '/' + hash;
    out += '\nexample url: ' + SETTINGS.ServerAppURL() + '/edit/' + SESSION.MakeToken(clsId, projId, 1) + '\n';
  }
  console.log(out);
  return '';
});

/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

/// EXPORT CLASS DEFINITION ///////////////////////////////////////////////////
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
module.exports = MOD;
});

require.register("view/netcreate/nc-ui.js", function(exports, require, module) {
'use strict';

var _URDateField = require('./components/URDateField');

var _URDateField2 = _interopRequireDefault(_URDateField);

var _templateMgr = require('./template-mgr');

var _templateMgr2 = _interopRequireDefault(_templateMgr);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/*//////////////////////////////// ABOUT \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\*\

  nc-ui

  General purpose re-usable UI components and snippets.

  Used by:
  * NCNode
  * NCEdge

  Supported Field Types
  - number
  - string
  - markdown
  - hdate
  - select
  - infoOrigin


  Custom Fields Handling

    The `infoOrigin` field requires special handling.

    Ideally, when a node is created, we would process any special fields and
    derive and save any derived info.  But
    a) we don't want to have server-database handle any custom fields -- that
       it should just blindly save data.
    b) when nc-logic creates a new field via `NODE_CREATE`, again, only built-in
       fields are created and stored.  Custom fields are created by the UI as
       needed when they are rendered.
    This means that the `infoOrigin` field remains blank until the user
    decides to change the data.

    To handle this, then we need to make sure `infoOrigin` appears to have data
    whenever it is viewed.  This requires:
    - nc-ui renders a non-built-in field, e.g. an `attribute` field
    - nc-ui renders a `provenance` field
    - importexport-mgr exports node or edge data

\*\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ * //////////////////////////////////////*/

var React = require('react');
var UNISYS = require('unisys/client');
var UTILS = require('./nc-utils');
var MD = require('markdown-it')();
var MDEMOJI = require('markdown-it-emoji');
MD.use(MDEMOJI);
var MDPARSE = require('html-react-parser').default;
var NCDialogInsertImageURL = require('./components/NCDialogInsertImageURL');


/// CONSTANTS & DECLARATIONS //////////////////////////////////////////////////
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
var VIEWMODE = {
  EDIT: 'edit',
  VIEW: 'view'
};

/// MODULE INITIALIZATION /////////////////////////////////////////////////////
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
var MOD = UNISYS.NewModule(module.id);
var UDATA = UNISYS.NewDataLink(MOD);

/// UTILITIES /////////////////////////////////////////////////////////////////
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
function DateFormatted() {
  var today = new Date();
  var year = String(today.getFullYear());
  var date = today.getMonth() + 1 + '/' + today.getDate() + '/' + year.substring(2, 4);
  var time = today.toTimeString().substring(0, 5);
  var dateTime = time + ' on ' + date;
  return dateTime;
}
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/** Converts a markdown string to HTML
 *  And does extra HACK processing as needed:
 *  -- Supports emojis
 *  -- add `_blank` to `a` tags.
 */
function Markdownify() {
  var str = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';

  var htmlString = MD.render(str);
  // HACK!!! MDPARSE does not give us direct access to the dom elements, so just
  // hack it by adding to the parsed html string
  var hackedHtmlString = htmlString.replace(/<a href/g, '<a target="_blank" href');
  return MDPARSE(hackedHtmlString);
}
/// INPUT FORM CHANGE HANDLERS ////////////////////////////////////////////////
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/** This processes the form data before passing it on to the parent handler.
 *  The callback function is generally an input state update method in
 *  NCNode or NCEdge
 *  Emulates m_UIStringInputUpdate but adds error checking on markdown text.
 *  @param {Object} event
 *  @param {function} cb Callback function
 */
function m_UIMarkdownInputUpdate(event, cb) {
  console.warn('WARNNIG: Markdown text is not being error checked!  Use with caution!');
  var key = event.target.id;
  var value = event.target.value;
  if (typeof cb === 'function') cb(key, value);
}
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/** This processes the form data before passing it on to the parent handler.
 *  The callback function is generally an input state update method in
 *  NCNode or NCEdge
 *  @param {Object} event
 *  @param {function} cb Callback function
 */
function m_UIStringInputUpdate(event, cb) {
  var key = event.target.id;
  var value = event.target.value;
  if (typeof cb === 'function') cb(key, value);
}
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/** This processes the form data before passing it on to the parent handler.
 *  The callback function is generally an input state update method in
 *  NCNode or NCEdge
 *  @param {Object} event
 *  @param {function} cb Callback function
 */
function m_UINumberInputUpdate(event, cb) {
  var key = event.target.id;
  var value = Number(event.target.value);
  if (typeof cb === 'function') cb(key, value);
}
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/** This processes the form data before passing it on to the parent handler.
 *  The callback function is generally an input state update method in
 *  NCNode or NCEdge
 *  @param {Object} event
 *  @param {function} cb Callback function
 */
function m_UISelectInputUpdate(event, cb) {
  var key = event.target.id;
  var value = event.target.value;
  if (typeof cb === 'function') cb(key, value);
}
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/** This processes the form data before passing it on to the parent handler.
 *  The callback function is generally an input state update method in
 *  NCNode or NCEdge
 *  @param {Object} event
 *  @param {function} cb Callback function
 */
function m_UIDateInputUpdate(event, cb) {
  var key = event.target.id;
  var value = event.target.value;
  if (typeof cb === 'function') cb(key, value);
}
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/** Insert a URL into the current input
 *  This processes the form data before passing it on to the parent handler.
 *  The callback function is generally an input state update method in
 *  NCNode or NCEdge
 *  @param {Object} event
 *  @param {function} cb Callback function
 */
function m_UIInsertImageURL(url, parentId, cb) {
  var inputEl = document.getElementById(parentId);
  var selectionStart = inputEl.selectionStart;
  var currentValue = String(inputEl.value);
  // fake an event to emulate m_UIStringInputUpdate so markdown is treated as string
  var event = {
    target: {
      id: parentId,
      value: currentValue.substring(0, selectionStart) + ('![image](' + url + ')') + currentValue.substring(selectionStart)
    }
  };
  m_UIMarkdownInputUpdate(event, cb);
}
function m_UICancelInsertImageURL() {}
// FUTURE ENHANCEMENT: Allow removing URL???


/// LAYOUT RENDERERS //////////////////////////////////////////////////////////
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
function RenderTabSelectors(TABS, state, onclick) {
  var uSelectedTab = state.uSelectedTab,
      uViewMode = state.uViewMode,
      degrees = state.degrees;

  var columnsDef = 'repeat(' + Object.keys(TABS).length + ', 1fr)';
  var icn = {
    ATTRIBUTES: 'icn_attributes.svg',
    EDGES: 'icn_edges.svg',
    PROVENANCE: 'icn_provenance.svg'
  };
  return React.createElement(
    'div',
    {
      className: 'tabselectors',
      style: { color: 'red', gridTemplateColumns: columnsDef },
      role: 'tablist'
    },
    Object.keys(TABS).map(function (k) {
      return React.createElement(
        'button',
        {
          id: k,
          key: k,
          className: uSelectedTab === TABS[k] ? 'selected' : '',
          onClick: onclick,
          value: TABS[k],
          disabled: uViewMode === VIEWMODE.EDIT,
          role: 'tab',
          type: 'button',
          'aria-selected': uSelectedTab === TABS[k],
          'aria-controls': TABS[k]
        },
        TABS[k] === 'EDGES' ? TABS[k] + ' (' + degrees + ')' : TABS[k],
        React.createElement('img', { src: 'images/' + icn[k] })
      );
    })
  );
}
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
function RenderAttributesTabView(state, defs, BUILTIN_FIELDS) {
  var attributes = state.attributes,
      degrees = state.degrees,
      weight = state.weight,
      size = state.size;

  var items = [];
  var attributeDefKeys = _templateMgr2.default.GetAttributeDefKeys(defs, BUILTIN_FIELDS);
  attributeDefKeys.forEach(function (k) {
    var def = defs[k];
    items.push(RenderLabel(k, def.displayLabel, def.help));
    var type = def.type;
    switch (type) {
      case 'markdown':
        items.push(RenderMarkdownValue(k, attributes[k]));
        break;
      case 'hdate':
        items.push(RenderDateValue(k, attributes[k], def.format, def.allowFormatSelection));
        break;
      case 'infoOrigin':
        items.push(RenderInfoOriginValue(k, attributes[k], state, defs));
        break;
      case 'string':
      default:
        items.push(RenderStringValue(k, attributes[k]));
        break;
    }
  });

  // degrees hack -- `degrees` is a built-in field, but is displayed in attributes
  if (defs['degrees']) {
    // only if defined, e.g. for nodeDefs
    items.push(RenderLabel('degrees', defs['degrees'].displayLabel));
    items.push(RenderStringValue('degrees', degrees));
  }
  // weight hack -- `weight` is a built-in field, but is displayed in attributes
  if (defs['weight'] && !defs['weight'].hidden) {
    // only if defined, e.g. for nodeDefs
    items.push(RenderLabel('weight', defs['weight'].displayLabel));
    items.push(RenderStringValue('weight', weight + ' (' + size + ')'));
  }

  return React.createElement(
    'div',
    { className: 'formview' },
    items
  );
}
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
function RenderAttributesTabEdit(state, defs, onchange, BUILTIN_FIELDS) {
  var attributes = state.attributes,
      degrees = state.degrees,
      weight = state.weight;

  var items = [];
  var attributeDefKeys = _templateMgr2.default.GetAttributeDefKeys(defs, BUILTIN_FIELDS);
  attributeDefKeys.forEach(function (k) {
    var def = defs[k];
    items.push(RenderLabel(k, def.displayLabel));
    var type = def.type;
    var value = attributes[k] || ''; // catch `undefined` or React will complain about changing from uncontrolled to controlled
    var helpText = def.help;
    switch (type) {
      case 'markdown':
        items.push(RenderMarkdownInput(k, value, onchange, helpText));
        break;
      case 'hdate':
        items.push(RenderDateInput(k, value, def.format, def.allowFormatSelection, onchange, helpText));
        break;
      case 'string':
        items.push(RenderStringInput(k, value, onchange, helpText));
        break;
      case 'infoOrigin':
        items.push(RenderInfoOriginInput(k, value, onchange, helpText, state));
        break;
      case 'number':
        items.push(m_RenderNumberInput(k, value, onchange, helpText));
        break;
      case 'select':
        items.push(RenderOptionsInput(k, value, defs, onchange, helpText));
        break;
      default:
        items.push(RenderStringValue(k, value, onchange)); // display unsupported type
    }
  });

  // degrees hack -- `degrees` is a built-in field, but is displayed in attributes
  if (defs['degrees']) {
    // only if defined, e.g. for nodeDefs
    items.push(RenderLabel('degrees', defs['degrees'].displayLabel));
    items.push(RenderStringValue('degrees', degrees));
  }
  // weight hack -- `weight` is a built-in field, but is displayed in attributes
  if (defs['weight'] && !defs['weight'].hidden) {
    // only if defined, e.g. for nodeDefs
    items.push(RenderLabel('weight', defs['weight'].displayLabel));
    items.push(m_RenderNumberInput('weight', weight, onchange, defs['weight'].help));
  }

  return React.createElement(
    'div',
    { className: 'formview' },
    items
  );
}
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
function RenderProvenanceItemsView(state, defs, BUILTIN_FIELDS) {
  var provenance = state.provenance;

  var items = [];
  var provenanceDefKeys = _templateMgr2.default.GetProvenanceDefKeys(defs, BUILTIN_FIELDS);
  provenanceDefKeys.forEach(function (k) {
    var def = defs[k];
    items.push(RenderLabel(k, def.displayLabel, def.help));
    var type = def.type;
    switch (type) {
      case 'markdown':
        items.push(RenderMarkdownValue(k, provenance[k]));
        break;
      case 'hdate':
        items.push(RenderDateValue(k, provenance[k], defs.format, defs.allowFormatSelection));
        break;
      case 'infoOrigin':
        items.push(RenderInfoOriginValue(k, provenance[k], state, defs));
        break;
      case 'string':
      case 'number':
      default:
        items.push(RenderStringValue(k, provenance[k]));
        break;
    }
  });
  return items;
}
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
function RenderProvenanceItemsEdit(state, defs, onchange, BUILTIN_FIELDS) {
  var provenance = state.provenance,
      degrees = state.degrees;

  var items = [];
  var provenanceDefKeys = _templateMgr2.default.GetProvenanceDefKeys(defs, BUILTIN_FIELDS);
  provenanceDefKeys.forEach(function (k) {
    var def = defs[k];
    items.push(RenderLabel(k, def.displayLabel));
    var type = def.type;
    var value = provenance[k] || ''; // catch `undefined` or React will complain about changing from uncontrolled to controlled
    var helpText = def.help;
    switch (type) {
      case 'markdown':
        items.push(RenderMarkdownInput(k, value, onchange, helpText));
        break;
      case 'hdate':
        items.push(RenderDateInput(k, value, def.format, def.allowFormatSelection, onchange, helpText));
        break;
      case 'string':
        items.push(RenderStringInput(k, value, onchange, helpText));
        break;
      case 'infoOrigin':
        items.push(RenderInfoOriginInput(k, value, onchange, helpText, state));
        break;
      case 'weight':
      case 'number':
        items.push(m_RenderNumberInput(k, value, onchange, helpText));
        break;
      case 'select':
        items.push(RenderOptionsInput(k, value, defs, onchange, helpText));
        break;
      default:
        items.push(RenderStringValue(k, value, onchange)); // display unsupported type
    }
  });
  return items;
}
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
function RenderProvenanceTabView(state, defs, BUILTIN_FIELDS) {
  var provenance = state.provenance,
      degrees = state.degrees,
      created = state.created,
      createdBy = state.createdBy,
      updated = state.updated,
      updatedBy = state.updatedBy,
      revision = state.revision;

  return React.createElement(
    'div',
    { className: 'provenance formview' },
    React.createElement(
      'div',
      { className: 'category' },
      'PROVENANCE'
    ),
    RenderProvenanceItemsView(state, defs, BUILTIN_FIELDS),
    React.createElement(
      'div',
      { className: 'category' },
      'HISTORY'
    ),
    defs.created && !defs.created.hidden && RenderLabel('createdlabel', defs.created.displayLabel),
    defs.created && !defs.created.hidden && RenderProvenanceByline(created, createdBy, defs.createdBy),
    defs.updated && !defs.updated.hidden && RenderLabel('updatedlabel', defs.updated.displayLabel),
    defs.updated && !defs.updated.hidden && RenderProvenanceByline(updated, updatedBy, defs.updatedBy),
    defs.revision && !defs.revision.hidden && RenderLabel('revisionlabel', defs.revision.displayLabel),
    defs.revision && !defs.revision.hidden && RenderStringValue('revisionlabel', revision)
  );
}
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
function RenderProvenanceTabEdit(state, defs, onchange, BUILTIN_FIELDS) {
  var provenance = state.provenance,
      degrees = state.degrees,
      created = state.created,
      createdBy = state.createdBy,
      updated = state.updated,
      updatedBy = state.updatedBy,
      revision = state.revision;

  return React.createElement(
    'div',
    { className: 'provenance formview' },
    React.createElement(
      'div',
      { className: 'category' },
      'PROVENANCE'
    ),
    RenderProvenanceItemsEdit(state, defs, onchange, BUILTIN_FIELDS),
    React.createElement(
      'div',
      { className: 'category' },
      'HISTORY'
    ),
    defs.created && !defs.created.hidden && RenderLabel('createdlabel', defs.created.displayLabel),
    defs.created && !defs.created.hidden && RenderProvenanceByline(created, createdBy, defs.createdBy),
    defs.updated && !defs.updated.hidden && RenderLabel('updatedlabel', defs.updated.displayLabel),
    defs.updated && !defs.updated.hidden && RenderProvenanceByline(updated, updatedBy, defs.updatedBy),
    defs.revision && !defs.revision.hidden && RenderLabel('revisionlabel', defs.revision.displayLabel),
    defs.revision && !defs.revision.hidden && RenderStringValue('revisionlabel', revision)
  );
}
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
function RenderProvenanceByline(date, author, defAuthor) {
  var result = '';
  if (defAuthor && defAuthor.hidden) result = date;else {
    var by = author ? '' + author : '(not recorded)'; // leave author blank for older templates
    result = by + ', ' + date;
  }
  return React.createElement(
    'div',
    { className: 'viewvalue' },
    result
  );
}

/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/// FORM RENDERERS
///
function RenderLabel(key, label, helpText) {
  return React.createElement(
    'label',
    { htmlFor: key, key: key + 'label', title: helpText },
    label
  );
}
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
function RenderMarkdownValue(key) {
  var value = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';

  var val = String(value);
  return React.createElement(
    'div',
    { id: key, key: key + 'value', className: 'viewvalue' },
    Markdownify(val)
  );
}
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
function RenderInfoOriginValue(key, value, state) {
  var newValue = value === undefined || value === '' ? UTILS.DeriveInfoOriginString(state.createdBy, state.created) : value;
  return React.createElement(
    'div',
    { id: key, key: key + 'value', className: 'viewvalue' },
    newValue
  );
}
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
function RenderStringValue(key, value) {
  return React.createElement(
    'div',
    { id: key, key: key + 'value', className: 'viewvalue' },
    value
  );
}
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
function RenderDateValue(key, value, dateFormat, allowFormatSelection) {
  return React.createElement(_URDateField2.default, {
    id: key,
    key: key + 'value',
    value: value,
    dateFormat: dateFormat,
    allowFormatSelection: allowFormatSelection,
    readOnly: true
  });
}
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/**
 * Markdown String Input
 * There are two levels of callbacks necessary here.
 * 1. The `onChange` handler (in this module) processes the input's onChange event, and...
 * 2. ...then passes the resulting value to the `cb` function in the parent module.
 * @param {string} key
 * @param {string} value
 * @param {function} cb
 * @returns
 */
function RenderMarkdownInput(key, value, cb, helpText) {
  var rows = String(value).length > 35 ? 3 : 1;
  return React.createElement(
    'div',
    { key: key + 'div' },
    React.createElement(
      'div',
      { className: 'help' },
      helpText
    ),
    React.createElement(
      'button',
      {
        className: 'stylebutton',
        onClick: function onClick() {
          return UDATA.LocalCall('IMAGE_URL_DIALOG_OPEN', { id: key });
        }
      },
      'Insert Image URL...'
    ),
    React.createElement('textarea', {
      id: key,
      key: key + 'input',
      type: 'string',
      value: value,
      onChange: function onChange(event) {
        return m_UIMarkdownInputUpdate(event, cb);
      },
      autoComplete: 'off' // turn off Chrome's default autocomplete, which conflicts
      , className: rows > 1 ? 'long' : '',
      rows: rows
    }),
    React.createElement(NCDialogInsertImageURL, {
      id: key,
      message: 'Paste image URL:',
      okmessage: 'Insert',
      onOK: function onOK(url) {
        return m_UIInsertImageURL(url, key, cb);
      },
      cancelmessage: 'Cancel',
      onCancel: m_UICancelInsertImageURL
    })
  );
}

/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/**
 * Injects `Created by <createdBy> on <created>` if nothing is defined
 * Otherwise it's treated as a string field
 */
function RenderInfoOriginInput(key, value, cb, helpText, state, onFocus, onBlur) {
  var newValue = value === undefined || value === '' ? UTILS.DeriveInfoOriginString(state.createdBy, state.created) : value;
  return RenderStringInput(key, newValue, cb, helpText, onFocus, onBlur);
}
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/**
 * There are two levels of callbacks necessary here.
 * 1. The `onChange` handler (in this module) processes the input's onChange event, and...
 * 2. ...then passes the resulting value to the `cb` function in the parent module.
 * @param {string} key
 * @param {string} value
 * @param {function} cb
 * @param {string} helpText
 * @param {function} onFocus Handles showing autosuggest matchlist
 * @param {function} onBlur Handles hiding autosuggest matchlist
 * @returns
 */
function RenderStringInput(key, value, cb, helpText, _onFocus, _onBlur) {
  var rows = String(value).length > 35 ? 3 : 1;
  return React.createElement(
    'div',
    { key: key + 'div' },
    React.createElement(
      'div',
      { className: 'help' },
      helpText
    ),
    React.createElement('textarea', {
      id: key,
      key: key + 'input',
      type: 'string',
      value: value,
      onChange: function onChange(event) {
        return m_UIStringInputUpdate(event, cb);
      },
      onFocus: function onFocus() {
        return typeof _onFocus === 'function' && _onFocus();
      },
      onBlur: function onBlur() {
        return typeof _onBlur === 'function' && _onBlur();
      },
      autoComplete: 'off' // turn off Chrome's default autocomplete, which conflicts
      , className: rows > 1 ? 'long' : '',
      rows: rows
    })
  );
}
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/** There are two levels of callbacks necessary here.
 *  1. The `onChange` handler (in this module) processes the input's onChange event, and...
 *  2. ...then passes the resulting value to the `cb` function in the parent module.
 *  @param {string} key
 *  @param {string} value will be converted to a Number()
 *  @param {function} cb
 *  @returns
 */
function m_RenderNumberInput(key, value, cb, helpText) {
  return React.createElement(
    'div',
    { key: key + 'div' },
    React.createElement(
      'div',
      { className: 'help' },
      helpText
    ),
    React.createElement('input', {
      id: key,
      key: key + 'input',
      value: value ? value : 0,
      type: 'number',
      onChange: function onChange(event) {
        return m_UINumberInputUpdate(event, cb);
      }
    })
  );
}
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/** There are two levels of callbacks necessary here.
 *  1. The `onChange` handler (in this module) processes the input's onChange event, and...
 *  2. ...then passes the resulting value to the `cb` function in the parent module.
 *  @param {string} key
 *  @param {string} value
 *  @param {function} cb
 *  @returns
 */
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
function RenderOptionsInput(key, value, defs, cb, helpText) {
  var options = defs[key].options;
  return React.createElement(
    'div',
    { key: key + 'div' },
    React.createElement(
      'div',
      { className: 'help' },
      helpText
    ),
    React.createElement(
      'select',
      {
        id: key,
        key: key + 'select',
        value: value,
        onChange: function onChange(event) {
          return m_UISelectInputUpdate(event, cb);
        }
      },
      options.map(function (o) {
        return React.createElement(
          'option',
          { key: o.label, value: o.label },
          o.label
        );
      })
    )
  );
}
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/** There are two levels of callbacks necessary here.
 *  1. The `onChange` handler (in this module) processes the input's onChange event, and...
 *  2. ...then passes the resulting value to the `cb` function in the parent module.
 *  @param {string} key
 *  @param {string} value Can be string or {value, format} object
 *  @param {string} dateFormat Format that the input string will be converted to
 *  @param {boolean} allowFormatSelection When true, user can select date format
 *                                        otherwise, the format is fixed.
 *  @param {function} cb Callback function
 *  @param {string} helpText
 *  @returns
 */
function RenderDateInput(key, value, dateFormat, allowFormatSelection, cb, helpText) {
  return React.createElement(_URDateField2.default, {
    id: key,
    key: key + 'value',
    value: value,
    dateFormat: dateFormat,
    allowFormatSelection: allowFormatSelection,
    onChange: function onChange(event) {
      return m_UIDateInputUpdate(event, cb);
    },
    helpText: helpText
  });
}

/// EXPORT REACT COMPONENT ////////////////////////////////////////////////////
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
module.exports = {
  VIEWMODE: VIEWMODE,
  DateFormatted: DateFormatted,
  Markdownify: Markdownify,
  RenderTabSelectors: RenderTabSelectors,
  RenderAttributesTabView: RenderAttributesTabView,
  RenderAttributesTabEdit: RenderAttributesTabEdit,
  RenderProvenanceTabView: RenderProvenanceTabView,
  RenderProvenanceTabEdit: RenderProvenanceTabEdit,
  RenderLabel: RenderLabel,
  RenderMarkdownValue: RenderMarkdownValue,
  RenderStringValue: RenderStringValue,
  RenderMarkdownInput: RenderMarkdownInput,
  RenderStringInput: RenderStringInput,
  RenderOptionsInput: RenderOptionsInput
};
});

require.register("view/netcreate/nc-utils.js", function(exports, require, module) {
'use strict';

/*//////////////////////////////// ABOUT \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\*\

  nc-utils

  General purpose utilities for manipulating NCDATA.
  Used by:
  * nc-logic
  * filter-mgr

\*\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ * //////////////////////////////////////*/

/// API METHODS ///////////////////////////////////////////////////////////////
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/** API METHOD
 *  Generates a universal unique identifer for use with
 *  - comment ids
 *  This is a placeholder method.
 *  @return string
 */
function GenerateUUID() {
  // TODO generate actual unique id
  return String(Math.random() * 128);
}
/** API METHOD
 *  Calculates and sets `degrees` for all nodes
 *  `degrees` is the number of edges connected to a node
 *  degrees needs to be recalculated whenever an edge is changed
 *  This modifies `data`
 *  @param {object} data
 *  @param {array} data.nodes
 *  @param {array} data.edges
 */
function RecalculateAllNodeDegrees(data) {
  var degrees = new Map();
  function inc(nodeId) {
    var val = degrees.get(nodeId) || 0;
    degrees.set(nodeId, val + 1);
  }
  // Count edges efficiently
  data.edges.forEach(function (e) {
    inc(e.source);
    inc(e.target);
  });
  // Apply the sums
  data.nodes.forEach(function (n) {
    n.degrees = degrees.get(n.id) || 0;
  });
}
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/** API METHOD
 *  Calculates and sets `size` for all edges
 *  `size` is the sum of all edge weights that have the same source/targets
 *  By default `weight` is 1.
 *  @param {object} data
 *  @param {array} data.nodes
 *  @param {array} data.edges
 */
function RecalculateAllEdgeSizes(data) {
  var size = new Map();
  function getKey(sourceId, targetId) {
    // key always starts with the smaller value
    return sourceId < targetId ? sourceId + '-' + targetId : targetId + '-' + sourceId;
  }
  function inc(weight, sourceId, targetId) {
    var w = weight || 1;
    var key = getKey(sourceId, targetId);
    var val = size.get(key) || 0;
    size.set(key, val + w);
  }
  // Count edges efficiently
  data.edges.forEach(function (e) {
    inc(e.weight, e.source, e.target);
  });
  // Apply the sums
  data.edges.forEach(function (e) {
    var key = getKey(e.source, e.target);
    e.size = size.get(key) || 1;
  });
}
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/** API METHOD
 *  Generates the "InfoOrigin" string:
 *     "Created by <createdBy> on <creeated>"
 *  @param {string} author
 *  @param {date} ms
 */
function DeriveInfoOriginString(author, ms) {
  return 'Created by ' + author + ' on ' + new Date(ms).toLocaleString();
}

/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/** API METHOD
 *  Removes diacritic marks for comparison purposes
 *  @param {string} stringToProcess
 */
function RemoveDiacriticMarks(stringToProcess) {
  return stringToProcess.normalize('NFD').replace(/[\u0300-\u036f]/g, '');
}

/// MODULE EXPORTS ///////////////////////////////////////////////////////////
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
module.exports = {
  GenerateUUID: GenerateUUID,
  RecalculateAllNodeDegrees: RecalculateAllNodeDegrees,
  RecalculateAllEdgeSizes: RecalculateAllEdgeSizes,
  DeriveInfoOriginString: DeriveInfoOriginString,
  RemoveDiacriticMarks: RemoveDiacriticMarks
};
});

require.register("view/netcreate/panel-mgr.js", function(exports, require, module) {
'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

/*//////////////////////////////// ABOUT \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\*\

  panel-mgr

  panel-mgr maintains the PANELSTATE app state, which is used to track the
  status of panel components, including:
  - NCVocabulary
  - NCHelp


\*\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ * //////////////////////////////////////*/

var UNISYS = require('unisys/client');

/// CONSTANTS & DECLARATIONS //////////////////////////////////////////////////
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
var DBG = false;
var PR = 'panel-mgr: ';

/// MODULE INITIALIZATION /////////////////////////////////////////////////////
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
var MOD = UNISYS.NewModule(module.id);
var UDATA = UNISYS.NewDataLink(MOD);

/// UTILITIES /////////////////////////////////////////////////////////////////

/// LIFECYCLE HANDLERS ////////////////////////////////////////////////////////
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/*/ lifecycle INITIALIZE handler
/*/
MOD.Hook('INITIALIZE', function () {
  m_Init();
}); // end UNISYS_INIT

/// PRIVATE METHODS ///////////////////////////////////////////////////////////
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
function m_Init() {
  var PANELSTATE = {
    advancedIsOpen: false,
    helpIsOpen: false,
    vocabIsOpen: false
  };
  UDATA.SetAppState('PANELSTATE', PANELSTATE);
}

/// PUBLIC METHODS ////////////////////////////////////////////////////////////
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
function AdvancedIsOpen() {
  return UDATA.AppState('PANELSTATE').advancedIsOpen;
}
function HelpIsOpen() {
  return UDATA.AppState('PANELSTATE').helpIsOpen;
}
function VocabIsOpen() {
  return UDATA.AppState('PANELSTATE').vocabIsOpen;
}
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
function ToggleAdvanced() {
  var PANELSTATE = UDATA.AppState('PANELSTATE');
  UDATA.SetAppState('PANELSTATE', _extends({}, PANELSTATE, {
    advancedIsOpen: !PANELSTATE.advancedIsOpen
  }));
}
function ToggleHelp() {
  var PANELSTATE = UDATA.AppState('PANELSTATE');
  UDATA.SetAppState('PANELSTATE', _extends({}, PANELSTATE, {
    helpIsOpen: !PANELSTATE.helpIsOpen
  }));
}
function ToggleVocabulary() {
  var PANELSTATE = UDATA.AppState('PANELSTATE');
  UDATA.SetAppState('PANELSTATE', _extends({}, PANELSTATE, {
    vocabIsOpen: !PANELSTATE.vocabIsOpen
  }));
}

/// EXPORT REACT COMPONENT ////////////////////////////////////////////////////
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
module.exports = {
  AdvancedIsOpen: AdvancedIsOpen,
  HelpIsOpen: HelpIsOpen,
  VocabIsOpen: VocabIsOpen,
  ToggleAdvanced: ToggleAdvanced,
  ToggleHelp: ToggleHelp,
  ToggleVocabulary: ToggleVocabulary
};
});

require.register("view/netcreate/render-mgr.js", function(exports, require, module) {
'use strict';

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

/*//////////////////////////////// ABOUT \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\*\

  RENDER MANAGER

  render-mgr handles the transformation of NCDATA (and it's subvariants
  FILTEREDNCDATA and VDATA) into `VDATA` format that can be
  rendered by NCGraphRenderer.

  It is loaded directly by NCGraph for processing.  In this way,
  multiple renderers can be supported via separate  NCGraph components.


\*\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ * //////////////////////////////////////*/

var UNISYS = require('unisys/client');

/// INITIALIZE MODULE /////////////////////////////////////////////////////////
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
var MOD = UNISYS.NewModule(module.id);
var UDATA = UNISYS.NewDataLink(MOD);

/// CONSTANTS & DECLARATIONS //////////////////////////////////////////////////
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
var DBG = false;
var PR = 'render-mgr: ';
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
var VDATA = {};

/// LIFECYCLE HANDLERS ////////////////////////////////////////////////////////
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/*/ lifecycle INITIALIZE handler
/*/
MOD.Hook('INITIALIZE', function () {
  // Register any handlers?
  // Probably not needed as NCGraph handles most events and uses this
  // module as utility methods.
}); // end UNISYS_INIT

/// MODULE PUBLIC METHODS //////////////////////////////////////////////////////
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/** API METHOD
 *  Interprets VDATA into a simplified form for the renderer
 *  @param {*} data NCDATA { nodes, edges }
 *  @returns {Object} {
 *                     nodes: [ ...{id, label, selected, selectedSecondary,
 *                                  size, color, opacity, strokeColor, strokeWidth,
 *                                  help}],
 *                     edges: [ ...{id, sourceId, targetId, size, color, opacity}]
 *                   }
 */
MOD.ProcessNCData = function (data) {
  if (DBG) console.log('ProcessNCData');
  var nodes = m_UpdateNodes(data.nodes);
  var edges = m_UpdateEdges(data.edges);
  VDATA.nodes = nodes;
  VDATA.edges = edges;
  return VDATA;
};
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
MOD.SetNCData = function (data) {
  VDATA = data;
};
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
MOD.UpdateSelection = function (data) {
  var nodes = m_UpdateNodes(VDATA.nodes);
  var edges = m_UpdateEdges(VDATA.edges);
  VDATA.nodes = nodes;
  VDATA.edges = edges;
  return VDATA;
};

/// MODULE PRIVATE METHODS ////////////////////////////////////////////////////
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
function m_UpdateNodes(nodes) {
  var TEMPLATE = UDATA.AppState('TEMPLATE');
  var SELECTION = UDATA.AppState('SELECTION');
  var HILITE = UDATA.AppState('HILITE');
  var SEARCH = UDATA.AppState('SEARCH');
  var selectedNodes = SELECTION.nodes ? SELECTION.nodes.map(function (n) {
    return n.id;
  }) : [];
  var autosuggestHiliteNodeId = HILITE.autosuggestHiliteNodeId;
  var tableHiliteNodeId = HILITE.tableHiliteNodeId;
  var foundNodes = SEARCH.suggestedNodes ? SEARCH.suggestedNodes.map(function (n) {
    return n.id;
  }) : [];
  var highlightStrokeColor = TEMPLATE.sourceColor;
  var foundStrokeColor = TEMPLATE.searchColor;

  var COLORMAP = UDATA.AppState('COLORMAP');
  return nodes.map(function (n) {
    var isAutosuggestHilited = autosuggestHiliteNodeId === n.id;
    var isTabletHilited = tableHiliteNodeId === n.id;
    var isSelected = selectedNodes.includes(n.id);
    var isSecondarySelected = SELECTION.selectedSecondary === n.id;
    var isFound = foundNodes.includes(n.id);
    // FIXME: Just copy over relevant attributes, don't copy the whole object!!!!
    n.color = COLORMAP.nodeColorMap[n.type];
    n.opacity = n.filteredTransparency;
    n.size = Math.min(TEMPLATE.nodeSizeDefault + n.degrees, TEMPLATE.nodeSizeMax);
    n.selected = false;
    n.selectedSecondary = false;
    if (isAutosuggestHilited) {
      n.textColor = '#ccc';
      n.strokeColor = '#ccc';
      n.strokeWidth = '8px';
    } else if (isTabletHilited) {
      n.textColor = '#ccc';
      n.strokeColor = '#ccc';
      n.strokeWidth = '8px';
    } else if (isSelected) {
      // n.shape = 'rectangle';
      n.textColor = highlightStrokeColor;
      n.strokeColor = highlightStrokeColor;
      n.strokeWidth = '5px';
    } else if (isFound) {
      n.textColor = foundStrokeColor;
      n.strokeColor = foundStrokeColor;
      n.strokeWidth = '5px';
    } else {
      n.textColor = '#333';
      n.strokeColor = '#fff'; // default to white border
      n.strokeWidth = '3px';
    }
    if (isSelected) {
      n.selected = true; // selection state can be displayed simultaneously with hilite
    }
    if (isSecondarySelected) {
      n.selectedSecondary = true; // edge source/target is selected
    }
    n.help = m_GetHelp(n);
    return n;
  });
}
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
function m_UpdateEdges(edges) {
  var TEMPLATE = UDATA.AppState('TEMPLATE');
  var edgeSizeMax = TEMPLATE.edgeSizeMax;
  var HILITE = UDATA.AppState('HILITE');
  var userHighlightNodeId = HILITE.userHighlightNodeId;

  return edges.map(function (e) {
    // FIXME: Just copy over relevant attributes, don't copy the whole object!!!!
    // width -- show full width unless mouse is over a node, in which case, do not show weight
    //          size and max size checking was completed in edge-mgr
    var sourceId = typeof e.source === 'number' ? e.source : e.source.id;
    var targetId = typeof e.target === 'number' ? e.target : e.target.id;
    if (e.selected || userHighlightNodeId === undefined || // no mouseover
    sourceId === userHighlightNodeId || // mouseover the source
    targetId === userHighlightNodeId // or target
    ) {
        // leave size alone, max size checking is in edge-mgr
        e.width = edgeSizeMax > 0 ? Math.min(edgeSizeMax, e.size) : e.size;
        e.opacity = e.filteredTransparency;
      } else {
      e.width = TEMPLATE.edgeSizeDefault; // mouse over a node, so just show thin line
      e.opacity = TEMPLATE.edgeDefaultTransparency; // lighten
    }
    // opacity
    return e;
  });
}
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/** Returns the tooltip help text for the node, using labels defined in the template
 *  @param {*} node
 *  @returns {string}
 */
function m_GetHelp(node) {
  var TEMPLATE = UDATA.AppState('TEMPLATE');
  var nodeDefs = TEMPLATE.nodeDefs;
  var titleText = '';
  Object.entries(nodeDefs).forEach(function (_ref) {
    var _ref2 = _slicedToArray(_ref, 2),
        key = _ref2[0],
        def = _ref2[1];

    if (def.includeInGraphTooltip && node[key] !== undefined) {
      if (titleText) titleText += '\n';
      titleText += def.displayLabel + ': ' + node[key];
    }
  });
  return titleText;
}
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
function m_GetUpdatedDateText(nodeEdge) {}
// console.warn('skipping m_GetUpdateDateText for now...revise after provenance/meta.revision is removed')
// const d = new Date(nodeEdge.meta.revision > 0 ? nodeEdge.meta.updated : nodeEdge.meta.created);
// const year = String(d.getFullYear());
// const date = (d.getMonth() + 1) + "/" + d.getDate() + "/" + year.substr(2, 4);
// const time = d.toTimeString().substr(0, 5);
// const author = nodeEdge._nlog ? nodeEdge._nlog[nodeEdge._nlog.length - 1] : 'unknown';
// const dateTime = date + ' at ' + time + " by " + author;
// return dateTime;


/// EXPORT CLASS DEFINITION ///////////////////////////////////////////////////
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
module.exports = MOD;
});

require.register("view/netcreate/selection-mgr.js", function(exports, require, module) {
'use strict';

/*//////////////////////////////// ABOUT \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\*\

  SELECTION MANAGER

  selection-mgr handles UI selection events like:
  * mouse over graph node
  * Others TBD as selection is rewritten.

  SELECTION data is
    { nodes: [], edges: [], selectedSecondary: undefined };

  In general
  * `nodes[0]` will be the selected graph node (using the animated 3 arrow
                        cursor) with an open Node editor
  * `edges[]` are the edges linked to `nodes[0]`
  * `selectedSecondary` is the node id of the source or target node
                        that are highlighted in the graph (using the
                        animated single arrow cursor)

  As of 2023-07 this is a WIP.  There are remnants of v1.x SELECTION management
  in nc-logic.  A lot of the more complex logic has been cleaned up and
  deprecated:
    * AutoComplete
    * NodeSelector
    * EdgeEditor
    * d3-simplenetgraph

\*\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ * //////////////////////////////////////*/

var UNISYS = require('unisys/client');

/// CONSTANTS & DECLARATIONS //////////////////////////////////////////////////
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
var DBG = false;
var PR = 'selection-mgr: ';
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
var SELECTION_MODE = {
  NORMAL: 'normal', // graph is selectable
  EDGE_EDIT: 'edge_edit', // edge is being edited
  // NODE_EDIT is not necessary b/c the transparent screen prevents clicks
  SOURCETARGET: 'sourcetarget', // waiting for a source or target
  COMMENT_EDIT: 'comment_edit' // disable node selection during comment edit
};
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
var m_SelectionMode = SELECTION_MODE.NORMAL; // default

/// INITIALIZE MODULE /////////////////////////////////////////////////////////
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
var MOD = UNISYS.NewModule(module.id);
var UDATA = UNISYS.NewDataLink(MOD);

/// UNISYS HANDLERS ///////////////////////////////////////////////////////////
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/** lifecycle INITIALIZE handler
 */
MOD.Hook('INITIALIZE', function () {
  UDATA.HandleMessage('SELECTMGR_SET_MODE', m_SetMode);
  UDATA.HandleMessage('D3_SELECT_NODE', m_D3SelectNode);
  UDATA.HandleMessage('SELECTMGR_SELECT_SECONDARY', m_SelectSecondary);
  UDATA.HandleMessage('SELECTMGR_DESELECT_SECONDARY', m_DeselectSecondary);
  // NODETABLE_SELECT_NODE
  // AUTOSUGGEST_SELECT_NODE?
}); // end UNISYS_INIT

/// MODULE METHODS ////////////////////////////////////////////////////////////
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/** Set Selection Mode via SELECTMGR_SET_MODE
 *  @param {Object} data
 *  @param {Object} data.mode NORMAL || EDGE_EDIT || SOURCETARGET
 */
function m_SetMode(data) {
  var newmode = SELECTION_MODE.NORMAL; // default
  if (Object.values(SELECTION_MODE).includes(data.mode)) newmode = data.mode;
  m_SelectionMode = newmode;
}
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/** User clicked on d3 graph node
 *  --  Normal mode, clicking on a node selects it
 *  --  SourceTarget mode is for selecting a source or target node while editing an edge
 *  @param {Object} data
 *  @param {array:string} data.nodeLabels
 *  @param {array:number} data.nodeIDs
 */
function m_D3SelectNode(data) {
  var node = m_GetNode(data);
  if (m_SelectionMode === SELECTION_MODE.NORMAL) {
    m_SendSelectionUpdate(node);
  } else if (m_SelectionMode === SELECTION_MODE.EDGE_EDIT) {
    // ignore selection during EDGE_EDIT if SOURCE/TARGET has not been selected yet
    if (DBG) console.log(PR, 'm_D3SelectNode: ignoring selection during edge edit mode');
  } else if (m_SelectionMode === SELECTION_MODE.SOURCETARGET) {
    m_SendSourceTargetSelectionUpdate(node);
  } else if (m_SelectionMode === SELECTION_MODE.COMMENT_EDIT) {
    // ignore selection during COMMENT edit so that selecting
    // another node closes the comment
  } else {
    throw 'Unknown SELECTION Mode ' + m_SelectionMode;
  }
}
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/** Get the node that was passed via the search string
 *  either nodeIDs or nodeLabels
 *  @param {Object} searchdata
 *  @param {array} searchdata.nodeLabels strings
 *  @param {array} searchdata.nodeIDs numbers
 *  @returns {Object} single node
 */
function m_GetNode(searchdata) {
  var NCDATA = UDATA.AppState('NCDATA');
  var _searchdata$nodeLabel = searchdata.nodeLabels,
      nodeLabels = _searchdata$nodeLabel === undefined ? [] : _searchdata$nodeLabel,
      _searchdata$nodeIDs = searchdata.nodeIDs,
      nodeIDs = _searchdata$nodeIDs === undefined ? [] : _searchdata$nodeIDs;

  var nodeLabel = nodeLabels[0];
  var nodeId = nodeIDs[0];
  var node = void 0;
  if (nodeId) {
    node = NCDATA.nodes.find(function (n) {
      return n.id === nodeId;
    });
  } else if (nodeLabel) {
    node = NCDATA.nodes.find(function (n) {
      return n.label === nodeLabel;
    });
  } else {
    // No node selected, so deselect
  }
  return node;
}
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/** Broadcast SELECTION and HILITE updates for selecting a single node
 *  @param {Object} node
 */
function m_SendSelectionUpdate(node) {
  var NCDATA = UDATA.AppState('NCDATA');
  var newSelection = void 0,
      newHilite = void 0;
  if (node === undefined) {
    // Node not found, clear selection state
    newSelection = { nodes: [], edges: [], selectedSecondary: undefined };
    newHilite = { autosuggestHiliteNodeId: undefined };
  } else {
    // Load existing node and edges
    var nid = node.id;
    var edges = [];
    if (NCDATA.edges) edges = edges.concat(NCDATA.edges.filter(function (edge) {
      return edge.source === nid || edge.target === nid;
    }));
    // create select state object
    newSelection = { nodes: [node], edges: edges, selectedSecondary: undefined };
    newHilite = { autosuggestHiliteNodeId: undefined };
  }
  // Broadcast selection/hilite updates
  UDATA.SetAppState('SELECTION', newSelection);
  UDATA.SetAppState('HILITE', newHilite);
}
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/** Broadcast SELECT_SOURCETARGET updates for selecting a source or target
 *  @param {Object} node
 */
function m_SendSourceTargetSelectionUpdate(node) {
  if (node === undefined) return; // skip update
  UDATA.LocalCall('SELECT_SOURCETARGET', { node: node });
}
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/** During Edge editing, show animated cursor after user selects a source
 *  or target node.  (For secondary selections)
 *  Broadcast SELECTMGR_SELECT_SECONDARY updates for selecting a source or target
 *  @param {Object} data
 *  @param {Object} data.node
 */
function m_SelectSecondary(data) {
  var SELECTION = UDATA.AppState('SELECTION');
  SELECTION.selectedSecondary = data.node.id;
  UDATA.SetAppState('SELECTION', SELECTION);
}
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/** Deselect the secondary selection
 *  During Edge editing, after the user has selected the source or target
 *  node, we turn off the secondary select (so the single blue rotating arrow
 *  is cleared from the graph)
 */
function m_DeselectSecondary() {
  // Broadcast secondary deselection -- remove animated arrow
  var SELECTION = UDATA.AppState('SELECTION');
  SELECTION.selectedSecondary = undefined;
  UDATA.SetAppState('SELECTION', SELECTION);
}

/// EXPORT CLASS DEFINITION ///////////////////////////////////////////////////
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
module.exports = MOD;
});

require.register("view/netcreate/template-editor-mgr.js", function(exports, require, module) {
'use strict';

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

/*//////////////////////////////// ABOUT \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\*\

  Template Editor Manager

  Client-side

  This handles the UI logic for the "Edit Template" subpanel on the "More..."
  tab.

  The actual template loading is handled by `server-database.js`.

  The internal template representation is JSON.
  The template definition itself is stored as a TOML file, which is then
  converted to JSON when loaded.

  The default json-editor schema is defined in `template-schema.js`


  ##  BACKGROUND

  Template data is loaded by `server-database` DB.InitializeDatabase call.

  With Version 1.4 of NetCreate, we introduce a new TOML template format that
  is easier to work with directly.
  * If you open a project that does not have a TOML template, the app will
    try to load the old JSON version and convert it.  See
    server-database.m_LoadJSONTemplate() and m_MigrateJSONtoTOML().
  * If you try to load a TOML template that is missing some key fields
    (e.g. error message definitions), then the app will fall back on
    fields defined in the schema.  See server-database.m_LoadTOMLTemplate()).


\*\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ * //////////////////////////////////////*/

var UNISYS = require('unisys/client');
var TOML = require('@iarna/toml');
var DATASTORE = require('system/datastore');

/// CONSTANTS & DECLARATIONS //////////////////////////////////////////////////
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
var DBG = false;

/// INITIALIZE MODULE /////////////////////////////////////////////////////////
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
var MOD = UNISYS.NewModule(module.id);
var UDATA = UNISYS.NewDataLink(MOD);

/// MODULE METHODS ////////////////////////////////////////////////////////////
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/** Used when importing a TOML file
 *  Makes sure TOML file is readable. Returns JSON
 */
MOD.ValidateTOMLFile = function () {
  var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(data) {
    var tomlfile, tomlText, json, isValid;
    return regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            tomlfile = data.tomlfile;
            _context.prev = 1;
            _context.next = 4;
            return tomlfile.text();

          case 4:
            tomlText = _context.sent;
            json = TOML.parse(tomlText);
            isValid = true;
            return _context.abrupt('return', { isValid: isValid, templateJSON: json });

          case 10:
            _context.prev = 10;
            _context.t0 = _context['catch'](1);
            return _context.abrupt('return', { isValid: false, error: _context.t0 });

          case 13:
          case 'end':
            return _context.stop();
        }
      }
    }, _callee, undefined, [[1, 10]]);
  }));

  return function (_x) {
    return _ref.apply(this, arguments);
  };
}();
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/** Update TEMPLATE AppState
    Called by Template.jsx to update the template data with the info from the form.
    Mostly used to process whether the form is:
    a) updating the whole template data, or
    b) updating only node types, or
    c) updateing only edge types

    IMPORTANT: Does NOT save the template or SetAppState!  Use SaveTemplateFile!
      SaveTemplateFile will trigger a TEMPLATE state update.
      Generally you won't call UpdateTemplate without a followup call to
      SaveTemplateFile.

    MAJOR SIDE EFFECT: Updates NCDATA with changes!
    `templateSnippet` can be the whole template object, or just the node types or
    edge types.
 */
MOD.UpdateTemplate = function (templateSnippet, editScope) {
  var TEMPLATE = UDATA.AppState('TEMPLATE');

  // a) Replace whole template?
  if (editScope === 'root') TEMPLATE = templateSnippet;

  // b) Replace NODE type options?
  if (editScope === 'nodeTypeOptions') {
    // 1. Clean/validate -- Remove any extra empty labels
    //    Added Rows will have a blank 'label' but a non-blank 'replacement'
    var numOfEmptyLabels = 0;
    TEMPLATE.nodeDefs.type.options = templateSnippet.options.filter(function (o) {
      // if there's a replacement, always add it
      if (o.replacement !== '') return true;
      // if the label is blank...
      if (o.label === '') {
        if (numOfEmptyLabels < 1) {
          // ... and there has only been one, add it
          numOfEmptyLabels++;
          return true;
        } else {
          // ... otherwise, remove extras
          return false;
        }
      }
      // keep all other adjustments
      return true;
    });
    // 2. Update NCDATA with new types
    UDATA.LocalCall('NODE_TYPES_UPDATE', {
      nodeTypesChanges: templateSnippet.options
    });
    // 3. Remove Types marked for deletion
    TEMPLATE.nodeDefs.type.options = TEMPLATE.nodeDefs.type.options.filter(function (o) {
      return !o.delete;
    });
    // 4. Update types with replacement labels
    TEMPLATE.nodeDefs.type.options = TEMPLATE.nodeDefs.type.options.map(function (o) {
      if (o.replacement) {
        o.label = o.replacement;
        o.replacement = '';
      }
      return o;
    });
  }

  // c) Replace EDGE type options?
  if (editScope === 'edgeTypeOptions') {
    // 1. Clean/validate -- Remove any extra empty labels
    //    Added Rows will have a blank 'label' but a non-blank 'replacement'
    var _numOfEmptyLabels = 0;
    TEMPLATE.edgeDefs.type.options = templateSnippet.options.filter(function (o) {
      // if there's a replacement, always add it
      if (o.replacement !== '') return true;
      // if the label is blank...
      if (o.label === '') {
        if (_numOfEmptyLabels < 1) {
          // ... and there has only been one, add it
          _numOfEmptyLabels++;
          return true;
        } else {
          // ... otherwise, remove extras
          return false;
        }
      }
      // keep all other adjustments
      return true;
    });
    // 2. Update NCDATA with new types
    UDATA.LocalCall('EDGE_TYPES_UPDATE', {
      edgeTypesChanges: templateSnippet.options
    });
    // 3. Remove Types marked for deletion
    TEMPLATE.edgeDefs.type.options = TEMPLATE.edgeDefs.type.options.filter(function (o) {
      return !o.delete;
    });
    // 4. Update types with replacements
    TEMPLATE.edgeDefs.type.options = TEMPLATE.edgeDefs.type.options.map(function (o) {
      if (o.replacement) {
        o.label = o.replacement;
        o.replacement = '';
      }
      return o;
    });
  }
  // This call is redundant.  SaveTemplateToFile will trigger a state update.
  // UDATA.SetAppState("TEMPLATE", TEMPLATE);
  return TEMPLATE;
};
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/** Save template file to disk
    in case we do not necessarily want to autosave template data
    This calls: datastore > server > server-database
 */
MOD.SaveTemplateToFile = function (template) {
  return DATASTORE.SaveTemplateFile(template);
};
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/** Download template to local file
 */
MOD.DownloadTemplate = function () {
  DATASTORE.GetTemplateTOMLFileName() // datastore > server > server-database
  .then(function (data) {
    var filename = data.filename;
    var TEMPLATE = UDATA.AppState('TEMPLATE');
    var toml = TOML.stringify(TEMPLATE);
    var link = document.createElement('a');
    var blob = new Blob(['\uFEFF', toml]);
    var url = URL.createObjectURL(blob);
    link.href = url;
    link.download = filename;
    document.body.appendChild(link); // Required for FF
    link.click();
    document.body.removeChild(link);
  });
};

/// EXPORT CLASS DEFINITION ///////////////////////////////////////////////////
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
module.exports = MOD;
});

require.register("view/netcreate/template-mgr.js", function(exports, require, module) {
"use strict";

/*//////////////////////////////// ABOUT \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\*\

  Template Manager

  Client-side

  This is a work in progress module that will handle all template management.
  Eventually `template-editor-mgr` will probably be folded into this module.


  ## NOTES

  * Node/Edge Data is retained
    The template definitions can be used essentially to show/hide particular fields.
    This allows users to switch from one template to another without losing data.


  ## BACKGROUND

  Template data is loaded by `server-database` DB.InitializeDatabase call.

  With Version 1.4 of Net.Create, we introduce a new TOML template format that
  is easier to work with directly.
  * If you open a project that does not have a TOML template, the app will
    try to load the old JSON version and convert it.  See
    server-database.m_LoadJSONTemplate() and m_MigrateJSONtoTOML().
  * If you try to load a TOML template that is missing some key fields
    (e.g. error message definitions), then the app will fall back on
    fields defined in the schema.  See server-database.m_LoadTOMLTemplate()).

  With Version 2.0 of Net.Create, we want to centralize all of the template
  management logic in this module.

  Used by:
  * nc-ui

\*\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ * //////////////////////////////////////*/

/// API METHODS ///////////////////////////////////////////////////////////////
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/** API METHOD
 *  Returns an array of attribute keys defined in the template definitions
 *  Attributes are:
 *  - Not built-in fields
 *  - Not provenance fields
 *  - Not hidden fields
 *  ...in other words, every other field that has been defined in the template.
 */
function GetAttributeDefKeys(defs, BUILTIN_FIELDS) {
  return Object.keys(defs).filter(function (k) {
    return !BUILTIN_FIELDS.includes(k) && !defs[k].isProvenance && !defs[k].hidden;
  });
}
/** API METHOD
 *  Returns an array of provenance keys defined in the template definitions
 *  Provenance fields are:
 *  - Designated as `isProvenance` field
 *  - Not built-in fields
 *  - Not hidden fields
 */
function GetProvenanceDefKeys(defs, BUILTIN_FIELDS) {
  return Object.keys(defs).filter(function (k) {
    return defs[k].isProvenance && !BUILTIN_FIELDS.includes(k) && !defs[k].hidden;
  });
}

/// MODULE EXPORTS ///////////////////////////////////////////////////////////
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
module.exports = {
  GetAttributeDefKeys: GetAttributeDefKeys,
  GetProvenanceDefKeys: GetProvenanceDefKeys
};
});

require.register("view/netcreate/template-schema.js", function(exports, require, module) {
'use strict';

/*//////////////////////////////// ABOUT \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\*\

  Template Schema

  The Template Schema defines a spec for
  `[json-editor](https://github.com/json-editor/json-editor)`
  to generate a UI for editing the template.  It identifies the objects that
  the json-editor needs to support and provides meta data about how to
  display and handle the edits.

  `template-editor-mgr.js` handles initialization client-side.

  NOTE: This schema is NOT the same as the `toml` template file schema.  This
  schema is used by `json-editor` to know how to display a UI for editing the
  template itself.

  IMPORTANT: If you modify the schema, generate a new template by

    1. Start NetCreate
    2. In web browser developer console, run:

        `ncRegenerateDefaultTemplate()`
    3. This will create a new `_default.template.toml` file.

  Alternatively the default template's JSON can be generated from this schema spec by
  by calling MOD.ParseTemplateSchema() directly. This is the rough equivalent of doing this:
  1. Start NetCreate with a new db, e.g. `./nc.js --dataset=newdefault`
  2. Clicking "New Template" on the "More... > Edit Template" tab.
  3. Clicking "Save Changes"
  4. Copy the file to `netcreate-2018/build/app/assets/templates/`
  FIXME: rename filepath
  5. Renaming the saved template to `_default.template.toml`

\*\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ * //////////////////////////////////////*/

var clone = require('rfdc')();

/// CONSTANTS & DECLARATIONS //////////////////////////////////////////////////
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
var DBG = false;
var PR = 'template-schema';

/// INITIALIZE MODULE /////////////////////////////////////////////////////////
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
var MOD = {};
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/** Node Type Schema
 *  This is a subset of the full template schema.
 *
 *  We pull it out separately so that Node Types can be edited by themselves
 *  without having to scroll through the whole template.
 *
 *  When editing the main Template, this is loaded as a subset of the main schema.
 *  When editing node types, this is loaded by MOD.GetTypeEditorSchema to
 *  provide additional UI elements to manage deleting and renaming
 *  existing field types
 *
 *  Default "No Type Selected" has a label of ""
 *  Templates should always have one default.
 */
MOD.NODETYPEOPTIONS = {
  type: 'array',
  title: 'Node Types',
  format: 'table',
  options: {
    disable_collapse: true,
    disable_array_add: false,
    disable_array_delete: false,
    disable_array_delete_all_rows: true,
    disable_array_delete_last_row: true,
    disable_array_reorder: false
  }, // not editable
  items: {
    type: 'object',
    properties: {
      'color': {
        type: 'string',
        title: 'Color',
        format: 'color',
        default: '#eeeeee' // for "No Type Selected", must be in form '#nnnnnn' -- alpha or short '#nnn' do not work
      },
      'label': {
        type: 'string',
        title: 'Label',
        default: '' // leave '' for "No Type Selected"
      }
    }
  }
};
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/** Edge Type Schema
 *  This is a subset of the full template schema.
 *
 *  We pull it out separately so that Edge Types can be edited by themselves
 *  without having to scroll through the whole template.
 *
 *  When editing the main Template, this is loaded as a subset of the main schema.
 *  When editing edge types, this is loaded by MOD.GetTypeEditorSchema to
 *  provide additional UI elements to manage deleting and renaming
 *  existing field types
 */
MOD.EDGETYPEOPTIONS = {
  type: 'array',
  title: 'Edge Types',
  format: 'table',
  options: {
    disable_collapse: true,
    disable_array_add: false,
    disable_array_delete: false,
    disable_array_delete_all_rows: true,
    disable_array_delete_last_row: true,
    disable_array_reorder: false
  }, // not editable
  items: {
    type: 'object',
    properties: {
      'color': {
        // currently unused
        type: 'string',
        title: 'Color',
        format: 'color',
        default: '#eeeeee' // for "No Type Selected", must be in form '#nnnnnn' -- alpha or short '#nnn' do not work
      },
      'label': {
        type: 'string',
        title: 'Label',
        default: '' // leave '' for "No Type Selected"
      }
    }
  }
};
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/** Main NetCreate Schema Template
 *  This references the NODETYPEOPTIONS and EGETYPEOPTIONS above to define
 *  options.
 *  Be sure to update `server-database.m_MigrateTemplate()` with any additions to
 *  the schema to maintain backward compatibility.
 */
MOD.TEMPLATE = {
  title: 'NetCreate Template',
  version: 2.0, // match github Release number
  type: 'object',
  properties: {
    'name': {
      type: 'string',
      description: 'A short descriptive title for the project.  This is displayed on the graph view.  It can contain spaces.  e.g. "Alexander the Great"',
      default: 'Untitled Project'
    },
    'description': {
      type: 'string',
      description: 'Short description of the project, e.g. "This is based on the Secret Histories of Prokopios"',
      default: 'No Description'
    },
    'citation': {
      type: 'object',
      description: 'Citation meta data',
      properties: {
        'text': {
          type: 'string',
          description: 'Bibliographic reference',
          default: 'No citation set',
          options: {
            inputAttributes: { placeholder: 'Untitled Network' }
          }
        },
        'hidden': {
          type: 'boolean',
          format: 'checkbox',
          description: 'Hides the "Cite Node" and "Cite Edge" buttons.',
          default: false
        }
      }
    },
    'requireLogin': {
      type: 'boolean',
      format: 'checkbox',
      description: 'Users are required to log in to view the graph.',
      default: false
    },
    'hideDeleteNodeButton': {
      // Normally, only admins can delete nodes.  You're an admin if:
      // -- is localhost (e.g. IP is 127.0.0.71)
      // -- or has `?admin=true` GET parameter
      // This will force hide the delete button even if you're an admin.
      type: 'boolean',
      format: 'checkbox',
      description: 'Always hide Node delete button, even for admins.',
      default: false
    },
    'allowLoggedInUserToImport': {
      // Normally, only admins can import data.  You're an admin if:
      // -- is localhost (e.g. IP is 127.0.0.71)
      // -- or has `?admin=true` GET parameter
      // This will allow any logged in user to import data.
      type: 'boolean',
      format: 'checkbox',
      description: 'Allow any logged in user to import data.  Admins can always import data.',
      default: false
    },
    'nodeSizeDefault': {
      type: 'number',
      description: 'Default size (radius) of nodes.',
      default: 5
    },
    'nodeSizeMax': {
      type: 'number',
      description: 'Maximum size (radius) of nodes.',
      default: 50
    },
    'edgeSizeDefault': {
      type: 'number',
      description: 'Default size (width) of edges.',
      default: 1 // Was 0.175 to be barely visible, but edge weights now override this default to 1
    },
    'edgeSizeMax': {
      type: 'number',
      description: 'Maximum size (width) of edges.  Set to 0 to turn off maximum size limit.',
      default: 25
    },
    'filterFade': {
      type: 'string',
      description: 'Display name of the filter function that shows matching items and fades others.',
      default: 'Fade'
    },
    'filterFadeHelp': {
      type: 'string',
      description: 'Help text for the Fade filter, displayed on the VIEWS panel.',
      default: 'Show matches, Fade others'
    },
    'filterReduce': {
      type: 'string',
      description: 'Display name of the filter function that shows matching items and reduces (removes) others.',
      default: 'Reduce'
    },
    'filterReduceHelp': {
      type: 'string',
      description: 'Help text for the Reduce filter, displayed on the VIEWS panel.',
      default: 'Show matches, Reduce (remove) others & recalculate sizes'
    },
    'filterFocus': {
      type: 'string',
      description: 'Display name of the filter fucntion that shows nodes connected to a selected node within a specified range.',
      default: 'Focus'
    },
    'filterFocusHelp': {
      type: 'string',
      description: 'Help text for the Focus filter, displayed on the VIEWS panel.',
      default: 'Show only nodes connected to the selected node within range'
    },
    'duplicateWarning': {
      type: 'string',
      description: 'Warning message to display if user is trying to create a node that already exists.',
      default: 'NOTE: At least one other node has the same name. Use search or the node table to check the others.'
    },
    'nodeIsLockedMessage': {
      type: 'string',
      description: 'Warning message to display if user is trying to edit a node that someone is already editing.',
      default: 'This node is currently being edited by someone else, please try again later.'
    },
    'edgeIsLockedMessage': {
      type: 'string',
      description: 'Warning message to display if user is trying to edit an edge that someone is already editing.',
      default: 'This edge is currently being edited by someone else, please try again later.'
    },
    'templateIsLockedMessage': {
      type: 'string',
      description: 'Warning message to display if user is trying to edit a node or edge or import while the template is being edited.',
      default: 'The template is currently being edited, please try again later.'
    },
    'importIsLockedMessage': {
      type: 'string',
      description: 'Warning message to display if user is trying to edit a node, edge, or template import is active.',
      default: 'Data is currently being imported, please try again later.'
    },
    'nodeDefaultTransparency': {
      type: 'number',
      description: 'Default transparency for nodes (0 - 1).',
      default: 1.0
    },
    'edgeDefaultTransparency': {
      type: 'number',
      description: 'Default transparency for edges (0 - 1).',
      default: 0.7
    },
    'searchColor': {
      type: 'string',
      description: 'Outline color of nodes highlighted via search (hex).',
      default: '#008800',
      format: 'color'
    },
    'sourceColor': {
      type: 'string',
      description: 'Outline color of node selected to view / edit (hex).',
      default: '#FFa500',
      format: 'color'
    },
    'nodeDefs': {
      properties: {
        'id': {
          type: 'object',
          description: 'System-generated unique id number',
          properties: {
            'type': {
              type: 'number',
              options: { hidden: true }, // not editable
              description: '"id" data type',
              default: 'number'
            },
            'displayLabel': {
              type: 'string',
              description: 'Label to use for system display',
              default: 'Id'
            },
            'exportLabel': {
              type: 'string',
              description: 'Label to use for exported csv file field name',
              default: 'ID'
            },
            'help': {
              type: 'string',
              options: { hidden: true }, // not editable
              description: 'Help text to display on the Node Editor form',
              default: 'System-generated unique id number'
            },
            'includeInGraphTooltip': {
              type: 'boolean',
              format: 'checkbox',
              description: 'Show "id" value in tooltip on graph',
              default: true
            },
            'isProvenance': {
              type: 'boolean',
              format: 'checkbox',
              description: 'Show in Provenance tab',
              default: false
            },
            'hidden': {
              type: 'boolean',
              format: 'checkbox',
              options: { hidden: true }, // not end-user editable, always hidden from Template Editor
              description: 'Not used.  "id" is always hidden.',
              default: false
            }
          }
        },
        'label': {
          type: 'object',
          description: 'Display name of the node',
          properties: {
            'type': {
              type: 'string',
              options: { hidden: true }, // not editable
              description: '"label" data type',
              default: 'string'
            },
            'displayLabel': {
              type: 'string',
              description: 'Label to use for system display',
              default: 'label'
            },
            'exportLabel': {
              type: 'string',
              description: 'Label to use for exported csv file field name',
              default: 'Label'
            },
            'help': {
              type: 'string',
              description: 'Help text to display on the Node Editor form',
              default: 'Display name of the node'
            },
            'includeInGraphTooltip': {
              type: 'boolean',
              format: 'checkbox',
              description: 'Show "label" value in tooltip on graph',
              default: true
            },
            'isProvenance': {
              type: 'boolean',
              format: 'checkbox',
              description: 'Show in Provenance tab',
              default: false
            },
            'hidden': {
              type: 'boolean',
              options: { hidden: true }, // not end-user editable, always hidden from Template Editor
              description: 'Not used.  "label" is always shown.',
              format: 'checkbox',
              default: false
            }
          }
        },
        'type': {
          type: 'object',
          description: 'Enumerated node types',
          properties: {
            'type': {
              type: 'string',
              options: { hidden: true }, // not editable
              description: 'node "type" data type',
              default: 'select'
            },
            'displayLabel': {
              type: 'string',
              description: 'Label to use for system display',
              default: 'Type'
            },
            'exportLabel': {
              type: 'string',
              description: 'Label to use for exported csv file field name',
              default: 'NodeType' // matches Gephi
            },
            'help': {
              type: 'string',
              description: 'Help text to display on the Node Editor form',
              default: 'Select a category'
            },
            'includeInGraphTooltip': {
              type: 'boolean',
              format: 'checkbox',
              description: 'Show "type" value in tooltip on graph',
              default: true
            },
            'isProvenance': {
              type: 'boolean',
              format: 'checkbox',
              description: 'Show in Provenance tab',
              default: false
            },
            'hidden': {
              type: 'boolean',
              format: 'checkbox',
              description: 'Hides "type" from Node Editor, Nodes Table, and exports',
              default: false
            },
            'options': Object.assign({}, MOD.NODETYPEOPTIONS, {
              description: 'NOTE: We recommend using the "Edit Node Types" feature to edit Node Types.  It provides additional dataset migration tools.'
            })
          }
        },
        'notes': {
          // was "Significance"
          type: 'object',
          description: 'General purpose notes text field',
          properties: {
            'type': {
              type: 'string',
              description: '"notes" data type',
              default: 'string'
            },
            'displayLabel': {
              type: 'string',
              description: 'Label to use for system display',
              default: 'Notes'
            },
            'exportLabel': {
              type: 'string',
              description: 'Label to use for exported csv file field name',
              default: 'Notes'
            },
            'help': {
              type: 'string',
              description: 'Help text to display on the Node Editor form',
              default: 'General purpose notes text field'
            },
            'includeInGraphTooltip': {
              type: 'boolean',
              format: 'checkbox',
              description: 'Show "notes" value in tooltip on graph',
              default: true
            },
            'isProvenance': {
              type: 'boolean',
              format: 'checkbox',
              description: 'Show in Provenance tab',
              default: false
            },
            'hidden': {
              type: 'boolean',
              format: 'checkbox',
              description: 'Hides "notes" from Node Editor, Nodes Table, and exports',
              default: false
            }
          }
        },
        'info': {
          // Info/Number
          type: 'object',
          description: 'General purpose numeric text field',
          properties: {
            'type': {
              type: 'string',
              description: '"info" data type',
              default: 'number'
            },
            'displayLabel': {
              type: 'string',
              description: 'Label to use for system display',
              default: 'Number'
            },
            'exportLabel': {
              type: 'string',
              description: 'Label to use for exported csv file field name',
              default: 'Info'
            },
            'help': {
              type: 'string',
              description: 'Help text to display on the Node Editor form',
              default: 'Some number comparison'
            },
            'includeInGraphTooltip': {
              type: 'boolean',
              format: 'checkbox',
              description: 'Show "info" value in tooltip on graph',
              default: true
            },
            'isProvenance': {
              type: 'boolean',
              format: 'checkbox',
              description: 'Show in Provenance tab',
              default: false
            },
            'hidden': {
              type: 'boolean',
              format: 'checkbox',
              description: 'Hides "info" from Node Editor, Nodes Table, and exports',
              default: false
            }
          }
        },
        'infoSource': {
          type: 'object',
          description: 'Who created the node',
          properties: {
            'type': {
              type: 'string',
              description: '"infoSource" data type',
              default: 'string'
            },
            'displayLabel': {
              type: 'string',
              description: 'Label to use for system display',
              default: 'Info Source'
            },
            'exportLabel': {
              type: 'string',
              description: 'Label to use for exported csv file field name',
              default: 'InfoSource'
            },
            'help': {
              type: 'string',
              description: 'Help text to display on the Node Editor form',
              default: 'Who created this?  (aka Source)'
            },
            'includeInGraphTooltip': {
              type: 'boolean',
              format: 'checkbox',
              description: 'Show "infoSource" value in tooltip on graph',
              default: true
            },
            'isProvenance': {
              type: 'boolean',
              format: 'checkbox',
              description: 'Show in Provenance tab',
              default: true
            },
            'hidden': {
              type: 'boolean',
              format: 'checkbox',
              description: 'Hides "infoSource" from Node Editor, Nodes Table, and exports',
              default: false
            }
          }
        },
        'degrees': {
          type: 'object',
          description: 'Number of edges connected to this node (auto-calculated)',
          properties: {
            'type': {
              type: 'string',
              description: '"degrees" data type',
              default: 'number'
            },
            'displayLabel': {
              type: 'string',
              description: 'Label to use for system display',
              default: 'Degrees'
            },
            'exportLabel': {
              type: 'string',
              description: 'Label to use for exported csv file field name',
              default: 'Degrees'
            },
            'help': {
              type: 'string',
              description: 'Help text to display on the Node Editor form',
              default: 'Number of edges connected to this node'
            },
            'includeInGraphTooltip': {
              type: 'boolean',
              format: 'checkbox',
              description: 'Show "degrees" value in tooltip on graph',
              default: true
            },
            'isProvenance': {
              type: 'boolean',
              format: 'checkbox',
              description: 'Show in Provenance tab',
              default: false
            },
            'hidden': {
              type: 'boolean',
              format: 'checkbox',
              description: 'Hides "degrees" from Node Editor, Nodes Table, and exports',
              default: false
            }
          }
        },
        'created': {
          // Built-in data DO NOT MODIFY!
          type: 'object',
          description: 'System-generated date.  This setting used to show/hide tooltip in graph and import/export',
          properties: {
            'displayLabel': {
              type: 'string',
              description: 'Label to use for system display',
              default: 'Created'
            },
            'exportLabel': {
              type: 'string',
              description: 'Label to use for exported csv file field name',
              default: 'Created'
            },
            'help': {
              type: 'string',
              description: 'Help text to display on the Node Editor form',
              default: 'Date and time node was created'
            },
            'includeInGraphTooltip': {
              type: 'boolean',
              format: 'checkbox',
              description: 'Show "created" value in tooltip on graph',
              default: true
            },
            'isProvenance': {
              type: 'boolean',
              format: 'checkbox',
              description: 'Show in Provenance tab',
              default: true
            },
            'hidden': {
              type: 'boolean',
              format: 'checkbox',
              description: 'Requires "created" for exports and imports',
              default: false
            }
          }
        },
        'createdBy': {
          // Built-in data DO NOT MODIFY!
          type: 'object',
          description: 'System-generated date.  This setting used to show/hide tooltip in graph and import/export',
          properties: {
            'displayLabel': {
              type: 'string',
              description: 'Label to use for system display',
              default: 'Created By'
            },
            'help': {
              type: 'string',
              description: 'Help text to display on the Node Editor form',
              default: 'Author who created the node'
            },
            'exportLabel': {
              type: 'string',
              description: 'Label to use for exported csv file field name',
              default: 'Created By'
            },
            'includeInGraphTooltip': {
              type: 'boolean',
              format: 'checkbox',
              description: 'Show "created by" value in tooltip on graph',
              default: true
            },
            'isProvenance': {
              type: 'boolean',
              format: 'checkbox',
              description: 'Show in Provenance tab',
              default: true
            },
            'hidden': {
              type: 'boolean',
              format: 'checkbox',
              description: 'Requires "created by" for exports and imports',
              default: false
            }
          }
        },
        'updated': {
          // Built-in data DO NOT MODIFY!
          type: 'object',
          description: 'System-generated date.  This setting used to show/hide tooltip in graph and import/export',
          properties: {
            'displayLabel': {
              type: 'string',
              description: 'Label to use for system display',
              default: 'Updated'
            },
            'exportLabel': {
              type: 'string',
              description: 'Label to use for exported csv file field name',
              default: 'Updated'
            },
            'help': {
              type: 'string',
              description: 'Help text to display on the Node Editor form',
              default: 'Date and time node was last modified'
            },
            'includeInGraphTooltip': {
              type: 'boolean',
              format: 'checkbox',
              description: 'Show "updated" value in tooltip on graph',
              default: true
            },
            'isProvenance': {
              type: 'boolean',
              format: 'checkbox',
              description: 'Show in Provenance tab',
              default: true
            },
            'hidden': {
              type: 'boolean',
              format: 'checkbox',
              description: 'Requires "updated" for exports and imports',
              default: false
            }
          }
        },
        'updatedBy': {
          // Built-in data DO NOT MODIFY!
          type: 'object',
          description: 'System-generated date.  This setting used to show/hide tooltip in graph and import/export',
          properties: {
            'displayLabel': {
              type: 'string',
              description: 'Label to use for system display',
              default: 'Updated By'
            },
            'exportLabel': {
              type: 'string',
              description: 'Label to use for exported csv file field name',
              default: 'Updated By'
            },
            'help': {
              type: 'string',
              description: 'Help text to display on the Node Editor form',
              default: 'Author who updated the node'
            },
            'includeInGraphTooltip': {
              type: 'boolean',
              format: 'checkbox',
              description: 'Show "updated by" value in tooltip on graph',
              default: true
            },
            'isProvenance': {
              type: 'boolean',
              format: 'checkbox',
              description: 'Show in Provenance tab',
              default: true
            },
            'hidden': {
              type: 'boolean',
              format: 'checkbox',
              description: 'Requires "updated by" for exports and imports',
              default: false
            }
          }
        },
        'revision': {
          // Built-in data DO NOT MODIFY!
          type: 'object',
          description: 'System-generated data.  This setting used to show/hide tooltip in graph and import/export',
          properties: {
            'displayLabel': {
              type: 'string',
              description: 'Label to use for system display',
              default: 'Revision'
            },
            'exportLabel': {
              type: 'string',
              description: 'Label to use for exported csv file field name',
              default: 'Revision'
            },
            'help': {
              type: 'string',
              description: 'Help text to display on the Node Editor form',
              default: 'Number of times this node has been revised'
            },
            'includeInGraphTooltip': {
              type: 'boolean',
              format: 'checkbox',
              description: 'Show "revision" value in tooltip on graph',
              default: true
            },
            'isProvenance': {
              type: 'boolean',
              format: 'checkbox',
              description: 'Show in Provenance tab',
              default: true
            },
            'hidden': {
              type: 'boolean',
              format: 'checkbox',
              description: 'Requires "revision" for exports and imports',
              default: true
            }
          }
        }
      }
    },
    'edgeDefs': {
      properties: {
        'id': {
          type: 'object',
          description: 'System-generated unique id number',
          properties: {
            'type': {
              type: 'number',
              options: { hidden: true }, // not editable
              description: '"id" data type',
              default: 'number'
            },
            'displayLabel': {
              type: 'string',
              description: 'Label to use for system display',
              default: 'Id'
            },
            'exportLabel': {
              type: 'string',
              description: 'Label to use for exported csv file field name',
              default: 'ID'
            },
            'help': {
              type: 'string',
              options: { hidden: true }, // not editable
              description: 'Help text to display on the Edge Editor form',
              default: 'System-generated unique id number'
            },
            'isProvenance': {
              type: 'boolean',
              format: 'checkbox',
              description: 'Show in Provenance tab',
              default: false
            },
            'hidden': {
              type: 'boolean',
              format: 'checkbox',
              options: { hidden: true }, // not end-user editable, always hidden from Template Editor
              description: 'Not used.  "id" is always hidden.',
              default: false
            }
          }
        },
        'source': {
          type: 'object',
          description: 'Node the edge is connected to',
          properties: {
            'type': {
              type: 'string',
              options: { hidden: true }, // not editable
              description: '"source" data type',
              default: 'number'
            },
            'displayLabel': {
              type: 'string',
              description: 'Label to use for system display',
              default: 'Source'
            },
            'exportLabel': {
              type: 'string',
              description: 'Label to use for exported csv file field name',
              default: 'Source'
            },
            'help': {
              type: 'string',
              description: 'Help text to display on the Node Editor form',
              default: 'Edge source node'
            },
            'isProvenance': {
              type: 'boolean',
              format: 'checkbox',
              description: 'Show in Provenance tab',
              default: false
            },
            'hidden': {
              type: 'boolean',
              format: 'checkbox',
              options: { hidden: true }, // not end-user editable, always hidden from Template Editor
              description: 'Not used.  "source" is always shown.',
              default: false
            }
          }
        },
        'target': {
          type: 'object',
          description: 'Node the edge is connected to',
          properties: {
            'type': {
              type: 'string',
              options: { hidden: true }, // not editable
              description: '"target" data type',
              default: 'number'
            },
            'displayLabel': {
              type: 'string',
              description: 'Label to use for system display',
              default: 'Target'
            },
            'exportLabel': {
              type: 'string',
              description: 'Label to use for exported csv file field name',
              default: 'Target'
            },
            'help': {
              type: 'string',
              description: 'Help text to display on the Node Editor form',
              default: 'Edge target node'
            },
            'hidden': {
              type: 'boolean',
              format: 'checkbox',
              options: { hidden: true }, // not end-user editable, always hidden from Template Editor
              description: 'Not used.  "target" is always shown.',
              default: false
            }
          }
        },
        'type': {
          type: 'object',
          description: 'Enumerated edge types',
          properties: {
            'type': {
              type: 'string',
              options: { hidden: true }, // not editable
              description: 'edge "type" data type',
              default: 'select'
            },
            'displayLabel': {
              type: 'string',
              description: 'Label to use for system display',
              default: 'Type'
            },
            'exportLabel': {
              type: 'string',
              description: 'Label to use for exported csv file field name',
              default: 'EdgeType' // matches Gephi?
            },
            'help': {
              type: 'string',
              description: 'Help text to display on the Node Editor form',
              default: 'Type of edge connection'
            },
            'isProvenance': {
              type: 'boolean',
              format: 'checkbox',
              description: 'Show in Provenance tab',
              default: false
            },
            'hidden': {
              type: 'boolean',
              format: 'checkbox',
              description: 'Hides "type" from Edge Editor, Edges Table, and exports',
              default: false
            },
            'options': Object.assign({}, MOD.EDGETYPEOPTIONS, {
              description: 'NOTE: We recommend using the "Edit Edge Types" feature to edit Edge Types.  It provides additional dataset migration tools.'
            })
          }
        },
        'notes': {
          // was "Signficance"
          type: 'object',
          description: 'General purpose notes text field',
          properties: {
            'type': {
              type: 'string',
              description: '"notes" data type',
              default: 'string'
            },
            'displayLabel': {
              type: 'string',
              description: 'Label to use for system display',
              default: 'Notes'
            },
            'exportLabel': {
              type: 'string',
              description: 'Label to use for exported csv file field name',
              default: 'Notes'
            },
            'help': {
              type: 'string',
              description: 'Help text to display on the Node Editor form',
              default: 'Significance of the connection'
            },
            'isProvenance': {
              type: 'boolean',
              format: 'checkbox',
              description: 'Show in Provenance tab',
              default: false
            },
            'hidden': {
              type: 'boolean',
              format: 'checkbox',
              description: 'Hides "notes" from Edge Editor, Edges Table, and exports',
              default: false
            }
          }
        },
        'info': {
          // Info/Number/Date
          type: 'object',
          description: 'General purpose numeric text field',
          properties: {
            'type': {
              type: 'string',
              description: '"info" data type',
              default: 'number'
            },
            'displayLabel': {
              type: 'string',
              description: 'Label to use for system display',
              default: 'Date'
            },
            'exportLabel': {
              type: 'string',
              description: 'Label to use for exported csv file field name',
              default: 'Date'
            },
            'help': {
              type: 'string',
              description: 'Help text to display on the Node Editor form',
              default: '"YYYY-MM-DD" format"'
            },
            'isProvenance': {
              type: 'boolean',
              format: 'checkbox',
              description: 'Show in Provenance tab',
              default: false
            },
            'hidden': {
              type: 'boolean',
              format: 'checkbox',
              description: 'Hides "info" from Edge Editor, Edges Table, and exports',
              default: false
            }
          }
        },
        'weight': {
          // Weight/Number
          type: 'object',
          description: 'Weight of this edge',
          properties: {
            'type': {
              type: 'number',
              description: '"weight" data type',
              default: 'number'
            },
            'defaultValue': {
              type: 'number',
              description: 'The default "weight" of new edges',
              default: 1
            },
            'displayLabel': {
              type: 'string',
              description: 'Label to use for system display',
              default: 'Weight'
            },
            'exportLabel': {
              type: 'string',
              description: 'Label to use for exported csv file field name',
              default: 'Weight'
            },
            'help': {
              type: 'string',
              description: 'Help text to display on the Edge Editor form',
              default: 'Weight of edge'
            },
            'includeInGraphTooltip': {
              type: 'boolean',
              format: 'checkbox',
              description: 'Show "weight" value in tooltip on graph',
              default: true
            },
            'isRequired': {
              type: 'boolean',
              format: 'checkbox',
              description: 'Make "weight" a required value.  When "true", "weight" will be set to `defaultValue` for all edges if "weight" was not previously defined.  Be sure to define `defaultValue`',
              default: true
            },
            'isProvenance': {
              type: 'boolean',
              format: 'checkbox',
              description: 'Show in Provenance tab',
              default: false
            },
            'hidden': {
              type: 'boolean',
              format: 'checkbox',
              description: 'Hides "weight" from Edge Editor, Edges Table, and exports',
              default: false
            }
          }
        },
        'infoSource': {
          type: 'object',
          description: 'Who created the edge',
          properties: {
            'type': {
              type: 'string',
              description: '"infoSource" data type',
              default: 'string'
            },
            'displayLabel': {
              type: 'string',
              description: 'Label to use for system display',
              default: 'Info Source'
            },
            'exportLabel': {
              type: 'string',
              description: 'Label to use for exported csv file field name',
              default: 'InfoSource'
            },
            'help': {
              type: 'string',
              description: 'Help text to display on the Edge Editor form',
              default: 'Who created this?  (aka Source)'
            },
            'includeInGraphTooltip': {
              type: 'boolean',
              format: 'checkbox',
              description: 'Show "infoSource" value in tooltip on graph',
              default: true
            },
            'isProvenance': {
              type: 'boolean',
              format: 'checkbox',
              description: 'Show in Provenance tab',
              default: true
            },
            'hidden': {
              type: 'boolean',
              format: 'checkbox',
              description: 'Hides "infoSource" from Edge Editor, Edges Table, and exports',
              default: false
            }
          }
        },
        'citation': {
          type: 'object',
          description: 'Source of the edge',
          properties: {
            'type': {
              type: 'string',
              description: '"citation" data type',
              default: 'string'
            },
            'displayLabel': {
              type: 'string',
              description: 'Label to use for system display',
              default: 'Citation'
            },
            'exportLabel': {
              type: 'string',
              description: 'Label to use for exported csv file field name',
              default: 'Citation'
            },
            'help': {
              type: 'string',
              description: 'Help text to display on the Node Editor form',
              default: 'Source Book.Chapter (e.g. "Part 2 06.03")'
            },
            'isProvenance': {
              type: 'boolean',
              format: 'checkbox',
              description: 'Show in Provenance tab',
              default: false
            },
            'hidden': {
              type: 'boolean',
              format: 'checkbox',
              description: 'Hides "citation" from Edge Editor, Edges Table, and exports',
              default: false
            }
          }
        },
        'category': {
          type: 'object',
          description: 'General purpose string text field (deprecated)',
          properties: {
            'type': {
              type: 'string',
              description: '"category" data type',
              default: 'string'
            },
            'displayLabel': {
              type: 'string',
              description: 'Label to use for system display',
              default: 'Category'
            },
            'exportLabel': {
              type: 'string',
              description: 'Label to use for exported csv file field name',
              default: 'Category'
            },
            'help': {
              type: 'string',
              description: 'Help text to display on the Node Editor form',
              default: 'Category (deprecated)'
            },
            'isProvenance': {
              type: 'boolean',
              format: 'checkbox',
              description: 'Show in Provenance tab',
              default: false
            },
            'hidden': {
              type: 'boolean',
              format: 'checkbox',
              description: 'Hides "category" from Edge Editor, Edges Table, and exports',
              default: true
            }
          }
        },
        'created': {
          // Built-in data DO NOT MODIFY!
          type: 'object',
          description: 'System-generated date.  This setting used to show/hide tooltip in graph and import/export',
          properties: {
            'displayLabel': {
              type: 'string',
              description: 'Label to use for system display',
              default: 'Created'
            },
            'exportLabel': {
              type: 'string',
              description: 'Label to use for exported csv file field name',
              default: 'Created'
            },
            'includeInGraphTooltip': {
              type: 'boolean',
              format: 'checkbox',
              description: 'Show "created" value in tooltip on graph',
              default: true
            },
            'help': {
              type: 'string',
              description: 'Help text to display on the Edge Editor form',
              default: 'Date and time edge was created'
            },
            'isProvenance': {
              type: 'boolean',
              format: 'checkbox',
              description: 'Show in Provenance tab',
              default: true
            },
            'hidden': {
              type: 'boolean',
              format: 'checkbox',
              description: 'Requires "created" for exports and imports',
              default: false
            }
          }
        },
        'createdBy': {
          // Built-in data DO NOT MODIFY!
          type: 'object',
          description: 'System-generated date.  This setting used to show/hide tooltip in graph and import/export',
          properties: {
            'displayLabel': {
              type: 'string',
              description: 'Label to use for system display',
              default: 'Created By'
            },
            'exportLabel': {
              type: 'string',
              description: 'Label to use for exported csv file field name',
              default: 'Created By'
            },
            'includeInGraphTooltip': {
              type: 'boolean',
              format: 'checkbox',
              description: 'Show "created by" value in tooltip on graph',
              default: true
            },
            'help': {
              type: 'string',
              description: 'Help text to display on the Edge Editor form',
              default: 'Author who created the edge'
            },
            'isProvenance': {
              type: 'boolean',
              format: 'checkbox',
              description: 'Show in Provenance tab',
              default: true
            },
            'hidden': {
              type: 'boolean',
              format: 'checkbox',
              description: 'Requires "created by" for exports and imports',
              default: false
            }
          }
        },
        'updated': {
          // Built-in data DO NOT MODIFY!
          type: 'object',
          description: 'System-generated date.  This setting used to show/hide tooltip in graph and import/export',
          properties: {
            'displayLabel': {
              type: 'string',
              description: 'Label to use for system display',
              default: 'Updated'
            },
            'exportLabel': {
              type: 'string',
              description: 'Label to use for exported csv file field name',
              default: 'Updated'
            },
            'includeInGraphTooltip': {
              type: 'boolean',
              format: 'checkbox',
              description: 'Show "updated" value in tooltip on graph',
              default: true
            },
            'help': {
              type: 'string',
              description: 'Help text to display on the Edge Editor form',
              default: 'Date and time edge was last modified'
            },
            'isProvenance': {
              type: 'boolean',
              format: 'checkbox',
              description: 'Show in Provenance tab',
              default: true
            },
            'hidden': {
              type: 'boolean',
              format: 'checkbox',
              description: 'Requires "updated" for exports and imports',
              default: false
            }
          }
        },
        'updatedBy': {
          // Built-in data DO NOT MODIFY!
          type: 'object',
          description: 'System-generated date.  This setting used to show/hide tooltip in graph and import/export',
          properties: {
            'displayLabel': {
              type: 'string',
              description: 'Label to use for system display',
              default: 'Updated By'
            },
            'exportLabel': {
              type: 'string',
              description: 'Label to use for exported csv file field name',
              default: 'Updated By'
            },
            'includeInGraphTooltip': {
              type: 'boolean',
              format: 'checkbox',
              description: 'Show "updated by" value in tooltip on graph',
              default: true
            },
            'help': {
              type: 'string',
              description: 'Help text to display on the Edge Editor form',
              default: 'Author who updated the nodedgee'
            },
            'isProvenance': {
              type: 'boolean',
              format: 'checkbox',
              description: 'Show in Provenance tab',
              default: true
            },
            'hidden': {
              type: 'boolean',
              format: 'checkbox',
              description: 'Requires "updated by" for exports and imports',
              default: false
            }
          }
        },
        'revision': {
          // Built-in data DO NOT MODIFY!
          type: 'object',
          description: 'System-generated data.  This setting used to show/hide tooltip in graph and import/export',
          properties: {
            'displayLabel': {
              type: 'string',
              description: 'Label to use for system display',
              default: 'Revision'
            },
            'exportLabel': {
              type: 'string',
              description: 'Label to use for exported csv file field name',
              default: 'Revision'
            },
            'includeInGraphTooltip': {
              type: 'boolean',
              format: 'checkbox',
              description: 'Show "revision" value in tooltip on graph',
              default: true
            },
            'help': {
              type: 'string',
              description: 'Help text to display on the Edge Editor form',
              default: 'Number of times this edge has been revised'
            },
            'isProvenance': {
              type: 'boolean',
              format: 'checkbox',
              description: 'Show in Provenance tab',
              default: true
            },
            'hidden': {
              type: 'boolean',
              format: 'checkbox',
              description: 'Requires "revision" for exports and imports',
              default: true
            }
          }
        }
      }
    }
  }
};

/// SCHEMA METHODS ////////////////////////////////////////////////////////////
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/*/ API METHOD for Extra schema definition for the Type Editor UI
 *  This introduces a wrapper around the Node or Edge Type Schema to provide
 *  extra UI elements for managing Type changes that the normal Template
 *  editor does not have:
 *  - Adds a checkbox to mark a type for deletion
 *  - Adds a field to map a deleted type to another type
 *
 *  Used by the "Edit Node Types" and "Edit Edge Types" buttons.
/*/
MOD.GetTypeEditorSchema = function (schemaTypeOptions) {
  var typeOptions = clone(schemaTypeOptions);
  try {
    typeOptions.options.disable_array_delete = true;
    typeOptions.items.properties.label.options = {
      // For some reason inputAttribute 'disabled' does not work here
      // so we use a className to mark the field
      // then in Template.onEditNodeTypes we set the
      // disabled property via js
      inputAttributes: { class: 'disabledField' }
    };
    typeOptions.items.properties.replacement = {
      type: 'string',
      title: 'Change To'
    };
    typeOptions.items.properties.delete = {
      type: 'boolean',
      title: 'Delete?',
      format: 'checkbox'
    };
  } catch (err) {
    console.error('GetTypeEditorSchema Error:', err);
  }
  return {
    title: 'Edit Type Options',
    type: 'object',
    description: 'NOTE that labels are case-sensitive, so "Person" is different from "person"',
    options: {
      disable_array_add: true,
      disable_array_delete: true,
      disable_array_delete_all_rows: true,
      disable_array_delete_last_row: true,
      disable_array_reorder: true,
      disable_collapse: true,
      disable_properties: true
    }, // not editable
    properties: {
      'options': typeOptions
    }
  };
};
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/** API METHOD
 *  ParseTemplateSchema generates and resturns the default template json
 *  Use this to create a pristine defaul template json
/*/
MOD.ParseTemplateSchema = function () {
  var currNodeOrEdge = void 0;
  // optionsDefinition is eithert MOD.NODETYPEOPTIONS or MOD.EDGETYPEOPTIONS
  function u_ParseOptions(optionsDefinition) {
    var json = {};
    var options = optionsDefinition.items.properties;
    Object.keys(options).forEach(function (key) {
      json[key] = options[key].default;
    });
    return [json];
  }
  function u_ParseProperty(prop) {
    if (prop.type === 'string') return prop.default || ''; // fall back to '' if default is not defined
    if (prop.type === 'number') return prop.default || 0; // fall back to 0 if no default
    if (prop.type === 'boolean') return prop.default || false; // fall back to false if no default
    return '';
  }
  function u_ParseProperties(properties, currJson) {
    Object.keys(properties).forEach(function (templatePropertyKey) {
      if (templatePropertyKey === 'nodeDefs') currNodeOrEdge = 'nodes';
      if (templatePropertyKey === 'edgeDefs') currNodeOrEdge = 'edges';
      // REVIEW logic assumes that `edgeDefs` is the last category that has `options`
      // if we add a new category, we may need to clear `currNodeOrEdge`

      var prop = properties[templatePropertyKey];
      if (prop.properties) {
        currJson[templatePropertyKey] = u_ParseProperties(prop.properties, {});
      } else if (templatePropertyKey === 'options') {
        // Special handling for nodeDef and edgeDef `type` options as these are not defined in the main
        // schema, but are instead separated
        if (currNodeOrEdge === 'nodes') {
          currJson.options = u_ParseOptions(MOD.NODETYPEOPTIONS);
        } else if (currNodeOrEdge === 'edges') {
          currJson.options = u_ParseOptions(MOD.EDGETYPEOPTIONS);
        } else {
          throw PR + '.ParseTemplateSchema encountered unknown \'options\' in ' + JSON.stringify(properties) + ' at ' + templatePropertyKey;
        }
      } else {
        currJson[templatePropertyKey] = u_ParseProperty(prop);
      }
    });
    return currJson;
  }
  var json = { version: MOD.TEMPLATE.version }; // Insert template version
  u_ParseProperties(MOD.TEMPLATE.properties, json);
  return json;
};

/// RUNTIME INITIALIZATION ////////////////////////////////////////////////////
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
MOD.ParseTemplateSchema();

/// EXPORT CLASS DEFINITION ///////////////////////////////////////////////////
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
module.exports = MOD;
});

require.register("view/netcreate/ui-mgr.js", function(exports, require, module) {
'use strict';

/*//////////////////////////////// ABOUT \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\*\

  UI MANAGER

  ui-mgr handles the custom definition of a UI

  It maps the template-schema variables to
  the visual display of components.

  What does it take care of?
  * order of display items?
  * visible status?

  Available Field Types
  * string
  * number
  * datetime
  * date
  * time
  * enum
  * color

\*\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ * //////////////////////////////////////*/

var UNISYS = require('unisys/client');

/// CONSTANTS & DECLARATIONS //////////////////////////////////////////////////
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
var DBG = false;
var PR = 'ui-mgr: ';

/// INITIALIZE MODULE /////////////////////////////////////////////////////////
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
var MOD = UNISYS.NewModule(module.id);
var UDATA = UNISYS.NewDataLink(MOD);

// /// UNISYS HANDLERS ///////////////////////////////////////////////////////////
// /// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
// /** lifecycle INITIALIZE handler
//  */
// MOD.Hook("INITIALIZE", () => {
//   UDATA.HandleMessage('USER_HILITE_NODE', m_UserHighlightNode);
//   UDATA.HandleMessage('AUTOSUGGEST_HILITE_NODE', m_AutoSuggestHiliteNode);
//   UDATA.HandleMessage('TABLE_HILITE_NODE', m_TableHiliteNode);
// }); // end UNISYS_INIT

// /// MODULE METHODS ////////////////////////////////////////////////////////////
// /// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
// function m_UserHighlightNode(data) {
//   // console.log('mouseover', data.nodeId)
//   const HILITE = UDATA.AppState('HILITE');
//   HILITE.userHighlightNodeId = data.nodeId;
//   UDATA.SetAppState('HILITE', HILITE);
// }

/// EXPORT CLASS DEFINITION ///////////////////////////////////////////////////
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
module.exports = MOD;
});

require.alias("assert/assert.js", "assert");
require.alias("buffer/index.js", "buffer");
require.alias("crypto-browserify/index.js", "crypto");
require.alias("events/events.js", "events");
require.alias("stream-http/index.js", "http");
require.alias("https-browserify/index.js", "https");
require.alias("os-browserify/browser.js", "os");
require.alias("path-browserify/index.js", "path");
require.alias("process/browser.js", "process");
require.alias("punycode/punycode.js", "punycode");
require.alias("querystring-es3/index.js", "querystring");
require.alias("stream-browserify/index.js", "stream");
require.alias("node-browser-modules/node_modules/string_decoder/index.js", "string_decoder");
require.alias("util/util.js", "sys");
require.alias("url/url.js", "url");process = require('process');require.register("___globals___", function(exports, require, module) {
  
});})();require('___globals___');


//# sourceMappingURL=netc-app.js.map